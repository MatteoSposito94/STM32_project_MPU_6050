
F303_MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006654  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  080067e8  080067e8  000167e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c04  08006c04  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08006c04  08006c04  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c04  08006c04  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c04  08006c04  00016c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c08  08006c08  00016c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006c0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000154  200001e0  200001e0  000201e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000334  20000334  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e485  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dd7  00000000  00000000  0002e691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a10  00000000  00000000  00030468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000958  00000000  00000000  00030e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b9dc  00000000  00000000  000317d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d678  00000000  00000000  0004d1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d4fa  00000000  00000000  0005a824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000f7d1e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000038f8  00000000  00000000  000f7d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080067cc 	.word	0x080067cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	080067cc 	.word	0x080067cc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <MPU6050_Init>:
double Ax, Ay, Az, Gx, Gy, Gz;

// funzione per inizializzare tutte le periferiche dell'accelerometro/giroscopio

void MPU6050_Init (void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af04      	add	r7, sp, #16
	uint8_t check;
	check = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	71fb      	strb	r3, [r7, #7]


	// guardo se il sensore è presente e può lavorare
	// leggo all'indirizzo 0x75 (WHO I AM)
	// se 0x68 o 104 allora vuol dire che è presente e inizia a lavorare bene
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1 ,&check, 1, HAL_MAX_DELAY);
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb6:	9302      	str	r3, [sp, #8]
 8000bb8:	2301      	movs	r3, #1
 8000bba:	9301      	str	r3, [sp, #4]
 8000bbc:	1dfb      	adds	r3, r7, #7
 8000bbe:	9300      	str	r3, [sp, #0]
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	2275      	movs	r2, #117	; 0x75
 8000bc4:	21d0      	movs	r1, #208	; 0xd0
 8000bc6:	4823      	ldr	r0, [pc, #140]	; (8000c54 <MPU6050_Init+0xac>)
 8000bc8:	f000 ff88 	bl	8001adc <HAL_I2C_Mem_Read>

	if (check == 104) // verifica presenza MPU
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	2b68      	cmp	r3, #104	; 0x68
 8000bd0:	d13b      	bne.n	8000c4a <MPU6050_Init+0xa2>
	{
		// registro di alimentazione PWR_MGMT_1 - tutti i bit a 0, riattivo lo slave gli dico tieniti pronto
		Data = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 8000bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bda:	9302      	str	r3, [sp, #8]
 8000bdc:	2301      	movs	r3, #1
 8000bde:	9301      	str	r3, [sp, #4]
 8000be0:	1dbb      	adds	r3, r7, #6
 8000be2:	9300      	str	r3, [sp, #0]
 8000be4:	2301      	movs	r3, #1
 8000be6:	226b      	movs	r2, #107	; 0x6b
 8000be8:	21d0      	movs	r1, #208	; 0xd0
 8000bea:	481a      	ldr	r0, [pc, #104]	; (8000c54 <MPU6050_Init+0xac>)
 8000bec:	f000 fe62 	bl	80018b4 <HAL_I2C_Mem_Write>
		// imposto frequenza, sample rate, con valore 7 in registro 0x19
		Data = 0x07;
 8000bf0:	2307      	movs	r3, #7
 8000bf2:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000bf4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bf8:	9302      	str	r3, [sp, #8]
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	9301      	str	r3, [sp, #4]
 8000bfe:	1dbb      	adds	r3, r7, #6
 8000c00:	9300      	str	r3, [sp, #0]
 8000c02:	2301      	movs	r3, #1
 8000c04:	2219      	movs	r2, #25
 8000c06:	21d0      	movs	r1, #208	; 0xd0
 8000c08:	4812      	ldr	r0, [pc, #72]	; (8000c54 <MPU6050_Init+0xac>)
 8000c0a:	f000 fe53 	bl	80018b4 <HAL_I2C_Mem_Write>
		// configuro accelerometro XA_ST=0; YA_ST=0; ZA_ST=0; 2g
		Data = 0x00;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8000c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c16:	9302      	str	r3, [sp, #8]
 8000c18:	2301      	movs	r3, #1
 8000c1a:	9301      	str	r3, [sp, #4]
 8000c1c:	1dbb      	adds	r3, r7, #6
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	2301      	movs	r3, #1
 8000c22:	221c      	movs	r2, #28
 8000c24:	21d0      	movs	r1, #208	; 0xd0
 8000c26:	480b      	ldr	r0, [pc, #44]	; (8000c54 <MPU6050_Init+0xac>)
 8000c28:	f000 fe44 	bl	80018b4 <HAL_I2C_Mem_Write>
		// configuro giroscopio XG_ST=0; YG_ST=0; ZG_ST=0; 250 deg/s
		Data = 0x00;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8000c30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c34:	9302      	str	r3, [sp, #8]
 8000c36:	2301      	movs	r3, #1
 8000c38:	9301      	str	r3, [sp, #4]
 8000c3a:	1dbb      	adds	r3, r7, #6
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	2301      	movs	r3, #1
 8000c40:	221b      	movs	r2, #27
 8000c42:	21d0      	movs	r1, #208	; 0xd0
 8000c44:	4803      	ldr	r0, [pc, #12]	; (8000c54 <MPU6050_Init+0xac>)
 8000c46:	f000 fe35 	bl	80018b4 <HAL_I2C_Mem_Write>
	}

}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000210 	.word	0x20000210

08000c58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b092      	sub	sp, #72	; 0x48
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c5e:	f000 fadb 	bl	8001218 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c62:	f000 f809 	bl	8000c78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c66:	f000 f8c9 	bl	8000dfc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c6a:	f000 f897 	bl	8000d9c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000c6e:	f000 f855 	bl	8000d1c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
 MPU6050_Init();
 8000c72:	f7ff ff99 	bl	8000ba8 <MPU6050_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <main+0x1e>

08000c78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b096      	sub	sp, #88	; 0x58
 8000c7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c82:	2228      	movs	r2, #40	; 0x28
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f003 f8c8 	bl	8003e1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c8c:	f107 031c 	add.w	r3, r7, #28
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	611a      	str	r2, [r3, #16]
 8000caa:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cac:	2302      	movs	r3, #2
 8000cae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cb4:	2310      	movs	r3, #16
 8000cb6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cbc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f001 fae9 	bl	8002298 <HAL_RCC_OscConfig>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ccc:	f000 f8c6 	bl	8000e5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd0:	230f      	movs	r3, #15
 8000cd2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ce4:	f107 031c 	add.w	r3, r7, #28
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f002 f9dc 	bl	80030a8 <HAL_RCC_ClockConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000cf6:	f000 f8b1 	bl	8000e5c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000cfa:	2320      	movs	r3, #32
 8000cfc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	4618      	mov	r0, r3
 8000d06:	f002 fc05 	bl	8003514 <HAL_RCCEx_PeriphCLKConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000d10:	f000 f8a4 	bl	8000e5c <Error_Handler>
  }
}
 8000d14:	bf00      	nop
 8000d16:	3758      	adds	r7, #88	; 0x58
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d20:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <MX_I2C1_Init+0x74>)
 8000d22:	4a1c      	ldr	r2, [pc, #112]	; (8000d94 <MX_I2C1_Init+0x78>)
 8000d24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000d26:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <MX_I2C1_Init+0x74>)
 8000d28:	4a1b      	ldr	r2, [pc, #108]	; (8000d98 <MX_I2C1_Init+0x7c>)
 8000d2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d2c:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <MX_I2C1_Init+0x74>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d32:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <MX_I2C1_Init+0x74>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d38:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <MX_I2C1_Init+0x74>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d3e:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <MX_I2C1_Init+0x74>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <MX_I2C1_Init+0x74>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <MX_I2C1_Init+0x74>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <MX_I2C1_Init+0x74>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d56:	480e      	ldr	r0, [pc, #56]	; (8000d90 <MX_I2C1_Init+0x74>)
 8000d58:	f000 fd1c 	bl	8001794 <HAL_I2C_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d62:	f000 f87b 	bl	8000e5c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d66:	2100      	movs	r1, #0
 8000d68:	4809      	ldr	r0, [pc, #36]	; (8000d90 <MX_I2C1_Init+0x74>)
 8000d6a:	f001 f9fd 	bl	8002168 <HAL_I2CEx_ConfigAnalogFilter>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d74:	f000 f872 	bl	8000e5c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <MX_I2C1_Init+0x74>)
 8000d7c:	f001 fa3f 	bl	80021fe <HAL_I2CEx_ConfigDigitalFilter>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d86:	f000 f869 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000210 	.word	0x20000210
 8000d94:	40005400 	.word	0x40005400
 8000d98:	2000090e 	.word	0x2000090e

08000d9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000da0:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <MX_USART2_UART_Init+0x58>)
 8000da2:	4a15      	ldr	r2, [pc, #84]	; (8000df8 <MX_USART2_UART_Init+0x5c>)
 8000da4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000da6:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <MX_USART2_UART_Init+0x58>)
 8000da8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <MX_USART2_UART_Init+0x58>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <MX_USART2_UART_Init+0x58>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <MX_USART2_UART_Init+0x58>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <MX_USART2_UART_Init+0x58>)
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <MX_USART2_UART_Init+0x58>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dcc:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <MX_USART2_UART_Init+0x58>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dd2:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <MX_USART2_UART_Init+0x58>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <MX_USART2_UART_Init+0x58>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dde:	4805      	ldr	r0, [pc, #20]	; (8000df4 <MX_USART2_UART_Init+0x58>)
 8000de0:	f002 fcbe 	bl	8003760 <HAL_UART_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000dea:	f000 f837 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000290 	.word	0x20000290
 8000df8:	40004400 	.word	0x40004400

08000dfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e02:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <MX_GPIO_Init+0x5c>)
 8000e04:	695b      	ldr	r3, [r3, #20]
 8000e06:	4a14      	ldr	r2, [pc, #80]	; (8000e58 <MX_GPIO_Init+0x5c>)
 8000e08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e0c:	6153      	str	r3, [r2, #20]
 8000e0e:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <MX_GPIO_Init+0x5c>)
 8000e10:	695b      	ldr	r3, [r3, #20]
 8000e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <MX_GPIO_Init+0x5c>)
 8000e1c:	695b      	ldr	r3, [r3, #20]
 8000e1e:	4a0e      	ldr	r2, [pc, #56]	; (8000e58 <MX_GPIO_Init+0x5c>)
 8000e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e24:	6153      	str	r3, [r2, #20]
 8000e26:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <MX_GPIO_Init+0x5c>)
 8000e28:	695b      	ldr	r3, [r3, #20]
 8000e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e32:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <MX_GPIO_Init+0x5c>)
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	4a08      	ldr	r2, [pc, #32]	; (8000e58 <MX_GPIO_Init+0x5c>)
 8000e38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e3c:	6153      	str	r3, [r2, #20]
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <MX_GPIO_Init+0x5c>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]

}
 8000e4a:	bf00      	nop
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	40021000 	.word	0x40021000

08000e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e60:	b672      	cpsid	i
}
 8000e62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <Error_Handler+0x8>
	...

08000e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <HAL_MspInit+0x44>)
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	4a0e      	ldr	r2, [pc, #56]	; (8000eac <HAL_MspInit+0x44>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6193      	str	r3, [r2, #24]
 8000e7a:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <HAL_MspInit+0x44>)
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <HAL_MspInit+0x44>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	4a08      	ldr	r2, [pc, #32]	; (8000eac <HAL_MspInit+0x44>)
 8000e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e90:	61d3      	str	r3, [r2, #28]
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_MspInit+0x44>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	40021000 	.word	0x40021000

08000eb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	; 0x28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a17      	ldr	r2, [pc, #92]	; (8000f2c <HAL_I2C_MspInit+0x7c>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d127      	bne.n	8000f22 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed2:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <HAL_I2C_MspInit+0x80>)
 8000ed4:	695b      	ldr	r3, [r3, #20]
 8000ed6:	4a16      	ldr	r2, [pc, #88]	; (8000f30 <HAL_I2C_MspInit+0x80>)
 8000ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000edc:	6153      	str	r3, [r2, #20]
 8000ede:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <HAL_I2C_MspInit+0x80>)
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000eea:	23c0      	movs	r3, #192	; 0xc0
 8000eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eee:	2312      	movs	r3, #18
 8000ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000efa:	2304      	movs	r3, #4
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	4619      	mov	r1, r3
 8000f04:	480b      	ldr	r0, [pc, #44]	; (8000f34 <HAL_I2C_MspInit+0x84>)
 8000f06:	f000 fad3 	bl	80014b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <HAL_I2C_MspInit+0x80>)
 8000f0c:	69db      	ldr	r3, [r3, #28]
 8000f0e:	4a08      	ldr	r2, [pc, #32]	; (8000f30 <HAL_I2C_MspInit+0x80>)
 8000f10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f14:	61d3      	str	r3, [r2, #28]
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_I2C_MspInit+0x80>)
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f22:	bf00      	nop
 8000f24:	3728      	adds	r7, #40	; 0x28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40005400 	.word	0x40005400
 8000f30:	40021000 	.word	0x40021000
 8000f34:	48000400 	.word	0x48000400

08000f38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	; 0x28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a18      	ldr	r2, [pc, #96]	; (8000fb8 <HAL_UART_MspInit+0x80>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d129      	bne.n	8000fae <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f5a:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <HAL_UART_MspInit+0x84>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	4a17      	ldr	r2, [pc, #92]	; (8000fbc <HAL_UART_MspInit+0x84>)
 8000f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f64:	61d3      	str	r3, [r2, #28]
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <HAL_UART_MspInit+0x84>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f72:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <HAL_UART_MspInit+0x84>)
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	4a11      	ldr	r2, [pc, #68]	; (8000fbc <HAL_UART_MspInit+0x84>)
 8000f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f7c:	6153      	str	r3, [r2, #20]
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <HAL_UART_MspInit+0x84>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000f8a:	f248 0304 	movw	r3, #32772	; 0x8004
 8000f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f9c:	2307      	movs	r3, #7
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000faa:	f000 fa81 	bl	80014b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fae:	bf00      	nop
 8000fb0:	3728      	adds	r7, #40	; 0x28
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40004400 	.word	0x40004400
 8000fbc:	40021000 	.word	0x40021000

08000fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <NMI_Handler+0x4>

08000fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fca:	e7fe      	b.n	8000fca <HardFault_Handler+0x4>

08000fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <MemManage_Handler+0x4>

08000fd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <BusFault_Handler+0x4>

08000fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <UsageFault_Handler+0x4>

08000fde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800100c:	f000 f94a 	bl	80012a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}

08001014 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
	return 1;
 8001018:	2301      	movs	r3, #1
}
 800101a:	4618      	mov	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <_kill>:

int _kill(int pid, int sig)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800102e:	f002 fecb 	bl	8003dc8 <__errno>
 8001032:	4603      	mov	r3, r0
 8001034:	2216      	movs	r2, #22
 8001036:	601a      	str	r2, [r3, #0]
	return -1;
 8001038:	f04f 33ff 	mov.w	r3, #4294967295
}
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <_exit>:

void _exit (int status)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800104c:	f04f 31ff 	mov.w	r1, #4294967295
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff ffe7 	bl	8001024 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001056:	e7fe      	b.n	8001056 <_exit+0x12>

08001058 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	e00a      	b.n	8001080 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800106a:	f3af 8000 	nop.w
 800106e:	4601      	mov	r1, r0
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	1c5a      	adds	r2, r3, #1
 8001074:	60ba      	str	r2, [r7, #8]
 8001076:	b2ca      	uxtb	r2, r1
 8001078:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	3301      	adds	r3, #1
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	697a      	ldr	r2, [r7, #20]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	429a      	cmp	r2, r3
 8001086:	dbf0      	blt.n	800106a <_read+0x12>
	}

return len;
 8001088:	687b      	ldr	r3, [r7, #4]
}
 800108a:	4618      	mov	r0, r3
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b086      	sub	sp, #24
 8001096:	af00      	add	r7, sp, #0
 8001098:	60f8      	str	r0, [r7, #12]
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
 80010a2:	e009      	b.n	80010b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	1c5a      	adds	r2, r3, #1
 80010a8:	60ba      	str	r2, [r7, #8]
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	3301      	adds	r3, #1
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	697a      	ldr	r2, [r7, #20]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	429a      	cmp	r2, r3
 80010be:	dbf1      	blt.n	80010a4 <_write+0x12>
	}
	return len;
 80010c0:	687b      	ldr	r3, [r7, #4]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <_close>:

int _close(int file)
{
 80010ca:	b480      	push	{r7}
 80010cc:	b083      	sub	sp, #12
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
	return -1;
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010f2:	605a      	str	r2, [r3, #4]
	return 0;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <_isatty>:

int _isatty(int file)
{
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
	return 1;
 800110a:	2301      	movs	r3, #1
}
 800110c:	4618      	mov	r0, r3
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
	return 0;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3714      	adds	r7, #20
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
	...

08001134 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800113c:	4a14      	ldr	r2, [pc, #80]	; (8001190 <_sbrk+0x5c>)
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <_sbrk+0x60>)
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001148:	4b13      	ldr	r3, [pc, #76]	; (8001198 <_sbrk+0x64>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d102      	bne.n	8001156 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <_sbrk+0x64>)
 8001152:	4a12      	ldr	r2, [pc, #72]	; (800119c <_sbrk+0x68>)
 8001154:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001156:	4b10      	ldr	r3, [pc, #64]	; (8001198 <_sbrk+0x64>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	429a      	cmp	r2, r3
 8001162:	d207      	bcs.n	8001174 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001164:	f002 fe30 	bl	8003dc8 <__errno>
 8001168:	4603      	mov	r3, r0
 800116a:	220c      	movs	r2, #12
 800116c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800116e:	f04f 33ff 	mov.w	r3, #4294967295
 8001172:	e009      	b.n	8001188 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <_sbrk+0x64>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800117a:	4b07      	ldr	r3, [pc, #28]	; (8001198 <_sbrk+0x64>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4413      	add	r3, r2
 8001182:	4a05      	ldr	r2, [pc, #20]	; (8001198 <_sbrk+0x64>)
 8001184:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001186:	68fb      	ldr	r3, [r7, #12]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20003000 	.word	0x20003000
 8001194:	00000400 	.word	0x00000400
 8001198:	200001fc 	.word	0x200001fc
 800119c:	20000338 	.word	0x20000338

080011a0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <SystemInit+0x20>)
 80011a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011aa:	4a05      	ldr	r2, [pc, #20]	; (80011c0 <SystemInit+0x20>)
 80011ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011fc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011c8:	480d      	ldr	r0, [pc, #52]	; (8001200 <LoopForever+0x6>)
  ldr r1, =_edata
 80011ca:	490e      	ldr	r1, [pc, #56]	; (8001204 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011cc:	4a0e      	ldr	r2, [pc, #56]	; (8001208 <LoopForever+0xe>)
  movs r3, #0
 80011ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d0:	e002      	b.n	80011d8 <LoopCopyDataInit>

080011d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011d6:	3304      	adds	r3, #4

080011d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011dc:	d3f9      	bcc.n	80011d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011de:	4a0b      	ldr	r2, [pc, #44]	; (800120c <LoopForever+0x12>)
  ldr r4, =_ebss
 80011e0:	4c0b      	ldr	r4, [pc, #44]	; (8001210 <LoopForever+0x16>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e4:	e001      	b.n	80011ea <LoopFillZerobss>

080011e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e8:	3204      	adds	r2, #4

080011ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ec:	d3fb      	bcc.n	80011e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011ee:	f7ff ffd7 	bl	80011a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011f2:	f002 fdef 	bl	8003dd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011f6:	f7ff fd2f 	bl	8000c58 <main>

080011fa <LoopForever>:

LoopForever:
    b LoopForever
 80011fa:	e7fe      	b.n	80011fa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011fc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001204:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001208:	08006c0c 	.word	0x08006c0c
  ldr r2, =_sbss
 800120c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001210:	20000334 	.word	0x20000334

08001214 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001214:	e7fe      	b.n	8001214 <ADC1_2_IRQHandler>
	...

08001218 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <HAL_Init+0x28>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a07      	ldr	r2, [pc, #28]	; (8001240 <HAL_Init+0x28>)
 8001222:	f043 0310 	orr.w	r3, r3, #16
 8001226:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001228:	2003      	movs	r0, #3
 800122a:	f000 f90d 	bl	8001448 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800122e:	2000      	movs	r0, #0
 8001230:	f000 f808 	bl	8001244 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001234:	f7ff fe18 	bl	8000e68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40022000 	.word	0x40022000

08001244 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <HAL_InitTick+0x54>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_InitTick+0x58>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	4619      	mov	r1, r3
 8001256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125a:	fbb3 f3f1 	udiv	r3, r3, r1
 800125e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f917 	bl	8001496 <HAL_SYSTICK_Config>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e00e      	b.n	8001290 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b0f      	cmp	r3, #15
 8001276:	d80a      	bhi.n	800128e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001278:	2200      	movs	r2, #0
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	f04f 30ff 	mov.w	r0, #4294967295
 8001280:	f000 f8ed 	bl	800145e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001284:	4a06      	ldr	r2, [pc, #24]	; (80012a0 <HAL_InitTick+0x5c>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	e000      	b.n	8001290 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
}
 8001290:	4618      	mov	r0, r3
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000000 	.word	0x20000000
 800129c:	20000008 	.word	0x20000008
 80012a0:	20000004 	.word	0x20000004

080012a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_IncTick+0x20>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_IncTick+0x24>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4413      	add	r3, r2
 80012b4:	4a04      	ldr	r2, [pc, #16]	; (80012c8 <HAL_IncTick+0x24>)
 80012b6:	6013      	str	r3, [r2, #0]
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	20000008 	.word	0x20000008
 80012c8:	20000320 	.word	0x20000320

080012cc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return uwTick;  
 80012d0:	4b03      	ldr	r3, [pc, #12]	; (80012e0 <HAL_GetTick+0x14>)
 80012d2:	681b      	ldr	r3, [r3, #0]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000320 	.word	0x20000320

080012e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f4:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <__NVIC_SetPriorityGrouping+0x44>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001300:	4013      	ands	r3, r2
 8001302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800130c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001316:	4a04      	ldr	r2, [pc, #16]	; (8001328 <__NVIC_SetPriorityGrouping+0x44>)
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	60d3      	str	r3, [r2, #12]
}
 800131c:	bf00      	nop
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001330:	4b04      	ldr	r3, [pc, #16]	; (8001344 <__NVIC_GetPriorityGrouping+0x18>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	0a1b      	lsrs	r3, r3, #8
 8001336:	f003 0307 	and.w	r3, r3, #7
}
 800133a:	4618      	mov	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	6039      	str	r1, [r7, #0]
 8001352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001358:	2b00      	cmp	r3, #0
 800135a:	db0a      	blt.n	8001372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	b2da      	uxtb	r2, r3
 8001360:	490c      	ldr	r1, [pc, #48]	; (8001394 <__NVIC_SetPriority+0x4c>)
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	0112      	lsls	r2, r2, #4
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	440b      	add	r3, r1
 800136c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001370:	e00a      	b.n	8001388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4908      	ldr	r1, [pc, #32]	; (8001398 <__NVIC_SetPriority+0x50>)
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	f003 030f 	and.w	r3, r3, #15
 800137e:	3b04      	subs	r3, #4
 8001380:	0112      	lsls	r2, r2, #4
 8001382:	b2d2      	uxtb	r2, r2
 8001384:	440b      	add	r3, r1
 8001386:	761a      	strb	r2, [r3, #24]
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	e000e100 	.word	0xe000e100
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800139c:	b480      	push	{r7}
 800139e:	b089      	sub	sp, #36	; 0x24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	f1c3 0307 	rsb	r3, r3, #7
 80013b6:	2b04      	cmp	r3, #4
 80013b8:	bf28      	it	cs
 80013ba:	2304      	movcs	r3, #4
 80013bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3304      	adds	r3, #4
 80013c2:	2b06      	cmp	r3, #6
 80013c4:	d902      	bls.n	80013cc <NVIC_EncodePriority+0x30>
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3b03      	subs	r3, #3
 80013ca:	e000      	b.n	80013ce <NVIC_EncodePriority+0x32>
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d0:	f04f 32ff 	mov.w	r2, #4294967295
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43da      	mvns	r2, r3
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	401a      	ands	r2, r3
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e4:	f04f 31ff 	mov.w	r1, #4294967295
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	fa01 f303 	lsl.w	r3, r1, r3
 80013ee:	43d9      	mvns	r1, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f4:	4313      	orrs	r3, r2
         );
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3724      	adds	r7, #36	; 0x24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3b01      	subs	r3, #1
 8001410:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001414:	d301      	bcc.n	800141a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001416:	2301      	movs	r3, #1
 8001418:	e00f      	b.n	800143a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800141a:	4a0a      	ldr	r2, [pc, #40]	; (8001444 <SysTick_Config+0x40>)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3b01      	subs	r3, #1
 8001420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001422:	210f      	movs	r1, #15
 8001424:	f04f 30ff 	mov.w	r0, #4294967295
 8001428:	f7ff ff8e 	bl	8001348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800142c:	4b05      	ldr	r3, [pc, #20]	; (8001444 <SysTick_Config+0x40>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001432:	4b04      	ldr	r3, [pc, #16]	; (8001444 <SysTick_Config+0x40>)
 8001434:	2207      	movs	r2, #7
 8001436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	e000e010 	.word	0xe000e010

08001448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff ff47 	bl	80012e4 <__NVIC_SetPriorityGrouping>
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b086      	sub	sp, #24
 8001462:	af00      	add	r7, sp, #0
 8001464:	4603      	mov	r3, r0
 8001466:	60b9      	str	r1, [r7, #8]
 8001468:	607a      	str	r2, [r7, #4]
 800146a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001470:	f7ff ff5c 	bl	800132c <__NVIC_GetPriorityGrouping>
 8001474:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	68b9      	ldr	r1, [r7, #8]
 800147a:	6978      	ldr	r0, [r7, #20]
 800147c:	f7ff ff8e 	bl	800139c <NVIC_EncodePriority>
 8001480:	4602      	mov	r2, r0
 8001482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001486:	4611      	mov	r1, r2
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ff5d 	bl	8001348 <__NVIC_SetPriority>
}
 800148e:	bf00      	nop
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff ffb0 	bl	8001404 <SysTick_Config>
 80014a4:	4603      	mov	r3, r0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b087      	sub	sp, #28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014be:	e14e      	b.n	800175e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	2101      	movs	r1, #1
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	fa01 f303 	lsl.w	r3, r1, r3
 80014cc:	4013      	ands	r3, r2
 80014ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f000 8140 	beq.w	8001758 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 0303 	and.w	r3, r3, #3
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d005      	beq.n	80014f0 <HAL_GPIO_Init+0x40>
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d130      	bne.n	8001552 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	2203      	movs	r2, #3
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4013      	ands	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	68da      	ldr	r2, [r3, #12]
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	4313      	orrs	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001526:	2201      	movs	r2, #1
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	4013      	ands	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	091b      	lsrs	r3, r3, #4
 800153c:	f003 0201 	and.w	r2, r3, #1
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f003 0303 	and.w	r3, r3, #3
 800155a:	2b03      	cmp	r3, #3
 800155c:	d017      	beq.n	800158e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	2203      	movs	r2, #3
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43db      	mvns	r3, r3
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	4013      	ands	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f003 0303 	and.w	r3, r3, #3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d123      	bne.n	80015e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	08da      	lsrs	r2, r3, #3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	3208      	adds	r2, #8
 80015a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	220f      	movs	r2, #15
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	4013      	ands	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	691a      	ldr	r2, [r3, #16]
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	08da      	lsrs	r2, r3, #3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3208      	adds	r2, #8
 80015dc:	6939      	ldr	r1, [r7, #16]
 80015de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	2203      	movs	r2, #3
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	4013      	ands	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f003 0203 	and.w	r2, r3, #3
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	4313      	orrs	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 809a 	beq.w	8001758 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001624:	4b55      	ldr	r3, [pc, #340]	; (800177c <HAL_GPIO_Init+0x2cc>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	4a54      	ldr	r2, [pc, #336]	; (800177c <HAL_GPIO_Init+0x2cc>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	6193      	str	r3, [r2, #24]
 8001630:	4b52      	ldr	r3, [pc, #328]	; (800177c <HAL_GPIO_Init+0x2cc>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800163c:	4a50      	ldr	r2, [pc, #320]	; (8001780 <HAL_GPIO_Init+0x2d0>)
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	089b      	lsrs	r3, r3, #2
 8001642:	3302      	adds	r3, #2
 8001644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001648:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	f003 0303 	and.w	r3, r3, #3
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	220f      	movs	r2, #15
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001666:	d013      	beq.n	8001690 <HAL_GPIO_Init+0x1e0>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a46      	ldr	r2, [pc, #280]	; (8001784 <HAL_GPIO_Init+0x2d4>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d00d      	beq.n	800168c <HAL_GPIO_Init+0x1dc>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a45      	ldr	r2, [pc, #276]	; (8001788 <HAL_GPIO_Init+0x2d8>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d007      	beq.n	8001688 <HAL_GPIO_Init+0x1d8>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a44      	ldr	r2, [pc, #272]	; (800178c <HAL_GPIO_Init+0x2dc>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d101      	bne.n	8001684 <HAL_GPIO_Init+0x1d4>
 8001680:	2303      	movs	r3, #3
 8001682:	e006      	b.n	8001692 <HAL_GPIO_Init+0x1e2>
 8001684:	2305      	movs	r3, #5
 8001686:	e004      	b.n	8001692 <HAL_GPIO_Init+0x1e2>
 8001688:	2302      	movs	r3, #2
 800168a:	e002      	b.n	8001692 <HAL_GPIO_Init+0x1e2>
 800168c:	2301      	movs	r3, #1
 800168e:	e000      	b.n	8001692 <HAL_GPIO_Init+0x1e2>
 8001690:	2300      	movs	r3, #0
 8001692:	697a      	ldr	r2, [r7, #20]
 8001694:	f002 0203 	and.w	r2, r2, #3
 8001698:	0092      	lsls	r2, r2, #2
 800169a:	4093      	lsls	r3, r2
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	4313      	orrs	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016a2:	4937      	ldr	r1, [pc, #220]	; (8001780 <HAL_GPIO_Init+0x2d0>)
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	089b      	lsrs	r3, r3, #2
 80016a8:	3302      	adds	r3, #2
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016b0:	4b37      	ldr	r3, [pc, #220]	; (8001790 <HAL_GPIO_Init+0x2e0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	43db      	mvns	r3, r3
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	4013      	ands	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80016d4:	4a2e      	ldr	r2, [pc, #184]	; (8001790 <HAL_GPIO_Init+0x2e0>)
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016da:	4b2d      	ldr	r3, [pc, #180]	; (8001790 <HAL_GPIO_Init+0x2e0>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	43db      	mvns	r3, r3
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	4013      	ands	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d003      	beq.n	80016fe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016fe:	4a24      	ldr	r2, [pc, #144]	; (8001790 <HAL_GPIO_Init+0x2e0>)
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001704:	4b22      	ldr	r3, [pc, #136]	; (8001790 <HAL_GPIO_Init+0x2e0>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	43db      	mvns	r3, r3
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4013      	ands	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	4313      	orrs	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001728:	4a19      	ldr	r2, [pc, #100]	; (8001790 <HAL_GPIO_Init+0x2e0>)
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800172e:	4b18      	ldr	r3, [pc, #96]	; (8001790 <HAL_GPIO_Init+0x2e0>)
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	43db      	mvns	r3, r3
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	4013      	ands	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4313      	orrs	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001752:	4a0f      	ldr	r2, [pc, #60]	; (8001790 <HAL_GPIO_Init+0x2e0>)
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	3301      	adds	r3, #1
 800175c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	fa22 f303 	lsr.w	r3, r2, r3
 8001768:	2b00      	cmp	r3, #0
 800176a:	f47f aea9 	bne.w	80014c0 <HAL_GPIO_Init+0x10>
  }
}
 800176e:	bf00      	nop
 8001770:	bf00      	nop
 8001772:	371c      	adds	r7, #28
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	40021000 	.word	0x40021000
 8001780:	40010000 	.word	0x40010000
 8001784:	48000400 	.word	0x48000400
 8001788:	48000800 	.word	0x48000800
 800178c:	48000c00 	.word	0x48000c00
 8001790:	40010400 	.word	0x40010400

08001794 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e081      	b.n	80018aa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d106      	bne.n	80017c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff fb78 	bl	8000eb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2224      	movs	r2, #36	; 0x24
 80017c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 0201 	bic.w	r2, r2, #1
 80017d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d107      	bne.n	800180e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	e006      	b.n	800181c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800181a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	2b02      	cmp	r3, #2
 8001822:	d104      	bne.n	800182e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800182c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	6812      	ldr	r2, [r2, #0]
 8001838:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800183c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001840:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001850:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	691a      	ldr	r2, [r3, #16]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	430a      	orrs	r2, r1
 800186a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	69d9      	ldr	r1, [r3, #28]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a1a      	ldr	r2, [r3, #32]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	430a      	orrs	r2, r1
 800187a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f042 0201 	orr.w	r2, r2, #1
 800188a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2220      	movs	r2, #32
 8001896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
	...

080018b4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af02      	add	r7, sp, #8
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	4608      	mov	r0, r1
 80018be:	4611      	mov	r1, r2
 80018c0:	461a      	mov	r2, r3
 80018c2:	4603      	mov	r3, r0
 80018c4:	817b      	strh	r3, [r7, #10]
 80018c6:	460b      	mov	r3, r1
 80018c8:	813b      	strh	r3, [r7, #8]
 80018ca:	4613      	mov	r3, r2
 80018cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b20      	cmp	r3, #32
 80018d8:	f040 80f9 	bne.w	8001ace <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80018dc:	6a3b      	ldr	r3, [r7, #32]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d002      	beq.n	80018e8 <HAL_I2C_Mem_Write+0x34>
 80018e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d105      	bne.n	80018f4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e0ed      	b.n	8001ad0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d101      	bne.n	8001902 <HAL_I2C_Mem_Write+0x4e>
 80018fe:	2302      	movs	r3, #2
 8001900:	e0e6      	b.n	8001ad0 <HAL_I2C_Mem_Write+0x21c>
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2201      	movs	r2, #1
 8001906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800190a:	f7ff fcdf 	bl	80012cc <HAL_GetTick>
 800190e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	2319      	movs	r3, #25
 8001916:	2201      	movs	r2, #1
 8001918:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f000 fac3 	bl	8001ea8 <I2C_WaitOnFlagUntilTimeout>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e0d1      	b.n	8001ad0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2221      	movs	r2, #33	; 0x21
 8001930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2240      	movs	r2, #64	; 0x40
 8001938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2200      	movs	r2, #0
 8001940:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6a3a      	ldr	r2, [r7, #32]
 8001946:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800194c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2200      	movs	r2, #0
 8001952:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001954:	88f8      	ldrh	r0, [r7, #6]
 8001956:	893a      	ldrh	r2, [r7, #8]
 8001958:	8979      	ldrh	r1, [r7, #10]
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	9301      	str	r3, [sp, #4]
 800195e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	4603      	mov	r3, r0
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f000 f9d3 	bl	8001d10 <I2C_RequestMemoryWrite>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e0a9      	b.n	8001ad0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001980:	b29b      	uxth	r3, r3
 8001982:	2bff      	cmp	r3, #255	; 0xff
 8001984:	d90e      	bls.n	80019a4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	22ff      	movs	r2, #255	; 0xff
 800198a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001990:	b2da      	uxtb	r2, r3
 8001992:	8979      	ldrh	r1, [r7, #10]
 8001994:	2300      	movs	r3, #0
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f000 fbb5 	bl	800210c <I2C_TransferConfig>
 80019a2:	e00f      	b.n	80019c4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	8979      	ldrh	r1, [r7, #10]
 80019b6:	2300      	movs	r3, #0
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f000 fba4 	bl	800210c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f000 faad 	bl	8001f28 <I2C_WaitOnTXISFlagUntilTimeout>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e07b      	b.n	8001ad0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019dc:	781a      	ldrb	r2, [r3, #0]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e8:	1c5a      	adds	r2, r3, #1
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	3b01      	subs	r3, #1
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a00:	3b01      	subs	r3, #1
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d034      	beq.n	8001a7c <HAL_I2C_Mem_Write+0x1c8>
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d130      	bne.n	8001a7c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a20:	2200      	movs	r2, #0
 8001a22:	2180      	movs	r1, #128	; 0x80
 8001a24:	68f8      	ldr	r0, [r7, #12]
 8001a26:	f000 fa3f 	bl	8001ea8 <I2C_WaitOnFlagUntilTimeout>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e04d      	b.n	8001ad0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	2bff      	cmp	r3, #255	; 0xff
 8001a3c:	d90e      	bls.n	8001a5c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	22ff      	movs	r2, #255	; 0xff
 8001a42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	8979      	ldrh	r1, [r7, #10]
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f000 fb59 	bl	800210c <I2C_TransferConfig>
 8001a5a:	e00f      	b.n	8001a7c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	8979      	ldrh	r1, [r7, #10]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f000 fb48 	bl	800210c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d19e      	bne.n	80019c4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	f000 fa8c 	bl	8001fa8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e01a      	b.n	8001ad0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6859      	ldr	r1, [r3, #4]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <HAL_I2C_Mem_Write+0x224>)
 8001aae:	400b      	ands	r3, r1
 8001ab0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2220      	movs	r2, #32
 8001ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001aca:	2300      	movs	r3, #0
 8001acc:	e000      	b.n	8001ad0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001ace:	2302      	movs	r3, #2
  }
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	fe00e800 	.word	0xfe00e800

08001adc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b088      	sub	sp, #32
 8001ae0:	af02      	add	r7, sp, #8
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	4608      	mov	r0, r1
 8001ae6:	4611      	mov	r1, r2
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4603      	mov	r3, r0
 8001aec:	817b      	strh	r3, [r7, #10]
 8001aee:	460b      	mov	r3, r1
 8001af0:	813b      	strh	r3, [r7, #8]
 8001af2:	4613      	mov	r3, r2
 8001af4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b20      	cmp	r3, #32
 8001b00:	f040 80fd 	bne.w	8001cfe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b04:	6a3b      	ldr	r3, [r7, #32]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d002      	beq.n	8001b10 <HAL_I2C_Mem_Read+0x34>
 8001b0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d105      	bne.n	8001b1c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b16:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e0f1      	b.n	8001d00 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d101      	bne.n	8001b2a <HAL_I2C_Mem_Read+0x4e>
 8001b26:	2302      	movs	r3, #2
 8001b28:	e0ea      	b.n	8001d00 <HAL_I2C_Mem_Read+0x224>
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b32:	f7ff fbcb 	bl	80012cc <HAL_GetTick>
 8001b36:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	2319      	movs	r3, #25
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b44:	68f8      	ldr	r0, [r7, #12]
 8001b46:	f000 f9af 	bl	8001ea8 <I2C_WaitOnFlagUntilTimeout>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e0d5      	b.n	8001d00 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2222      	movs	r2, #34	; 0x22
 8001b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2240      	movs	r2, #64	; 0x40
 8001b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2200      	movs	r2, #0
 8001b68:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6a3a      	ldr	r2, [r7, #32]
 8001b6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b7c:	88f8      	ldrh	r0, [r7, #6]
 8001b7e:	893a      	ldrh	r2, [r7, #8]
 8001b80:	8979      	ldrh	r1, [r7, #10]
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	9301      	str	r3, [sp, #4]
 8001b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f000 f913 	bl	8001db8 <I2C_RequestMemoryRead>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d005      	beq.n	8001ba4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e0ad      	b.n	8001d00 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	2bff      	cmp	r3, #255	; 0xff
 8001bac:	d90e      	bls.n	8001bcc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	22ff      	movs	r2, #255	; 0xff
 8001bb2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	8979      	ldrh	r1, [r7, #10]
 8001bbc:	4b52      	ldr	r3, [pc, #328]	; (8001d08 <HAL_I2C_Mem_Read+0x22c>)
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	f000 faa1 	bl	800210c <I2C_TransferConfig>
 8001bca:	e00f      	b.n	8001bec <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	8979      	ldrh	r1, [r7, #10]
 8001bde:	4b4a      	ldr	r3, [pc, #296]	; (8001d08 <HAL_I2C_Mem_Read+0x22c>)
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f000 fa90 	bl	800210c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2104      	movs	r1, #4
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f000 f956 	bl	8001ea8 <I2C_WaitOnFlagUntilTimeout>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e07c      	b.n	8001d00 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	1c5a      	adds	r2, r3, #1
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c22:	3b01      	subs	r3, #1
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	3b01      	subs	r3, #1
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d034      	beq.n	8001cac <HAL_I2C_Mem_Read+0x1d0>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d130      	bne.n	8001cac <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c50:	2200      	movs	r2, #0
 8001c52:	2180      	movs	r1, #128	; 0x80
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f000 f927 	bl	8001ea8 <I2C_WaitOnFlagUntilTimeout>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e04d      	b.n	8001d00 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	2bff      	cmp	r3, #255	; 0xff
 8001c6c:	d90e      	bls.n	8001c8c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	22ff      	movs	r2, #255	; 0xff
 8001c72:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	8979      	ldrh	r1, [r7, #10]
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f000 fa41 	bl	800210c <I2C_TransferConfig>
 8001c8a:	e00f      	b.n	8001cac <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	8979      	ldrh	r1, [r7, #10]
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f000 fa30 	bl	800210c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d19a      	bne.n	8001bec <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	f000 f974 	bl	8001fa8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e01a      	b.n	8001d00 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2220      	movs	r2, #32
 8001cd0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6859      	ldr	r1, [r3, #4]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <HAL_I2C_Mem_Read+0x230>)
 8001cde:	400b      	ands	r3, r1
 8001ce0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2220      	movs	r2, #32
 8001ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	e000      	b.n	8001d00 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001cfe:	2302      	movs	r3, #2
  }
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	80002400 	.word	0x80002400
 8001d0c:	fe00e800 	.word	0xfe00e800

08001d10 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af02      	add	r7, sp, #8
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	4608      	mov	r0, r1
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4603      	mov	r3, r0
 8001d20:	817b      	strh	r3, [r7, #10]
 8001d22:	460b      	mov	r3, r1
 8001d24:	813b      	strh	r3, [r7, #8]
 8001d26:	4613      	mov	r3, r2
 8001d28:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001d2a:	88fb      	ldrh	r3, [r7, #6]
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	8979      	ldrh	r1, [r7, #10]
 8001d30:	4b20      	ldr	r3, [pc, #128]	; (8001db4 <I2C_RequestMemoryWrite+0xa4>)
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	f000 f9e7 	bl	800210c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d3e:	69fa      	ldr	r2, [r7, #28]
 8001d40:	69b9      	ldr	r1, [r7, #24]
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f000 f8f0 	bl	8001f28 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e02c      	b.n	8001dac <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d52:	88fb      	ldrh	r3, [r7, #6]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d105      	bne.n	8001d64 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d58:	893b      	ldrh	r3, [r7, #8]
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	629a      	str	r2, [r3, #40]	; 0x28
 8001d62:	e015      	b.n	8001d90 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001d64:	893b      	ldrh	r3, [r7, #8]
 8001d66:	0a1b      	lsrs	r3, r3, #8
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d72:	69fa      	ldr	r2, [r7, #28]
 8001d74:	69b9      	ldr	r1, [r7, #24]
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f000 f8d6 	bl	8001f28 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e012      	b.n	8001dac <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d86:	893b      	ldrh	r3, [r7, #8]
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	2200      	movs	r2, #0
 8001d98:	2180      	movs	r1, #128	; 0x80
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f000 f884 	bl	8001ea8 <I2C_WaitOnFlagUntilTimeout>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	80002000 	.word	0x80002000

08001db8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af02      	add	r7, sp, #8
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	4608      	mov	r0, r1
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	817b      	strh	r3, [r7, #10]
 8001dca:	460b      	mov	r3, r1
 8001dcc:	813b      	strh	r3, [r7, #8]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	8979      	ldrh	r1, [r7, #10]
 8001dd8:	4b20      	ldr	r3, [pc, #128]	; (8001e5c <I2C_RequestMemoryRead+0xa4>)
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	2300      	movs	r3, #0
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f000 f994 	bl	800210c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001de4:	69fa      	ldr	r2, [r7, #28]
 8001de6:	69b9      	ldr	r1, [r7, #24]
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f000 f89d 	bl	8001f28 <I2C_WaitOnTXISFlagUntilTimeout>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e02c      	b.n	8001e52 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001df8:	88fb      	ldrh	r3, [r7, #6]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d105      	bne.n	8001e0a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001dfe:	893b      	ldrh	r3, [r7, #8]
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	629a      	str	r2, [r3, #40]	; 0x28
 8001e08:	e015      	b.n	8001e36 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001e0a:	893b      	ldrh	r3, [r7, #8]
 8001e0c:	0a1b      	lsrs	r3, r3, #8
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e18:	69fa      	ldr	r2, [r7, #28]
 8001e1a:	69b9      	ldr	r1, [r7, #24]
 8001e1c:	68f8      	ldr	r0, [r7, #12]
 8001e1e:	f000 f883 	bl	8001f28 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e012      	b.n	8001e52 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e2c:	893b      	ldrh	r3, [r7, #8]
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	2140      	movs	r1, #64	; 0x40
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f000 f831 	bl	8001ea8 <I2C_WaitOnFlagUntilTimeout>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e000      	b.n	8001e52 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	80002000 	.word	0x80002000

08001e60 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d103      	bne.n	8001e7e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d007      	beq.n	8001e9c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	699a      	ldr	r2, [r3, #24]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0201 	orr.w	r2, r2, #1
 8001e9a:	619a      	str	r2, [r3, #24]
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	603b      	str	r3, [r7, #0]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001eb8:	e022      	b.n	8001f00 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec0:	d01e      	beq.n	8001f00 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ec2:	f7ff fa03 	bl	80012cc <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d302      	bcc.n	8001ed8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d113      	bne.n	8001f00 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001edc:	f043 0220 	orr.w	r2, r3, #32
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e00f      	b.n	8001f20 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	699a      	ldr	r2, [r3, #24]
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	bf0c      	ite	eq
 8001f10:	2301      	moveq	r3, #1
 8001f12:	2300      	movne	r3, #0
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	461a      	mov	r2, r3
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d0cd      	beq.n	8001eba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f34:	e02c      	b.n	8001f90 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	68b9      	ldr	r1, [r7, #8]
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f000 f870 	bl	8002020 <I2C_IsAcknowledgeFailed>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e02a      	b.n	8001fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f50:	d01e      	beq.n	8001f90 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f52:	f7ff f9bb 	bl	80012cc <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d302      	bcc.n	8001f68 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d113      	bne.n	8001f90 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6c:	f043 0220 	orr.w	r2, r3, #32
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2220      	movs	r2, #32
 8001f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e007      	b.n	8001fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d1cb      	bne.n	8001f36 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fb4:	e028      	b.n	8002008 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	68b9      	ldr	r1, [r7, #8]
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f000 f830 	bl	8002020 <I2C_IsAcknowledgeFailed>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e026      	b.n	8002018 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fca:	f7ff f97f 	bl	80012cc <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	68ba      	ldr	r2, [r7, #8]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d302      	bcc.n	8001fe0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d113      	bne.n	8002008 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe4:	f043 0220 	orr.w	r2, r3, #32
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2220      	movs	r2, #32
 8001ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e007      	b.n	8002018 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	f003 0320 	and.w	r3, r3, #32
 8002012:	2b20      	cmp	r3, #32
 8002014:	d1cf      	bne.n	8001fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	f003 0310 	and.w	r3, r3, #16
 8002036:	2b10      	cmp	r3, #16
 8002038:	d161      	bne.n	80020fe <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002044:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002048:	d02b      	beq.n	80020a2 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002058:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800205a:	e022      	b.n	80020a2 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002062:	d01e      	beq.n	80020a2 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002064:	f7ff f932 	bl	80012cc <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	429a      	cmp	r2, r3
 8002072:	d302      	bcc.n	800207a <I2C_IsAcknowledgeFailed+0x5a>
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d113      	bne.n	80020a2 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207e:	f043 0220 	orr.w	r2, r3, #32
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2220      	movs	r2, #32
 800208a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e02e      	b.n	8002100 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	f003 0320 	and.w	r3, r3, #32
 80020ac:	2b20      	cmp	r3, #32
 80020ae:	d1d5      	bne.n	800205c <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2210      	movs	r2, #16
 80020b6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2220      	movs	r2, #32
 80020be:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f7ff fecd 	bl	8001e60 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6859      	ldr	r1, [r3, #4]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4b0d      	ldr	r3, [pc, #52]	; (8002108 <I2C_IsAcknowledgeFailed+0xe8>)
 80020d2:	400b      	ands	r3, r1
 80020d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020da:	f043 0204 	orr.w	r2, r3, #4
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2220      	movs	r2, #32
 80020e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	fe00e800 	.word	0xfe00e800

0800210c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	607b      	str	r3, [r7, #4]
 8002116:	460b      	mov	r3, r1
 8002118:	817b      	strh	r3, [r7, #10]
 800211a:	4613      	mov	r3, r2
 800211c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	0d5b      	lsrs	r3, r3, #21
 8002128:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800212c:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <I2C_TransferConfig+0x58>)
 800212e:	430b      	orrs	r3, r1
 8002130:	43db      	mvns	r3, r3
 8002132:	ea02 0103 	and.w	r1, r2, r3
 8002136:	897b      	ldrh	r3, [r7, #10]
 8002138:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800213c:	7a7b      	ldrb	r3, [r7, #9]
 800213e:	041b      	lsls	r3, r3, #16
 8002140:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002144:	431a      	orrs	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	431a      	orrs	r2, r3
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	431a      	orrs	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002156:	bf00      	nop
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	03ff63ff 	.word	0x03ff63ff

08002168 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b20      	cmp	r3, #32
 800217c:	d138      	bne.n	80021f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002188:	2302      	movs	r3, #2
 800218a:	e032      	b.n	80021f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2224      	movs	r2, #36	; 0x24
 8002198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 0201 	bic.w	r2, r2, #1
 80021aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6819      	ldr	r1, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0201 	orr.w	r2, r2, #1
 80021da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2220      	movs	r2, #32
 80021e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021ec:	2300      	movs	r3, #0
 80021ee:	e000      	b.n	80021f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021f0:	2302      	movs	r3, #2
  }
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021fe:	b480      	push	{r7}
 8002200:	b085      	sub	sp, #20
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
 8002206:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b20      	cmp	r3, #32
 8002212:	d139      	bne.n	8002288 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800221a:	2b01      	cmp	r3, #1
 800221c:	d101      	bne.n	8002222 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800221e:	2302      	movs	r3, #2
 8002220:	e033      	b.n	800228a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2224      	movs	r2, #36	; 0x24
 800222e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 0201 	bic.w	r2, r2, #1
 8002240:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002250:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	021b      	lsls	r3, r3, #8
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	4313      	orrs	r3, r2
 800225a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0201 	orr.w	r2, r2, #1
 8002272:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2220      	movs	r2, #32
 8002278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002284:	2300      	movs	r3, #0
 8002286:	e000      	b.n	800228a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002288:	2302      	movs	r3, #2
  }
}
 800228a:	4618      	mov	r0, r3
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
	...

08002298 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800229e:	af00      	add	r7, sp, #0
 80022a0:	1d3b      	adds	r3, r7, #4
 80022a2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022a4:	1d3b      	adds	r3, r7, #4
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d102      	bne.n	80022b2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	f000 bef4 	b.w	800309a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022b2:	1d3b      	adds	r3, r7, #4
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 816a 	beq.w	8002596 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80022c2:	4bb3      	ldr	r3, [pc, #716]	; (8002590 <HAL_RCC_OscConfig+0x2f8>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f003 030c 	and.w	r3, r3, #12
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d00c      	beq.n	80022e8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022ce:	4bb0      	ldr	r3, [pc, #704]	; (8002590 <HAL_RCC_OscConfig+0x2f8>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f003 030c 	and.w	r3, r3, #12
 80022d6:	2b08      	cmp	r3, #8
 80022d8:	d159      	bne.n	800238e <HAL_RCC_OscConfig+0xf6>
 80022da:	4bad      	ldr	r3, [pc, #692]	; (8002590 <HAL_RCC_OscConfig+0x2f8>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022e6:	d152      	bne.n	800238e <HAL_RCC_OscConfig+0xf6>
 80022e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022ec:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80022f4:	fa93 f3a3 	rbit	r3, r3
 80022f8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022fc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002300:	fab3 f383 	clz	r3, r3
 8002304:	b2db      	uxtb	r3, r3
 8002306:	095b      	lsrs	r3, r3, #5
 8002308:	b2db      	uxtb	r3, r3
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b01      	cmp	r3, #1
 8002312:	d102      	bne.n	800231a <HAL_RCC_OscConfig+0x82>
 8002314:	4b9e      	ldr	r3, [pc, #632]	; (8002590 <HAL_RCC_OscConfig+0x2f8>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	e015      	b.n	8002346 <HAL_RCC_OscConfig+0xae>
 800231a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800231e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002322:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002326:	fa93 f3a3 	rbit	r3, r3
 800232a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800232e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002332:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002336:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800233a:	fa93 f3a3 	rbit	r3, r3
 800233e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002342:	4b93      	ldr	r3, [pc, #588]	; (8002590 <HAL_RCC_OscConfig+0x2f8>)
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002346:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800234a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800234e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002352:	fa92 f2a2 	rbit	r2, r2
 8002356:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800235a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800235e:	fab2 f282 	clz	r2, r2
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	f042 0220 	orr.w	r2, r2, #32
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	f002 021f 	and.w	r2, r2, #31
 800236e:	2101      	movs	r1, #1
 8002370:	fa01 f202 	lsl.w	r2, r1, r2
 8002374:	4013      	ands	r3, r2
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 810c 	beq.w	8002594 <HAL_RCC_OscConfig+0x2fc>
 800237c:	1d3b      	adds	r3, r7, #4
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	f040 8106 	bne.w	8002594 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	f000 be86 	b.w	800309a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800238e:	1d3b      	adds	r3, r7, #4
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002398:	d106      	bne.n	80023a8 <HAL_RCC_OscConfig+0x110>
 800239a:	4b7d      	ldr	r3, [pc, #500]	; (8002590 <HAL_RCC_OscConfig+0x2f8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a7c      	ldr	r2, [pc, #496]	; (8002590 <HAL_RCC_OscConfig+0x2f8>)
 80023a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	e030      	b.n	800240a <HAL_RCC_OscConfig+0x172>
 80023a8:	1d3b      	adds	r3, r7, #4
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10c      	bne.n	80023cc <HAL_RCC_OscConfig+0x134>
 80023b2:	4b77      	ldr	r3, [pc, #476]	; (8002590 <HAL_RCC_OscConfig+0x2f8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a76      	ldr	r2, [pc, #472]	; (8002590 <HAL_RCC_OscConfig+0x2f8>)
 80023b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	4b74      	ldr	r3, [pc, #464]	; (8002590 <HAL_RCC_OscConfig+0x2f8>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a73      	ldr	r2, [pc, #460]	; (8002590 <HAL_RCC_OscConfig+0x2f8>)
 80023c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	e01e      	b.n	800240a <HAL_RCC_OscConfig+0x172>
 80023cc:	1d3b      	adds	r3, r7, #4
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023d6:	d10c      	bne.n	80023f2 <HAL_RCC_OscConfig+0x15a>
 80023d8:	4b6d      	ldr	r3, [pc, #436]	; (8002590 <HAL_RCC_OscConfig+0x2f8>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a6c      	ldr	r2, [pc, #432]	; (8002590 <HAL_RCC_OscConfig+0x2f8>)
 80023de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023e2:	6013      	str	r3, [r2, #0]
 80023e4:	4b6a      	ldr	r3, [pc, #424]	; (8002590 <HAL_RCC_OscConfig+0x2f8>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a69      	ldr	r2, [pc, #420]	; (8002590 <HAL_RCC_OscConfig+0x2f8>)
 80023ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ee:	6013      	str	r3, [r2, #0]
 80023f0:	e00b      	b.n	800240a <HAL_RCC_OscConfig+0x172>
 80023f2:	4b67      	ldr	r3, [pc, #412]	; (8002590 <HAL_RCC_OscConfig+0x2f8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a66      	ldr	r2, [pc, #408]	; (8002590 <HAL_RCC_OscConfig+0x2f8>)
 80023f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	4b64      	ldr	r3, [pc, #400]	; (8002590 <HAL_RCC_OscConfig+0x2f8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a63      	ldr	r2, [pc, #396]	; (8002590 <HAL_RCC_OscConfig+0x2f8>)
 8002404:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002408:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800240a:	4b61      	ldr	r3, [pc, #388]	; (8002590 <HAL_RCC_OscConfig+0x2f8>)
 800240c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240e:	f023 020f 	bic.w	r2, r3, #15
 8002412:	1d3b      	adds	r3, r7, #4
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	495d      	ldr	r1, [pc, #372]	; (8002590 <HAL_RCC_OscConfig+0x2f8>)
 800241a:	4313      	orrs	r3, r2
 800241c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800241e:	1d3b      	adds	r3, r7, #4
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d059      	beq.n	80024dc <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002428:	f7fe ff50 	bl	80012cc <HAL_GetTick>
 800242c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002430:	e00a      	b.n	8002448 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002432:	f7fe ff4b 	bl	80012cc <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b64      	cmp	r3, #100	; 0x64
 8002440:	d902      	bls.n	8002448 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	f000 be29 	b.w	800309a <HAL_RCC_OscConfig+0xe02>
 8002448:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800244c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002450:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002454:	fa93 f3a3 	rbit	r3, r3
 8002458:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800245c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002460:	fab3 f383 	clz	r3, r3
 8002464:	b2db      	uxtb	r3, r3
 8002466:	095b      	lsrs	r3, r3, #5
 8002468:	b2db      	uxtb	r3, r3
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b01      	cmp	r3, #1
 8002472:	d102      	bne.n	800247a <HAL_RCC_OscConfig+0x1e2>
 8002474:	4b46      	ldr	r3, [pc, #280]	; (8002590 <HAL_RCC_OscConfig+0x2f8>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	e015      	b.n	80024a6 <HAL_RCC_OscConfig+0x20e>
 800247a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800247e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002482:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002486:	fa93 f3a3 	rbit	r3, r3
 800248a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800248e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002492:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002496:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800249a:	fa93 f3a3 	rbit	r3, r3
 800249e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80024a2:	4b3b      	ldr	r3, [pc, #236]	; (8002590 <HAL_RCC_OscConfig+0x2f8>)
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024aa:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80024ae:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80024b2:	fa92 f2a2 	rbit	r2, r2
 80024b6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80024ba:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80024be:	fab2 f282 	clz	r2, r2
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	f042 0220 	orr.w	r2, r2, #32
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	f002 021f 	and.w	r2, r2, #31
 80024ce:	2101      	movs	r1, #1
 80024d0:	fa01 f202 	lsl.w	r2, r1, r2
 80024d4:	4013      	ands	r3, r2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0ab      	beq.n	8002432 <HAL_RCC_OscConfig+0x19a>
 80024da:	e05c      	b.n	8002596 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024dc:	f7fe fef6 	bl	80012cc <HAL_GetTick>
 80024e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e4:	e00a      	b.n	80024fc <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024e6:	f7fe fef1 	bl	80012cc <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b64      	cmp	r3, #100	; 0x64
 80024f4:	d902      	bls.n	80024fc <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	f000 bdcf 	b.w	800309a <HAL_RCC_OscConfig+0xe02>
 80024fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002500:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002504:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002508:	fa93 f3a3 	rbit	r3, r3
 800250c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002510:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002514:	fab3 f383 	clz	r3, r3
 8002518:	b2db      	uxtb	r3, r3
 800251a:	095b      	lsrs	r3, r3, #5
 800251c:	b2db      	uxtb	r3, r3
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b01      	cmp	r3, #1
 8002526:	d102      	bne.n	800252e <HAL_RCC_OscConfig+0x296>
 8002528:	4b19      	ldr	r3, [pc, #100]	; (8002590 <HAL_RCC_OscConfig+0x2f8>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	e015      	b.n	800255a <HAL_RCC_OscConfig+0x2c2>
 800252e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002532:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002536:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800253a:	fa93 f3a3 	rbit	r3, r3
 800253e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002542:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002546:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800254a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800254e:	fa93 f3a3 	rbit	r3, r3
 8002552:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002556:	4b0e      	ldr	r3, [pc, #56]	; (8002590 <HAL_RCC_OscConfig+0x2f8>)
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800255e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002562:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002566:	fa92 f2a2 	rbit	r2, r2
 800256a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800256e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002572:	fab2 f282 	clz	r2, r2
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	f042 0220 	orr.w	r2, r2, #32
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	f002 021f 	and.w	r2, r2, #31
 8002582:	2101      	movs	r1, #1
 8002584:	fa01 f202 	lsl.w	r2, r1, r2
 8002588:	4013      	ands	r3, r2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1ab      	bne.n	80024e6 <HAL_RCC_OscConfig+0x24e>
 800258e:	e002      	b.n	8002596 <HAL_RCC_OscConfig+0x2fe>
 8002590:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002596:	1d3b      	adds	r3, r7, #4
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 816f 	beq.w	8002884 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80025a6:	4bd0      	ldr	r3, [pc, #832]	; (80028e8 <HAL_RCC_OscConfig+0x650>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00b      	beq.n	80025ca <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80025b2:	4bcd      	ldr	r3, [pc, #820]	; (80028e8 <HAL_RCC_OscConfig+0x650>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f003 030c 	and.w	r3, r3, #12
 80025ba:	2b08      	cmp	r3, #8
 80025bc:	d16c      	bne.n	8002698 <HAL_RCC_OscConfig+0x400>
 80025be:	4bca      	ldr	r3, [pc, #808]	; (80028e8 <HAL_RCC_OscConfig+0x650>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d166      	bne.n	8002698 <HAL_RCC_OscConfig+0x400>
 80025ca:	2302      	movs	r3, #2
 80025cc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80025d4:	fa93 f3a3 	rbit	r3, r3
 80025d8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80025dc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e0:	fab3 f383 	clz	r3, r3
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	095b      	lsrs	r3, r3, #5
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	f043 0301 	orr.w	r3, r3, #1
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d102      	bne.n	80025fa <HAL_RCC_OscConfig+0x362>
 80025f4:	4bbc      	ldr	r3, [pc, #752]	; (80028e8 <HAL_RCC_OscConfig+0x650>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	e013      	b.n	8002622 <HAL_RCC_OscConfig+0x38a>
 80025fa:	2302      	movs	r3, #2
 80025fc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002600:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002604:	fa93 f3a3 	rbit	r3, r3
 8002608:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800260c:	2302      	movs	r3, #2
 800260e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002612:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002616:	fa93 f3a3 	rbit	r3, r3
 800261a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800261e:	4bb2      	ldr	r3, [pc, #712]	; (80028e8 <HAL_RCC_OscConfig+0x650>)
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	2202      	movs	r2, #2
 8002624:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002628:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800262c:	fa92 f2a2 	rbit	r2, r2
 8002630:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002634:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002638:	fab2 f282 	clz	r2, r2
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	f042 0220 	orr.w	r2, r2, #32
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	f002 021f 	and.w	r2, r2, #31
 8002648:	2101      	movs	r1, #1
 800264a:	fa01 f202 	lsl.w	r2, r1, r2
 800264e:	4013      	ands	r3, r2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d007      	beq.n	8002664 <HAL_RCC_OscConfig+0x3cc>
 8002654:	1d3b      	adds	r3, r7, #4
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d002      	beq.n	8002664 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	f000 bd1b 	b.w	800309a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002664:	4ba0      	ldr	r3, [pc, #640]	; (80028e8 <HAL_RCC_OscConfig+0x650>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800266c:	1d3b      	adds	r3, r7, #4
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	21f8      	movs	r1, #248	; 0xf8
 8002674:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002678:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800267c:	fa91 f1a1 	rbit	r1, r1
 8002680:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002684:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002688:	fab1 f181 	clz	r1, r1
 800268c:	b2c9      	uxtb	r1, r1
 800268e:	408b      	lsls	r3, r1
 8002690:	4995      	ldr	r1, [pc, #596]	; (80028e8 <HAL_RCC_OscConfig+0x650>)
 8002692:	4313      	orrs	r3, r2
 8002694:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002696:	e0f5      	b.n	8002884 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002698:	1d3b      	adds	r3, r7, #4
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 8085 	beq.w	80027ae <HAL_RCC_OscConfig+0x516>
 80026a4:	2301      	movs	r3, #1
 80026a6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026aa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80026ae:	fa93 f3a3 	rbit	r3, r3
 80026b2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80026b6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ba:	fab3 f383 	clz	r3, r3
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	461a      	mov	r2, r3
 80026cc:	2301      	movs	r3, #1
 80026ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d0:	f7fe fdfc 	bl	80012cc <HAL_GetTick>
 80026d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d8:	e00a      	b.n	80026f0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026da:	f7fe fdf7 	bl	80012cc <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d902      	bls.n	80026f0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	f000 bcd5 	b.w	800309a <HAL_RCC_OscConfig+0xe02>
 80026f0:	2302      	movs	r3, #2
 80026f2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80026fa:	fa93 f3a3 	rbit	r3, r3
 80026fe:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002702:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002706:	fab3 f383 	clz	r3, r3
 800270a:	b2db      	uxtb	r3, r3
 800270c:	095b      	lsrs	r3, r3, #5
 800270e:	b2db      	uxtb	r3, r3
 8002710:	f043 0301 	orr.w	r3, r3, #1
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b01      	cmp	r3, #1
 8002718:	d102      	bne.n	8002720 <HAL_RCC_OscConfig+0x488>
 800271a:	4b73      	ldr	r3, [pc, #460]	; (80028e8 <HAL_RCC_OscConfig+0x650>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	e013      	b.n	8002748 <HAL_RCC_OscConfig+0x4b0>
 8002720:	2302      	movs	r3, #2
 8002722:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002726:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800272a:	fa93 f3a3 	rbit	r3, r3
 800272e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002732:	2302      	movs	r3, #2
 8002734:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002738:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800273c:	fa93 f3a3 	rbit	r3, r3
 8002740:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002744:	4b68      	ldr	r3, [pc, #416]	; (80028e8 <HAL_RCC_OscConfig+0x650>)
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	2202      	movs	r2, #2
 800274a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800274e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002752:	fa92 f2a2 	rbit	r2, r2
 8002756:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800275a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800275e:	fab2 f282 	clz	r2, r2
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	f042 0220 	orr.w	r2, r2, #32
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	f002 021f 	and.w	r2, r2, #31
 800276e:	2101      	movs	r1, #1
 8002770:	fa01 f202 	lsl.w	r2, r1, r2
 8002774:	4013      	ands	r3, r2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0af      	beq.n	80026da <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277a:	4b5b      	ldr	r3, [pc, #364]	; (80028e8 <HAL_RCC_OscConfig+0x650>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002782:	1d3b      	adds	r3, r7, #4
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	21f8      	movs	r1, #248	; 0xf8
 800278a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002792:	fa91 f1a1 	rbit	r1, r1
 8002796:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800279a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800279e:	fab1 f181 	clz	r1, r1
 80027a2:	b2c9      	uxtb	r1, r1
 80027a4:	408b      	lsls	r3, r1
 80027a6:	4950      	ldr	r1, [pc, #320]	; (80028e8 <HAL_RCC_OscConfig+0x650>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	600b      	str	r3, [r1, #0]
 80027ac:	e06a      	b.n	8002884 <HAL_RCC_OscConfig+0x5ec>
 80027ae:	2301      	movs	r3, #1
 80027b0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80027b8:	fa93 f3a3 	rbit	r3, r3
 80027bc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80027c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027c4:	fab3 f383 	clz	r3, r3
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027ce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	461a      	mov	r2, r3
 80027d6:	2300      	movs	r3, #0
 80027d8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027da:	f7fe fd77 	bl	80012cc <HAL_GetTick>
 80027de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027e2:	e00a      	b.n	80027fa <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027e4:	f7fe fd72 	bl	80012cc <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d902      	bls.n	80027fa <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	f000 bc50 	b.w	800309a <HAL_RCC_OscConfig+0xe02>
 80027fa:	2302      	movs	r3, #2
 80027fc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002804:	fa93 f3a3 	rbit	r3, r3
 8002808:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800280c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002810:	fab3 f383 	clz	r3, r3
 8002814:	b2db      	uxtb	r3, r3
 8002816:	095b      	lsrs	r3, r3, #5
 8002818:	b2db      	uxtb	r3, r3
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b01      	cmp	r3, #1
 8002822:	d102      	bne.n	800282a <HAL_RCC_OscConfig+0x592>
 8002824:	4b30      	ldr	r3, [pc, #192]	; (80028e8 <HAL_RCC_OscConfig+0x650>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	e013      	b.n	8002852 <HAL_RCC_OscConfig+0x5ba>
 800282a:	2302      	movs	r3, #2
 800282c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002830:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002834:	fa93 f3a3 	rbit	r3, r3
 8002838:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800283c:	2302      	movs	r3, #2
 800283e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002842:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002846:	fa93 f3a3 	rbit	r3, r3
 800284a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800284e:	4b26      	ldr	r3, [pc, #152]	; (80028e8 <HAL_RCC_OscConfig+0x650>)
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	2202      	movs	r2, #2
 8002854:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002858:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800285c:	fa92 f2a2 	rbit	r2, r2
 8002860:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002864:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002868:	fab2 f282 	clz	r2, r2
 800286c:	b2d2      	uxtb	r2, r2
 800286e:	f042 0220 	orr.w	r2, r2, #32
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	f002 021f 	and.w	r2, r2, #31
 8002878:	2101      	movs	r1, #1
 800287a:	fa01 f202 	lsl.w	r2, r1, r2
 800287e:	4013      	ands	r3, r2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1af      	bne.n	80027e4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002884:	1d3b      	adds	r3, r7, #4
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 80da 	beq.w	8002a48 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002894:	1d3b      	adds	r3, r7, #4
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d069      	beq.n	8002972 <HAL_RCC_OscConfig+0x6da>
 800289e:	2301      	movs	r3, #1
 80028a0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80028a8:	fa93 f3a3 	rbit	r3, r3
 80028ac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80028b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028b4:	fab3 f383 	clz	r3, r3
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	461a      	mov	r2, r3
 80028bc:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <HAL_RCC_OscConfig+0x654>)
 80028be:	4413      	add	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	461a      	mov	r2, r3
 80028c4:	2301      	movs	r3, #1
 80028c6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c8:	f7fe fd00 	bl	80012cc <HAL_GetTick>
 80028cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028d0:	e00e      	b.n	80028f0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028d2:	f7fe fcfb 	bl	80012cc <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d906      	bls.n	80028f0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e3d9      	b.n	800309a <HAL_RCC_OscConfig+0xe02>
 80028e6:	bf00      	nop
 80028e8:	40021000 	.word	0x40021000
 80028ec:	10908120 	.word	0x10908120
 80028f0:	2302      	movs	r3, #2
 80028f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80028fa:	fa93 f3a3 	rbit	r3, r3
 80028fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002902:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002906:	2202      	movs	r2, #2
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	fa93 f2a3 	rbit	r2, r3
 8002914:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800291e:	2202      	movs	r2, #2
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	fa93 f2a3 	rbit	r2, r3
 800292c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002930:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002932:	4ba5      	ldr	r3, [pc, #660]	; (8002bc8 <HAL_RCC_OscConfig+0x930>)
 8002934:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002936:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800293a:	2102      	movs	r1, #2
 800293c:	6019      	str	r1, [r3, #0]
 800293e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	fa93 f1a3 	rbit	r1, r3
 8002948:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800294c:	6019      	str	r1, [r3, #0]
  return result;
 800294e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	fab3 f383 	clz	r3, r3
 8002958:	b2db      	uxtb	r3, r3
 800295a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800295e:	b2db      	uxtb	r3, r3
 8002960:	f003 031f 	and.w	r3, r3, #31
 8002964:	2101      	movs	r1, #1
 8002966:	fa01 f303 	lsl.w	r3, r1, r3
 800296a:	4013      	ands	r3, r2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0b0      	beq.n	80028d2 <HAL_RCC_OscConfig+0x63a>
 8002970:	e06a      	b.n	8002a48 <HAL_RCC_OscConfig+0x7b0>
 8002972:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002976:	2201      	movs	r2, #1
 8002978:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	fa93 f2a3 	rbit	r2, r3
 8002984:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002988:	601a      	str	r2, [r3, #0]
  return result;
 800298a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800298e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002990:	fab3 f383 	clz	r3, r3
 8002994:	b2db      	uxtb	r3, r3
 8002996:	461a      	mov	r2, r3
 8002998:	4b8c      	ldr	r3, [pc, #560]	; (8002bcc <HAL_RCC_OscConfig+0x934>)
 800299a:	4413      	add	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	461a      	mov	r2, r3
 80029a0:	2300      	movs	r3, #0
 80029a2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a4:	f7fe fc92 	bl	80012cc <HAL_GetTick>
 80029a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ac:	e009      	b.n	80029c2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ae:	f7fe fc8d 	bl	80012cc <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e36b      	b.n	800309a <HAL_RCC_OscConfig+0xe02>
 80029c2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80029c6:	2202      	movs	r2, #2
 80029c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ca:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	fa93 f2a3 	rbit	r2, r3
 80029d4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80029de:	2202      	movs	r2, #2
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	fa93 f2a3 	rbit	r2, r3
 80029ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80029f6:	2202      	movs	r2, #2
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	fa93 f2a3 	rbit	r2, r3
 8002a04:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a08:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a0a:	4b6f      	ldr	r3, [pc, #444]	; (8002bc8 <HAL_RCC_OscConfig+0x930>)
 8002a0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a0e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002a12:	2102      	movs	r1, #2
 8002a14:	6019      	str	r1, [r3, #0]
 8002a16:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	fa93 f1a3 	rbit	r1, r3
 8002a20:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002a24:	6019      	str	r1, [r3, #0]
  return result;
 8002a26:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	fab3 f383 	clz	r3, r3
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	f003 031f 	and.w	r3, r3, #31
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1b2      	bne.n	80029ae <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a48:	1d3b      	adds	r3, r7, #4
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 8158 	beq.w	8002d08 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a5e:	4b5a      	ldr	r3, [pc, #360]	; (8002bc8 <HAL_RCC_OscConfig+0x930>)
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d112      	bne.n	8002a90 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a6a:	4b57      	ldr	r3, [pc, #348]	; (8002bc8 <HAL_RCC_OscConfig+0x930>)
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	4a56      	ldr	r2, [pc, #344]	; (8002bc8 <HAL_RCC_OscConfig+0x930>)
 8002a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a74:	61d3      	str	r3, [r2, #28]
 8002a76:	4b54      	ldr	r3, [pc, #336]	; (8002bc8 <HAL_RCC_OscConfig+0x930>)
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002a7e:	f107 0308 	add.w	r3, r7, #8
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	f107 0308 	add.w	r3, r7, #8
 8002a88:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a90:	4b4f      	ldr	r3, [pc, #316]	; (8002bd0 <HAL_RCC_OscConfig+0x938>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d11a      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a9c:	4b4c      	ldr	r3, [pc, #304]	; (8002bd0 <HAL_RCC_OscConfig+0x938>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a4b      	ldr	r2, [pc, #300]	; (8002bd0 <HAL_RCC_OscConfig+0x938>)
 8002aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aa8:	f7fe fc10 	bl	80012cc <HAL_GetTick>
 8002aac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab0:	e009      	b.n	8002ac6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab2:	f7fe fc0b 	bl	80012cc <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b64      	cmp	r3, #100	; 0x64
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e2e9      	b.n	800309a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac6:	4b42      	ldr	r3, [pc, #264]	; (8002bd0 <HAL_RCC_OscConfig+0x938>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0ef      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ad2:	1d3b      	adds	r3, r7, #4
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d106      	bne.n	8002aea <HAL_RCC_OscConfig+0x852>
 8002adc:	4b3a      	ldr	r3, [pc, #232]	; (8002bc8 <HAL_RCC_OscConfig+0x930>)
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	4a39      	ldr	r2, [pc, #228]	; (8002bc8 <HAL_RCC_OscConfig+0x930>)
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	6213      	str	r3, [r2, #32]
 8002ae8:	e02f      	b.n	8002b4a <HAL_RCC_OscConfig+0x8b2>
 8002aea:	1d3b      	adds	r3, r7, #4
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10c      	bne.n	8002b0e <HAL_RCC_OscConfig+0x876>
 8002af4:	4b34      	ldr	r3, [pc, #208]	; (8002bc8 <HAL_RCC_OscConfig+0x930>)
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	4a33      	ldr	r2, [pc, #204]	; (8002bc8 <HAL_RCC_OscConfig+0x930>)
 8002afa:	f023 0301 	bic.w	r3, r3, #1
 8002afe:	6213      	str	r3, [r2, #32]
 8002b00:	4b31      	ldr	r3, [pc, #196]	; (8002bc8 <HAL_RCC_OscConfig+0x930>)
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	4a30      	ldr	r2, [pc, #192]	; (8002bc8 <HAL_RCC_OscConfig+0x930>)
 8002b06:	f023 0304 	bic.w	r3, r3, #4
 8002b0a:	6213      	str	r3, [r2, #32]
 8002b0c:	e01d      	b.n	8002b4a <HAL_RCC_OscConfig+0x8b2>
 8002b0e:	1d3b      	adds	r3, r7, #4
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	2b05      	cmp	r3, #5
 8002b16:	d10c      	bne.n	8002b32 <HAL_RCC_OscConfig+0x89a>
 8002b18:	4b2b      	ldr	r3, [pc, #172]	; (8002bc8 <HAL_RCC_OscConfig+0x930>)
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	4a2a      	ldr	r2, [pc, #168]	; (8002bc8 <HAL_RCC_OscConfig+0x930>)
 8002b1e:	f043 0304 	orr.w	r3, r3, #4
 8002b22:	6213      	str	r3, [r2, #32]
 8002b24:	4b28      	ldr	r3, [pc, #160]	; (8002bc8 <HAL_RCC_OscConfig+0x930>)
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	4a27      	ldr	r2, [pc, #156]	; (8002bc8 <HAL_RCC_OscConfig+0x930>)
 8002b2a:	f043 0301 	orr.w	r3, r3, #1
 8002b2e:	6213      	str	r3, [r2, #32]
 8002b30:	e00b      	b.n	8002b4a <HAL_RCC_OscConfig+0x8b2>
 8002b32:	4b25      	ldr	r3, [pc, #148]	; (8002bc8 <HAL_RCC_OscConfig+0x930>)
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	4a24      	ldr	r2, [pc, #144]	; (8002bc8 <HAL_RCC_OscConfig+0x930>)
 8002b38:	f023 0301 	bic.w	r3, r3, #1
 8002b3c:	6213      	str	r3, [r2, #32]
 8002b3e:	4b22      	ldr	r3, [pc, #136]	; (8002bc8 <HAL_RCC_OscConfig+0x930>)
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	4a21      	ldr	r2, [pc, #132]	; (8002bc8 <HAL_RCC_OscConfig+0x930>)
 8002b44:	f023 0304 	bic.w	r3, r3, #4
 8002b48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b4a:	1d3b      	adds	r3, r7, #4
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d06b      	beq.n	8002c2c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b54:	f7fe fbba 	bl	80012cc <HAL_GetTick>
 8002b58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b5c:	e00b      	b.n	8002b76 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b5e:	f7fe fbb5 	bl	80012cc <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e291      	b.n	800309a <HAL_RCC_OscConfig+0xe02>
 8002b76:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	fa93 f2a3 	rbit	r2, r3
 8002b88:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002b92:	2202      	movs	r2, #2
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	fa93 f2a3 	rbit	r2, r3
 8002ba0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002ba4:	601a      	str	r2, [r3, #0]
  return result;
 8002ba6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002baa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bac:	fab3 f383 	clz	r3, r3
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	095b      	lsrs	r3, r3, #5
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	f043 0302 	orr.w	r3, r3, #2
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d109      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x93c>
 8002bc0:	4b01      	ldr	r3, [pc, #4]	; (8002bc8 <HAL_RCC_OscConfig+0x930>)
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	e014      	b.n	8002bf0 <HAL_RCC_OscConfig+0x958>
 8002bc6:	bf00      	nop
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	10908120 	.word	0x10908120
 8002bd0:	40007000 	.word	0x40007000
 8002bd4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002bd8:	2202      	movs	r2, #2
 8002bda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bdc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	fa93 f2a3 	rbit	r2, r3
 8002be6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	4bbb      	ldr	r3, [pc, #748]	; (8002edc <HAL_RCC_OscConfig+0xc44>)
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002bf4:	2102      	movs	r1, #2
 8002bf6:	6011      	str	r1, [r2, #0]
 8002bf8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002bfc:	6812      	ldr	r2, [r2, #0]
 8002bfe:	fa92 f1a2 	rbit	r1, r2
 8002c02:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002c06:	6011      	str	r1, [r2, #0]
  return result;
 8002c08:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002c0c:	6812      	ldr	r2, [r2, #0]
 8002c0e:	fab2 f282 	clz	r2, r2
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	f002 021f 	and.w	r2, r2, #31
 8002c1e:	2101      	movs	r1, #1
 8002c20:	fa01 f202 	lsl.w	r2, r1, r2
 8002c24:	4013      	ands	r3, r2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d099      	beq.n	8002b5e <HAL_RCC_OscConfig+0x8c6>
 8002c2a:	e063      	b.n	8002cf4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c2c:	f7fe fb4e 	bl	80012cc <HAL_GetTick>
 8002c30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c34:	e00b      	b.n	8002c4e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c36:	f7fe fb49 	bl	80012cc <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e225      	b.n	800309a <HAL_RCC_OscConfig+0xe02>
 8002c4e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002c52:	2202      	movs	r2, #2
 8002c54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c56:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	fa93 f2a3 	rbit	r2, r3
 8002c60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	fa93 f2a3 	rbit	r2, r3
 8002c78:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002c7c:	601a      	str	r2, [r3, #0]
  return result;
 8002c7e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002c82:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c84:	fab3 f383 	clz	r3, r3
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	095b      	lsrs	r3, r3, #5
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	f043 0302 	orr.w	r3, r3, #2
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d102      	bne.n	8002c9e <HAL_RCC_OscConfig+0xa06>
 8002c98:	4b90      	ldr	r3, [pc, #576]	; (8002edc <HAL_RCC_OscConfig+0xc44>)
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	e00d      	b.n	8002cba <HAL_RCC_OscConfig+0xa22>
 8002c9e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	fa93 f2a3 	rbit	r2, r3
 8002cb0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	4b89      	ldr	r3, [pc, #548]	; (8002edc <HAL_RCC_OscConfig+0xc44>)
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002cbe:	2102      	movs	r1, #2
 8002cc0:	6011      	str	r1, [r2, #0]
 8002cc2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002cc6:	6812      	ldr	r2, [r2, #0]
 8002cc8:	fa92 f1a2 	rbit	r1, r2
 8002ccc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002cd0:	6011      	str	r1, [r2, #0]
  return result;
 8002cd2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002cd6:	6812      	ldr	r2, [r2, #0]
 8002cd8:	fab2 f282 	clz	r2, r2
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	f002 021f 	and.w	r2, r2, #31
 8002ce8:	2101      	movs	r1, #1
 8002cea:	fa01 f202 	lsl.w	r2, r1, r2
 8002cee:	4013      	ands	r3, r2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1a0      	bne.n	8002c36 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cf4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d105      	bne.n	8002d08 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cfc:	4b77      	ldr	r3, [pc, #476]	; (8002edc <HAL_RCC_OscConfig+0xc44>)
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	4a76      	ldr	r2, [pc, #472]	; (8002edc <HAL_RCC_OscConfig+0xc44>)
 8002d02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d06:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d08:	1d3b      	adds	r3, r7, #4
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 81c2 	beq.w	8003098 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d14:	4b71      	ldr	r3, [pc, #452]	; (8002edc <HAL_RCC_OscConfig+0xc44>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 030c 	and.w	r3, r3, #12
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	f000 819c 	beq.w	800305a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d22:	1d3b      	adds	r3, r7, #4
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	f040 8114 	bne.w	8002f56 <HAL_RCC_OscConfig+0xcbe>
 8002d2e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002d32:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d38:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	fa93 f2a3 	rbit	r2, r3
 8002d42:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002d46:	601a      	str	r2, [r3, #0]
  return result;
 8002d48:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002d4c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d4e:	fab3 f383 	clz	r3, r3
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d58:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	461a      	mov	r2, r3
 8002d60:	2300      	movs	r3, #0
 8002d62:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d64:	f7fe fab2 	bl	80012cc <HAL_GetTick>
 8002d68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d6c:	e009      	b.n	8002d82 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d6e:	f7fe faad 	bl	80012cc <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e18b      	b.n	800309a <HAL_RCC_OscConfig+0xe02>
 8002d82:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002d86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	fa93 f2a3 	rbit	r2, r3
 8002d96:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002d9a:	601a      	str	r2, [r3, #0]
  return result;
 8002d9c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002da0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002da2:	fab3 f383 	clz	r3, r3
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	095b      	lsrs	r3, r3, #5
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d102      	bne.n	8002dbc <HAL_RCC_OscConfig+0xb24>
 8002db6:	4b49      	ldr	r3, [pc, #292]	; (8002edc <HAL_RCC_OscConfig+0xc44>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	e01b      	b.n	8002df4 <HAL_RCC_OscConfig+0xb5c>
 8002dbc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002dc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	fa93 f2a3 	rbit	r2, r3
 8002dd0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002dda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	fa93 f2a3 	rbit	r2, r3
 8002dea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	4b3a      	ldr	r3, [pc, #232]	; (8002edc <HAL_RCC_OscConfig+0xc44>)
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002df8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002dfc:	6011      	str	r1, [r2, #0]
 8002dfe:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002e02:	6812      	ldr	r2, [r2, #0]
 8002e04:	fa92 f1a2 	rbit	r1, r2
 8002e08:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002e0c:	6011      	str	r1, [r2, #0]
  return result;
 8002e0e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002e12:	6812      	ldr	r2, [r2, #0]
 8002e14:	fab2 f282 	clz	r2, r2
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	f042 0220 	orr.w	r2, r2, #32
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	f002 021f 	and.w	r2, r2, #31
 8002e24:	2101      	movs	r1, #1
 8002e26:	fa01 f202 	lsl.w	r2, r1, r2
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d19e      	bne.n	8002d6e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e30:	4b2a      	ldr	r3, [pc, #168]	; (8002edc <HAL_RCC_OscConfig+0xc44>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e38:	1d3b      	adds	r3, r7, #4
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002e3e:	1d3b      	adds	r3, r7, #4
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	430b      	orrs	r3, r1
 8002e46:	4925      	ldr	r1, [pc, #148]	; (8002edc <HAL_RCC_OscConfig+0xc44>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	604b      	str	r3, [r1, #4]
 8002e4c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	fa93 f2a3 	rbit	r2, r3
 8002e60:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e64:	601a      	str	r2, [r3, #0]
  return result;
 8002e66:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e6a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e6c:	fab3 f383 	clz	r3, r3
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e76:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	2301      	movs	r3, #1
 8002e80:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e82:	f7fe fa23 	bl	80012cc <HAL_GetTick>
 8002e86:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e8a:	e009      	b.n	8002ea0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e8c:	f7fe fa1e 	bl	80012cc <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e0fc      	b.n	800309a <HAL_RCC_OscConfig+0xe02>
 8002ea0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ea4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ea8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eaa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	fa93 f2a3 	rbit	r2, r3
 8002eb4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002eb8:	601a      	str	r2, [r3, #0]
  return result;
 8002eba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ebe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ec0:	fab3 f383 	clz	r3, r3
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	095b      	lsrs	r3, r3, #5
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d105      	bne.n	8002ee0 <HAL_RCC_OscConfig+0xc48>
 8002ed4:	4b01      	ldr	r3, [pc, #4]	; (8002edc <HAL_RCC_OscConfig+0xc44>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	e01e      	b.n	8002f18 <HAL_RCC_OscConfig+0xc80>
 8002eda:	bf00      	nop
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002ee4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ee8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	fa93 f2a3 	rbit	r2, r3
 8002ef4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002efe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	fa93 f2a3 	rbit	r2, r3
 8002f0e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	4b63      	ldr	r3, [pc, #396]	; (80030a4 <HAL_RCC_OscConfig+0xe0c>)
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002f1c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f20:	6011      	str	r1, [r2, #0]
 8002f22:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002f26:	6812      	ldr	r2, [r2, #0]
 8002f28:	fa92 f1a2 	rbit	r1, r2
 8002f2c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002f30:	6011      	str	r1, [r2, #0]
  return result;
 8002f32:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002f36:	6812      	ldr	r2, [r2, #0]
 8002f38:	fab2 f282 	clz	r2, r2
 8002f3c:	b2d2      	uxtb	r2, r2
 8002f3e:	f042 0220 	orr.w	r2, r2, #32
 8002f42:	b2d2      	uxtb	r2, r2
 8002f44:	f002 021f 	and.w	r2, r2, #31
 8002f48:	2101      	movs	r1, #1
 8002f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f4e:	4013      	ands	r3, r2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d09b      	beq.n	8002e8c <HAL_RCC_OscConfig+0xbf4>
 8002f54:	e0a0      	b.n	8003098 <HAL_RCC_OscConfig+0xe00>
 8002f56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f5a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	fa93 f2a3 	rbit	r2, r3
 8002f6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f6e:	601a      	str	r2, [r3, #0]
  return result;
 8002f70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f74:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f76:	fab3 f383 	clz	r3, r3
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	461a      	mov	r2, r3
 8002f88:	2300      	movs	r3, #0
 8002f8a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8c:	f7fe f99e 	bl	80012cc <HAL_GetTick>
 8002f90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f94:	e009      	b.n	8002faa <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f96:	f7fe f999 	bl	80012cc <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e077      	b.n	800309a <HAL_RCC_OscConfig+0xe02>
 8002faa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	fa93 f2a3 	rbit	r2, r3
 8002fbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fc2:	601a      	str	r2, [r3, #0]
  return result;
 8002fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fc8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fca:	fab3 f383 	clz	r3, r3
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	095b      	lsrs	r3, r3, #5
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d102      	bne.n	8002fe4 <HAL_RCC_OscConfig+0xd4c>
 8002fde:	4b31      	ldr	r3, [pc, #196]	; (80030a4 <HAL_RCC_OscConfig+0xe0c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	e01b      	b.n	800301c <HAL_RCC_OscConfig+0xd84>
 8002fe4:	f107 0320 	add.w	r3, r7, #32
 8002fe8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fee:	f107 0320 	add.w	r3, r7, #32
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	fa93 f2a3 	rbit	r2, r3
 8002ff8:	f107 031c 	add.w	r3, r7, #28
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	f107 0318 	add.w	r3, r7, #24
 8003002:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	f107 0318 	add.w	r3, r7, #24
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	fa93 f2a3 	rbit	r2, r3
 8003012:	f107 0314 	add.w	r3, r7, #20
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	4b22      	ldr	r3, [pc, #136]	; (80030a4 <HAL_RCC_OscConfig+0xe0c>)
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	f107 0210 	add.w	r2, r7, #16
 8003020:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003024:	6011      	str	r1, [r2, #0]
 8003026:	f107 0210 	add.w	r2, r7, #16
 800302a:	6812      	ldr	r2, [r2, #0]
 800302c:	fa92 f1a2 	rbit	r1, r2
 8003030:	f107 020c 	add.w	r2, r7, #12
 8003034:	6011      	str	r1, [r2, #0]
  return result;
 8003036:	f107 020c 	add.w	r2, r7, #12
 800303a:	6812      	ldr	r2, [r2, #0]
 800303c:	fab2 f282 	clz	r2, r2
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	f042 0220 	orr.w	r2, r2, #32
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	f002 021f 	and.w	r2, r2, #31
 800304c:	2101      	movs	r1, #1
 800304e:	fa01 f202 	lsl.w	r2, r1, r2
 8003052:	4013      	ands	r3, r2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d19e      	bne.n	8002f96 <HAL_RCC_OscConfig+0xcfe>
 8003058:	e01e      	b.n	8003098 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800305a:	1d3b      	adds	r3, r7, #4
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e018      	b.n	800309a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003068:	4b0e      	ldr	r3, [pc, #56]	; (80030a4 <HAL_RCC_OscConfig+0xe0c>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003070:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003074:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003078:	1d3b      	adds	r3, r7, #4
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	429a      	cmp	r2, r3
 8003080:	d108      	bne.n	8003094 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003082:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003086:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800308a:	1d3b      	adds	r3, r7, #4
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003090:	429a      	cmp	r2, r3
 8003092:	d001      	beq.n	8003098 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e000      	b.n	800309a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40021000 	.word	0x40021000

080030a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b09e      	sub	sp, #120	; 0x78
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d101      	bne.n	80030c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e162      	b.n	8003386 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030c0:	4b90      	ldr	r3, [pc, #576]	; (8003304 <HAL_RCC_ClockConfig+0x25c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d910      	bls.n	80030f0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ce:	4b8d      	ldr	r3, [pc, #564]	; (8003304 <HAL_RCC_ClockConfig+0x25c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f023 0207 	bic.w	r2, r3, #7
 80030d6:	498b      	ldr	r1, [pc, #556]	; (8003304 <HAL_RCC_ClockConfig+0x25c>)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	4313      	orrs	r3, r2
 80030dc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030de:	4b89      	ldr	r3, [pc, #548]	; (8003304 <HAL_RCC_ClockConfig+0x25c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d001      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e14a      	b.n	8003386 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d008      	beq.n	800310e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030fc:	4b82      	ldr	r3, [pc, #520]	; (8003308 <HAL_RCC_ClockConfig+0x260>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	497f      	ldr	r1, [pc, #508]	; (8003308 <HAL_RCC_ClockConfig+0x260>)
 800310a:	4313      	orrs	r3, r2
 800310c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 80dc 	beq.w	80032d4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d13c      	bne.n	800319e <HAL_RCC_ClockConfig+0xf6>
 8003124:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003128:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800312c:	fa93 f3a3 	rbit	r3, r3
 8003130:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003134:	fab3 f383 	clz	r3, r3
 8003138:	b2db      	uxtb	r3, r3
 800313a:	095b      	lsrs	r3, r3, #5
 800313c:	b2db      	uxtb	r3, r3
 800313e:	f043 0301 	orr.w	r3, r3, #1
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b01      	cmp	r3, #1
 8003146:	d102      	bne.n	800314e <HAL_RCC_ClockConfig+0xa6>
 8003148:	4b6f      	ldr	r3, [pc, #444]	; (8003308 <HAL_RCC_ClockConfig+0x260>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	e00f      	b.n	800316e <HAL_RCC_ClockConfig+0xc6>
 800314e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003152:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003154:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003156:	fa93 f3a3 	rbit	r3, r3
 800315a:	667b      	str	r3, [r7, #100]	; 0x64
 800315c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003160:	663b      	str	r3, [r7, #96]	; 0x60
 8003162:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003164:	fa93 f3a3 	rbit	r3, r3
 8003168:	65fb      	str	r3, [r7, #92]	; 0x5c
 800316a:	4b67      	ldr	r3, [pc, #412]	; (8003308 <HAL_RCC_ClockConfig+0x260>)
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003172:	65ba      	str	r2, [r7, #88]	; 0x58
 8003174:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003176:	fa92 f2a2 	rbit	r2, r2
 800317a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800317c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800317e:	fab2 f282 	clz	r2, r2
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	f042 0220 	orr.w	r2, r2, #32
 8003188:	b2d2      	uxtb	r2, r2
 800318a:	f002 021f 	and.w	r2, r2, #31
 800318e:	2101      	movs	r1, #1
 8003190:	fa01 f202 	lsl.w	r2, r1, r2
 8003194:	4013      	ands	r3, r2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d17b      	bne.n	8003292 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e0f3      	b.n	8003386 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d13c      	bne.n	8003220 <HAL_RCC_ClockConfig+0x178>
 80031a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031aa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031ae:	fa93 f3a3 	rbit	r3, r3
 80031b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80031b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b6:	fab3 f383 	clz	r3, r3
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	095b      	lsrs	r3, r3, #5
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	f043 0301 	orr.w	r3, r3, #1
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d102      	bne.n	80031d0 <HAL_RCC_ClockConfig+0x128>
 80031ca:	4b4f      	ldr	r3, [pc, #316]	; (8003308 <HAL_RCC_ClockConfig+0x260>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	e00f      	b.n	80031f0 <HAL_RCC_ClockConfig+0x148>
 80031d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031d4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031d8:	fa93 f3a3 	rbit	r3, r3
 80031dc:	647b      	str	r3, [r7, #68]	; 0x44
 80031de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031e2:	643b      	str	r3, [r7, #64]	; 0x40
 80031e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031e6:	fa93 f3a3 	rbit	r3, r3
 80031ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031ec:	4b46      	ldr	r3, [pc, #280]	; (8003308 <HAL_RCC_ClockConfig+0x260>)
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031f4:	63ba      	str	r2, [r7, #56]	; 0x38
 80031f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031f8:	fa92 f2a2 	rbit	r2, r2
 80031fc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80031fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003200:	fab2 f282 	clz	r2, r2
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	f042 0220 	orr.w	r2, r2, #32
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	f002 021f 	and.w	r2, r2, #31
 8003210:	2101      	movs	r1, #1
 8003212:	fa01 f202 	lsl.w	r2, r1, r2
 8003216:	4013      	ands	r3, r2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d13a      	bne.n	8003292 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e0b2      	b.n	8003386 <HAL_RCC_ClockConfig+0x2de>
 8003220:	2302      	movs	r3, #2
 8003222:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003226:	fa93 f3a3 	rbit	r3, r3
 800322a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800322c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800322e:	fab3 f383 	clz	r3, r3
 8003232:	b2db      	uxtb	r3, r3
 8003234:	095b      	lsrs	r3, r3, #5
 8003236:	b2db      	uxtb	r3, r3
 8003238:	f043 0301 	orr.w	r3, r3, #1
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b01      	cmp	r3, #1
 8003240:	d102      	bne.n	8003248 <HAL_RCC_ClockConfig+0x1a0>
 8003242:	4b31      	ldr	r3, [pc, #196]	; (8003308 <HAL_RCC_ClockConfig+0x260>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	e00d      	b.n	8003264 <HAL_RCC_ClockConfig+0x1bc>
 8003248:	2302      	movs	r3, #2
 800324a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324e:	fa93 f3a3 	rbit	r3, r3
 8003252:	627b      	str	r3, [r7, #36]	; 0x24
 8003254:	2302      	movs	r3, #2
 8003256:	623b      	str	r3, [r7, #32]
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	fa93 f3a3 	rbit	r3, r3
 800325e:	61fb      	str	r3, [r7, #28]
 8003260:	4b29      	ldr	r3, [pc, #164]	; (8003308 <HAL_RCC_ClockConfig+0x260>)
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	2202      	movs	r2, #2
 8003266:	61ba      	str	r2, [r7, #24]
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	fa92 f2a2 	rbit	r2, r2
 800326e:	617a      	str	r2, [r7, #20]
  return result;
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	fab2 f282 	clz	r2, r2
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	f042 0220 	orr.w	r2, r2, #32
 800327c:	b2d2      	uxtb	r2, r2
 800327e:	f002 021f 	and.w	r2, r2, #31
 8003282:	2101      	movs	r1, #1
 8003284:	fa01 f202 	lsl.w	r2, r1, r2
 8003288:	4013      	ands	r3, r2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e079      	b.n	8003386 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003292:	4b1d      	ldr	r3, [pc, #116]	; (8003308 <HAL_RCC_ClockConfig+0x260>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f023 0203 	bic.w	r2, r3, #3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	491a      	ldr	r1, [pc, #104]	; (8003308 <HAL_RCC_ClockConfig+0x260>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032a4:	f7fe f812 	bl	80012cc <HAL_GetTick>
 80032a8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032aa:	e00a      	b.n	80032c2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ac:	f7fe f80e 	bl	80012cc <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e061      	b.n	8003386 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c2:	4b11      	ldr	r3, [pc, #68]	; (8003308 <HAL_RCC_ClockConfig+0x260>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f003 020c 	and.w	r2, r3, #12
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d1eb      	bne.n	80032ac <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032d4:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <HAL_RCC_ClockConfig+0x25c>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d214      	bcs.n	800330c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e2:	4b08      	ldr	r3, [pc, #32]	; (8003304 <HAL_RCC_ClockConfig+0x25c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f023 0207 	bic.w	r2, r3, #7
 80032ea:	4906      	ldr	r1, [pc, #24]	; (8003304 <HAL_RCC_ClockConfig+0x25c>)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f2:	4b04      	ldr	r3, [pc, #16]	; (8003304 <HAL_RCC_ClockConfig+0x25c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d005      	beq.n	800330c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e040      	b.n	8003386 <HAL_RCC_ClockConfig+0x2de>
 8003304:	40022000 	.word	0x40022000
 8003308:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b00      	cmp	r3, #0
 8003316:	d008      	beq.n	800332a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003318:	4b1d      	ldr	r3, [pc, #116]	; (8003390 <HAL_RCC_ClockConfig+0x2e8>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	491a      	ldr	r1, [pc, #104]	; (8003390 <HAL_RCC_ClockConfig+0x2e8>)
 8003326:	4313      	orrs	r3, r2
 8003328:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0308 	and.w	r3, r3, #8
 8003332:	2b00      	cmp	r3, #0
 8003334:	d009      	beq.n	800334a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003336:	4b16      	ldr	r3, [pc, #88]	; (8003390 <HAL_RCC_ClockConfig+0x2e8>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	4912      	ldr	r1, [pc, #72]	; (8003390 <HAL_RCC_ClockConfig+0x2e8>)
 8003346:	4313      	orrs	r3, r2
 8003348:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800334a:	f000 f829 	bl	80033a0 <HAL_RCC_GetSysClockFreq>
 800334e:	4601      	mov	r1, r0
 8003350:	4b0f      	ldr	r3, [pc, #60]	; (8003390 <HAL_RCC_ClockConfig+0x2e8>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003358:	22f0      	movs	r2, #240	; 0xf0
 800335a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	fa92 f2a2 	rbit	r2, r2
 8003362:	60fa      	str	r2, [r7, #12]
  return result;
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	fab2 f282 	clz	r2, r2
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	40d3      	lsrs	r3, r2
 800336e:	4a09      	ldr	r2, [pc, #36]	; (8003394 <HAL_RCC_ClockConfig+0x2ec>)
 8003370:	5cd3      	ldrb	r3, [r2, r3]
 8003372:	fa21 f303 	lsr.w	r3, r1, r3
 8003376:	4a08      	ldr	r2, [pc, #32]	; (8003398 <HAL_RCC_ClockConfig+0x2f0>)
 8003378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800337a:	4b08      	ldr	r3, [pc, #32]	; (800339c <HAL_RCC_ClockConfig+0x2f4>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f7fd ff60 	bl	8001244 <HAL_InitTick>
  
  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3778      	adds	r7, #120	; 0x78
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	40021000 	.word	0x40021000
 8003394:	080067e8 	.word	0x080067e8
 8003398:	20000000 	.word	0x20000000
 800339c:	20000004 	.word	0x20000004

080033a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b08b      	sub	sp, #44	; 0x2c
 80033a4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	61fb      	str	r3, [r7, #28]
 80033aa:	2300      	movs	r3, #0
 80033ac:	61bb      	str	r3, [r7, #24]
 80033ae:	2300      	movs	r3, #0
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24
 80033b2:	2300      	movs	r3, #0
 80033b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80033ba:	4b29      	ldr	r3, [pc, #164]	; (8003460 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f003 030c 	and.w	r3, r3, #12
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d002      	beq.n	80033d0 <HAL_RCC_GetSysClockFreq+0x30>
 80033ca:	2b08      	cmp	r3, #8
 80033cc:	d003      	beq.n	80033d6 <HAL_RCC_GetSysClockFreq+0x36>
 80033ce:	e03c      	b.n	800344a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033d0:	4b24      	ldr	r3, [pc, #144]	; (8003464 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033d2:	623b      	str	r3, [r7, #32]
      break;
 80033d4:	e03c      	b.n	8003450 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80033dc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80033e0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	fa92 f2a2 	rbit	r2, r2
 80033e8:	607a      	str	r2, [r7, #4]
  return result;
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	fab2 f282 	clz	r2, r2
 80033f0:	b2d2      	uxtb	r2, r2
 80033f2:	40d3      	lsrs	r3, r2
 80033f4:	4a1c      	ldr	r2, [pc, #112]	; (8003468 <HAL_RCC_GetSysClockFreq+0xc8>)
 80033f6:	5cd3      	ldrb	r3, [r2, r3]
 80033f8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80033fa:	4b19      	ldr	r3, [pc, #100]	; (8003460 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	220f      	movs	r2, #15
 8003404:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	fa92 f2a2 	rbit	r2, r2
 800340c:	60fa      	str	r2, [r7, #12]
  return result;
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	fab2 f282 	clz	r2, r2
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	40d3      	lsrs	r3, r2
 8003418:	4a14      	ldr	r2, [pc, #80]	; (800346c <HAL_RCC_GetSysClockFreq+0xcc>)
 800341a:	5cd3      	ldrb	r3, [r2, r3]
 800341c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d008      	beq.n	800343a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003428:	4a0e      	ldr	r2, [pc, #56]	; (8003464 <HAL_RCC_GetSysClockFreq+0xc4>)
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	fb02 f303 	mul.w	r3, r2, r3
 8003436:	627b      	str	r3, [r7, #36]	; 0x24
 8003438:	e004      	b.n	8003444 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	4a0c      	ldr	r2, [pc, #48]	; (8003470 <HAL_RCC_GetSysClockFreq+0xd0>)
 800343e:	fb02 f303 	mul.w	r3, r2, r3
 8003442:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	623b      	str	r3, [r7, #32]
      break;
 8003448:	e002      	b.n	8003450 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800344a:	4b06      	ldr	r3, [pc, #24]	; (8003464 <HAL_RCC_GetSysClockFreq+0xc4>)
 800344c:	623b      	str	r3, [r7, #32]
      break;
 800344e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003450:	6a3b      	ldr	r3, [r7, #32]
}
 8003452:	4618      	mov	r0, r3
 8003454:	372c      	adds	r7, #44	; 0x2c
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	40021000 	.word	0x40021000
 8003464:	007a1200 	.word	0x007a1200
 8003468:	08006800 	.word	0x08006800
 800346c:	08006810 	.word	0x08006810
 8003470:	003d0900 	.word	0x003d0900

08003474 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003478:	4b03      	ldr	r3, [pc, #12]	; (8003488 <HAL_RCC_GetHCLKFreq+0x14>)
 800347a:	681b      	ldr	r3, [r3, #0]
}
 800347c:	4618      	mov	r0, r3
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	20000000 	.word	0x20000000

0800348c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003492:	f7ff ffef 	bl	8003474 <HAL_RCC_GetHCLKFreq>
 8003496:	4601      	mov	r1, r0
 8003498:	4b0b      	ldr	r3, [pc, #44]	; (80034c8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034a0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80034a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	fa92 f2a2 	rbit	r2, r2
 80034ac:	603a      	str	r2, [r7, #0]
  return result;
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	fab2 f282 	clz	r2, r2
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	40d3      	lsrs	r3, r2
 80034b8:	4a04      	ldr	r2, [pc, #16]	; (80034cc <HAL_RCC_GetPCLK1Freq+0x40>)
 80034ba:	5cd3      	ldrb	r3, [r2, r3]
 80034bc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80034c0:	4618      	mov	r0, r3
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40021000 	.word	0x40021000
 80034cc:	080067f8 	.word	0x080067f8

080034d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80034d6:	f7ff ffcd 	bl	8003474 <HAL_RCC_GetHCLKFreq>
 80034da:	4601      	mov	r1, r0
 80034dc:	4b0b      	ldr	r3, [pc, #44]	; (800350c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80034e4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80034e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	fa92 f2a2 	rbit	r2, r2
 80034f0:	603a      	str	r2, [r7, #0]
  return result;
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	fab2 f282 	clz	r2, r2
 80034f8:	b2d2      	uxtb	r2, r2
 80034fa:	40d3      	lsrs	r3, r2
 80034fc:	4a04      	ldr	r2, [pc, #16]	; (8003510 <HAL_RCC_GetPCLK2Freq+0x40>)
 80034fe:	5cd3      	ldrb	r3, [r2, r3]
 8003500:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003504:	4618      	mov	r0, r3
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40021000 	.word	0x40021000
 8003510:	080067f8 	.word	0x080067f8

08003514 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b092      	sub	sp, #72	; 0x48
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003520:	2300      	movs	r3, #0
 8003522:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003524:	2300      	movs	r3, #0
 8003526:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 80cd 	beq.w	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003538:	4b86      	ldr	r3, [pc, #536]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10e      	bne.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003544:	4b83      	ldr	r3, [pc, #524]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	4a82      	ldr	r2, [pc, #520]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800354a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800354e:	61d3      	str	r3, [r2, #28]
 8003550:	4b80      	ldr	r3, [pc, #512]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003552:	69db      	ldr	r3, [r3, #28]
 8003554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800355c:	2301      	movs	r3, #1
 800355e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003562:	4b7d      	ldr	r3, [pc, #500]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356a:	2b00      	cmp	r3, #0
 800356c:	d118      	bne.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800356e:	4b7a      	ldr	r3, [pc, #488]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a79      	ldr	r2, [pc, #484]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003578:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800357a:	f7fd fea7 	bl	80012cc <HAL_GetTick>
 800357e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003580:	e008      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003582:	f7fd fea3 	bl	80012cc <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b64      	cmp	r3, #100	; 0x64
 800358e:	d901      	bls.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e0db      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003594:	4b70      	ldr	r3, [pc, #448]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359c:	2b00      	cmp	r3, #0
 800359e:	d0f0      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035a0:	4b6c      	ldr	r3, [pc, #432]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d07d      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x198>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d076      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035be:	4b65      	ldr	r3, [pc, #404]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035cc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d0:	fa93 f3a3 	rbit	r3, r3
 80035d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80035d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035d8:	fab3 f383 	clz	r3, r3
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	461a      	mov	r2, r3
 80035e0:	4b5e      	ldr	r3, [pc, #376]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80035e2:	4413      	add	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	461a      	mov	r2, r3
 80035e8:	2301      	movs	r3, #1
 80035ea:	6013      	str	r3, [r2, #0]
 80035ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f4:	fa93 f3a3 	rbit	r3, r3
 80035f8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80035fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035fc:	fab3 f383 	clz	r3, r3
 8003600:	b2db      	uxtb	r3, r3
 8003602:	461a      	mov	r2, r3
 8003604:	4b55      	ldr	r3, [pc, #340]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003606:	4413      	add	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	461a      	mov	r2, r3
 800360c:	2300      	movs	r3, #0
 800360e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003610:	4a50      	ldr	r2, [pc, #320]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003614:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b00      	cmp	r3, #0
 800361e:	d045      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003620:	f7fd fe54 	bl	80012cc <HAL_GetTick>
 8003624:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003626:	e00a      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003628:	f7fd fe50 	bl	80012cc <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	f241 3288 	movw	r2, #5000	; 0x1388
 8003636:	4293      	cmp	r3, r2
 8003638:	d901      	bls.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e086      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x238>
 800363e:	2302      	movs	r3, #2
 8003640:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003644:	fa93 f3a3 	rbit	r3, r3
 8003648:	627b      	str	r3, [r7, #36]	; 0x24
 800364a:	2302      	movs	r3, #2
 800364c:	623b      	str	r3, [r7, #32]
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	fa93 f3a3 	rbit	r3, r3
 8003654:	61fb      	str	r3, [r7, #28]
  return result;
 8003656:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003658:	fab3 f383 	clz	r3, r3
 800365c:	b2db      	uxtb	r3, r3
 800365e:	095b      	lsrs	r3, r3, #5
 8003660:	b2db      	uxtb	r3, r3
 8003662:	f043 0302 	orr.w	r3, r3, #2
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d102      	bne.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800366c:	4b39      	ldr	r3, [pc, #228]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	e007      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003672:	2302      	movs	r3, #2
 8003674:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	fa93 f3a3 	rbit	r3, r3
 800367c:	617b      	str	r3, [r7, #20]
 800367e:	4b35      	ldr	r3, [pc, #212]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	2202      	movs	r2, #2
 8003684:	613a      	str	r2, [r7, #16]
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	fa92 f2a2 	rbit	r2, r2
 800368c:	60fa      	str	r2, [r7, #12]
  return result;
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	fab2 f282 	clz	r2, r2
 8003694:	b2d2      	uxtb	r2, r2
 8003696:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	f002 021f 	and.w	r2, r2, #31
 80036a0:	2101      	movs	r1, #1
 80036a2:	fa01 f202 	lsl.w	r2, r1, r2
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0bd      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80036ac:	4b29      	ldr	r3, [pc, #164]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	4926      	ldr	r1, [pc, #152]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d105      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036c6:	4b23      	ldr	r3, [pc, #140]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	4a22      	ldr	r2, [pc, #136]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036d0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d008      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036de:	4b1d      	ldr	r3, [pc, #116]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	f023 0203 	bic.w	r2, r3, #3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	491a      	ldr	r1, [pc, #104]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0320 	and.w	r3, r3, #32
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d008      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036fc:	4b15      	ldr	r3, [pc, #84]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003700:	f023 0210 	bic.w	r2, r3, #16
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	4912      	ldr	r1, [pc, #72]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800370a:	4313      	orrs	r3, r2
 800370c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003716:	2b00      	cmp	r3, #0
 8003718:	d008      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800371a:	4b0e      	ldr	r3, [pc, #56]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800371c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	490b      	ldr	r1, [pc, #44]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003728:	4313      	orrs	r3, r2
 800372a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d008      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003738:	4b06      	ldr	r3, [pc, #24]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800373a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	4903      	ldr	r1, [pc, #12]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003746:	4313      	orrs	r3, r2
 8003748:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3748      	adds	r7, #72	; 0x48
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40021000 	.word	0x40021000
 8003758:	40007000 	.word	0x40007000
 800375c:	10908100 	.word	0x10908100

08003760 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e040      	b.n	80037f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003776:	2b00      	cmp	r3, #0
 8003778:	d106      	bne.n	8003788 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7fd fbd8 	bl	8000f38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2224      	movs	r2, #36	; 0x24
 800378c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0201 	bic.w	r2, r2, #1
 800379c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f82c 	bl	80037fc <UART_SetConfig>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d101      	bne.n	80037ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e022      	b.n	80037f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d002      	beq.n	80037bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f956 	bl	8003a68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0201 	orr.w	r2, r2, #1
 80037ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f9dd 	bl	8003bac <UART_CheckIdleState>
 80037f2:	4603      	mov	r3, r0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b088      	sub	sp, #32
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003804:	2300      	movs	r3, #0
 8003806:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	431a      	orrs	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	4313      	orrs	r3, r2
 800381e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	4b8a      	ldr	r3, [pc, #552]	; (8003a50 <UART_SetConfig+0x254>)
 8003828:	4013      	ands	r3, r2
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6812      	ldr	r2, [r2, #0]
 800382e:	6979      	ldr	r1, [r7, #20]
 8003830:	430b      	orrs	r3, r1
 8003832:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68da      	ldr	r2, [r3, #12]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	4313      	orrs	r3, r2
 8003858:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	430a      	orrs	r2, r1
 800386c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a78      	ldr	r2, [pc, #480]	; (8003a54 <UART_SetConfig+0x258>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d120      	bne.n	80038ba <UART_SetConfig+0xbe>
 8003878:	4b77      	ldr	r3, [pc, #476]	; (8003a58 <UART_SetConfig+0x25c>)
 800387a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387c:	f003 0303 	and.w	r3, r3, #3
 8003880:	2b03      	cmp	r3, #3
 8003882:	d817      	bhi.n	80038b4 <UART_SetConfig+0xb8>
 8003884:	a201      	add	r2, pc, #4	; (adr r2, 800388c <UART_SetConfig+0x90>)
 8003886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388a:	bf00      	nop
 800388c:	0800389d 	.word	0x0800389d
 8003890:	080038a9 	.word	0x080038a9
 8003894:	080038af 	.word	0x080038af
 8003898:	080038a3 	.word	0x080038a3
 800389c:	2300      	movs	r3, #0
 800389e:	77fb      	strb	r3, [r7, #31]
 80038a0:	e01d      	b.n	80038de <UART_SetConfig+0xe2>
 80038a2:	2302      	movs	r3, #2
 80038a4:	77fb      	strb	r3, [r7, #31]
 80038a6:	e01a      	b.n	80038de <UART_SetConfig+0xe2>
 80038a8:	2304      	movs	r3, #4
 80038aa:	77fb      	strb	r3, [r7, #31]
 80038ac:	e017      	b.n	80038de <UART_SetConfig+0xe2>
 80038ae:	2308      	movs	r3, #8
 80038b0:	77fb      	strb	r3, [r7, #31]
 80038b2:	e014      	b.n	80038de <UART_SetConfig+0xe2>
 80038b4:	2310      	movs	r3, #16
 80038b6:	77fb      	strb	r3, [r7, #31]
 80038b8:	e011      	b.n	80038de <UART_SetConfig+0xe2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a67      	ldr	r2, [pc, #412]	; (8003a5c <UART_SetConfig+0x260>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d102      	bne.n	80038ca <UART_SetConfig+0xce>
 80038c4:	2300      	movs	r3, #0
 80038c6:	77fb      	strb	r3, [r7, #31]
 80038c8:	e009      	b.n	80038de <UART_SetConfig+0xe2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a64      	ldr	r2, [pc, #400]	; (8003a60 <UART_SetConfig+0x264>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d102      	bne.n	80038da <UART_SetConfig+0xde>
 80038d4:	2300      	movs	r3, #0
 80038d6:	77fb      	strb	r3, [r7, #31]
 80038d8:	e001      	b.n	80038de <UART_SetConfig+0xe2>
 80038da:	2310      	movs	r3, #16
 80038dc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038e6:	d15b      	bne.n	80039a0 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80038e8:	7ffb      	ldrb	r3, [r7, #31]
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d827      	bhi.n	800393e <UART_SetConfig+0x142>
 80038ee:	a201      	add	r2, pc, #4	; (adr r2, 80038f4 <UART_SetConfig+0xf8>)
 80038f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f4:	08003919 	.word	0x08003919
 80038f8:	08003921 	.word	0x08003921
 80038fc:	08003929 	.word	0x08003929
 8003900:	0800393f 	.word	0x0800393f
 8003904:	0800392f 	.word	0x0800392f
 8003908:	0800393f 	.word	0x0800393f
 800390c:	0800393f 	.word	0x0800393f
 8003910:	0800393f 	.word	0x0800393f
 8003914:	08003937 	.word	0x08003937
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003918:	f7ff fdb8 	bl	800348c <HAL_RCC_GetPCLK1Freq>
 800391c:	61b8      	str	r0, [r7, #24]
        break;
 800391e:	e013      	b.n	8003948 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003920:	f7ff fdd6 	bl	80034d0 <HAL_RCC_GetPCLK2Freq>
 8003924:	61b8      	str	r0, [r7, #24]
        break;
 8003926:	e00f      	b.n	8003948 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003928:	4b4e      	ldr	r3, [pc, #312]	; (8003a64 <UART_SetConfig+0x268>)
 800392a:	61bb      	str	r3, [r7, #24]
        break;
 800392c:	e00c      	b.n	8003948 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800392e:	f7ff fd37 	bl	80033a0 <HAL_RCC_GetSysClockFreq>
 8003932:	61b8      	str	r0, [r7, #24]
        break;
 8003934:	e008      	b.n	8003948 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800393a:	61bb      	str	r3, [r7, #24]
        break;
 800393c:	e004      	b.n	8003948 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800393e:	2300      	movs	r3, #0
 8003940:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	77bb      	strb	r3, [r7, #30]
        break;
 8003946:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d074      	beq.n	8003a38 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	005a      	lsls	r2, r3, #1
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	085b      	lsrs	r3, r3, #1
 8003958:	441a      	add	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003962:	b29b      	uxth	r3, r3
 8003964:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	2b0f      	cmp	r3, #15
 800396a:	d916      	bls.n	800399a <UART_SetConfig+0x19e>
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003972:	d212      	bcs.n	800399a <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	b29b      	uxth	r3, r3
 8003978:	f023 030f 	bic.w	r3, r3, #15
 800397c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	085b      	lsrs	r3, r3, #1
 8003982:	b29b      	uxth	r3, r3
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	b29a      	uxth	r2, r3
 800398a:	89fb      	ldrh	r3, [r7, #14]
 800398c:	4313      	orrs	r3, r2
 800398e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	89fa      	ldrh	r2, [r7, #14]
 8003996:	60da      	str	r2, [r3, #12]
 8003998:	e04e      	b.n	8003a38 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	77bb      	strb	r3, [r7, #30]
 800399e:	e04b      	b.n	8003a38 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039a0:	7ffb      	ldrb	r3, [r7, #31]
 80039a2:	2b08      	cmp	r3, #8
 80039a4:	d827      	bhi.n	80039f6 <UART_SetConfig+0x1fa>
 80039a6:	a201      	add	r2, pc, #4	; (adr r2, 80039ac <UART_SetConfig+0x1b0>)
 80039a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ac:	080039d1 	.word	0x080039d1
 80039b0:	080039d9 	.word	0x080039d9
 80039b4:	080039e1 	.word	0x080039e1
 80039b8:	080039f7 	.word	0x080039f7
 80039bc:	080039e7 	.word	0x080039e7
 80039c0:	080039f7 	.word	0x080039f7
 80039c4:	080039f7 	.word	0x080039f7
 80039c8:	080039f7 	.word	0x080039f7
 80039cc:	080039ef 	.word	0x080039ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039d0:	f7ff fd5c 	bl	800348c <HAL_RCC_GetPCLK1Freq>
 80039d4:	61b8      	str	r0, [r7, #24]
        break;
 80039d6:	e013      	b.n	8003a00 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039d8:	f7ff fd7a 	bl	80034d0 <HAL_RCC_GetPCLK2Freq>
 80039dc:	61b8      	str	r0, [r7, #24]
        break;
 80039de:	e00f      	b.n	8003a00 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039e0:	4b20      	ldr	r3, [pc, #128]	; (8003a64 <UART_SetConfig+0x268>)
 80039e2:	61bb      	str	r3, [r7, #24]
        break;
 80039e4:	e00c      	b.n	8003a00 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039e6:	f7ff fcdb 	bl	80033a0 <HAL_RCC_GetSysClockFreq>
 80039ea:	61b8      	str	r0, [r7, #24]
        break;
 80039ec:	e008      	b.n	8003a00 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039f2:	61bb      	str	r3, [r7, #24]
        break;
 80039f4:	e004      	b.n	8003a00 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80039f6:	2300      	movs	r3, #0
 80039f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	77bb      	strb	r3, [r7, #30]
        break;
 80039fe:	bf00      	nop
    }

    if (pclk != 0U)
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d018      	beq.n	8003a38 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	085a      	lsrs	r2, r3, #1
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	441a      	add	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	2b0f      	cmp	r3, #15
 8003a20:	d908      	bls.n	8003a34 <UART_SetConfig+0x238>
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a28:	d204      	bcs.n	8003a34 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	60da      	str	r2, [r3, #12]
 8003a32:	e001      	b.n	8003a38 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003a44:	7fbb      	ldrb	r3, [r7, #30]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3720      	adds	r7, #32
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	efff69f3 	.word	0xefff69f3
 8003a54:	40013800 	.word	0x40013800
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	40004400 	.word	0x40004400
 8003a60:	40004800 	.word	0x40004800
 8003a64:	007a1200 	.word	0x007a1200

08003a68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00a      	beq.n	8003a92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00a      	beq.n	8003ab4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00a      	beq.n	8003ad6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00a      	beq.n	8003af8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	f003 0310 	and.w	r3, r3, #16
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00a      	beq.n	8003b1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	f003 0320 	and.w	r3, r3, #32
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d01a      	beq.n	8003b7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b66:	d10a      	bne.n	8003b7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00a      	beq.n	8003ba0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	605a      	str	r2, [r3, #4]
  }
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af02      	add	r7, sp, #8
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bbc:	f7fd fb86 	bl	80012cc <HAL_GetTick>
 8003bc0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0308 	and.w	r3, r3, #8
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d10e      	bne.n	8003bee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f82d 	bl	8003c3e <UART_WaitOnFlagUntilTimeout>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e023      	b.n	8003c36 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0304 	and.w	r3, r3, #4
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	d10e      	bne.n	8003c1a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f817 	bl	8003c3e <UART_WaitOnFlagUntilTimeout>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e00d      	b.n	8003c36 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2220      	movs	r2, #32
 8003c24:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b09c      	sub	sp, #112	; 0x70
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	60f8      	str	r0, [r7, #12]
 8003c46:	60b9      	str	r1, [r7, #8]
 8003c48:	603b      	str	r3, [r7, #0]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c4e:	e0a5      	b.n	8003d9c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c56:	f000 80a1 	beq.w	8003d9c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c5a:	f7fd fb37 	bl	80012cc <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d302      	bcc.n	8003c70 <UART_WaitOnFlagUntilTimeout+0x32>
 8003c6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d13e      	bne.n	8003cee <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c78:	e853 3f00 	ldrex	r3, [r3]
 8003c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c84:	667b      	str	r3, [r7, #100]	; 0x64
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c90:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003c94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c96:	e841 2300 	strex	r3, r2, [r1]
 8003c9a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003c9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1e6      	bne.n	8003c70 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	3308      	adds	r3, #8
 8003ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cac:	e853 3f00 	ldrex	r3, [r3]
 8003cb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb4:	f023 0301 	bic.w	r3, r3, #1
 8003cb8:	663b      	str	r3, [r7, #96]	; 0x60
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	3308      	adds	r3, #8
 8003cc0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003cc2:	64ba      	str	r2, [r7, #72]	; 0x48
 8003cc4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003cc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cca:	e841 2300 	strex	r3, r2, [r1]
 8003cce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1e5      	bne.n	8003ca2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e067      	b.n	8003dbe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d04f      	beq.n	8003d9c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d0a:	d147      	bne.n	8003d9c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d14:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1e:	e853 3f00 	ldrex	r3, [r3]
 8003d22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d26:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	461a      	mov	r2, r3
 8003d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d34:	637b      	str	r3, [r7, #52]	; 0x34
 8003d36:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d3c:	e841 2300 	strex	r3, r2, [r1]
 8003d40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1e6      	bne.n	8003d16 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	3308      	adds	r3, #8
 8003d4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	e853 3f00 	ldrex	r3, [r3]
 8003d56:	613b      	str	r3, [r7, #16]
   return(result);
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	f023 0301 	bic.w	r3, r3, #1
 8003d5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	3308      	adds	r3, #8
 8003d66:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d68:	623a      	str	r2, [r7, #32]
 8003d6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6c:	69f9      	ldr	r1, [r7, #28]
 8003d6e:	6a3a      	ldr	r2, [r7, #32]
 8003d70:	e841 2300 	strex	r3, r2, [r1]
 8003d74:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1e5      	bne.n	8003d48 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2220      	movs	r2, #32
 8003d86:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e010      	b.n	8003dbe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	69da      	ldr	r2, [r3, #28]
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	4013      	ands	r3, r2
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	bf0c      	ite	eq
 8003dac:	2301      	moveq	r3, #1
 8003dae:	2300      	movne	r3, #0
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	461a      	mov	r2, r3
 8003db4:	79fb      	ldrb	r3, [r7, #7]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	f43f af4a 	beq.w	8003c50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3770      	adds	r7, #112	; 0x70
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
	...

08003dc8 <__errno>:
 8003dc8:	4b01      	ldr	r3, [pc, #4]	; (8003dd0 <__errno+0x8>)
 8003dca:	6818      	ldr	r0, [r3, #0]
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	2000000c 	.word	0x2000000c

08003dd4 <__libc_init_array>:
 8003dd4:	b570      	push	{r4, r5, r6, lr}
 8003dd6:	4d0d      	ldr	r5, [pc, #52]	; (8003e0c <__libc_init_array+0x38>)
 8003dd8:	4c0d      	ldr	r4, [pc, #52]	; (8003e10 <__libc_init_array+0x3c>)
 8003dda:	1b64      	subs	r4, r4, r5
 8003ddc:	10a4      	asrs	r4, r4, #2
 8003dde:	2600      	movs	r6, #0
 8003de0:	42a6      	cmp	r6, r4
 8003de2:	d109      	bne.n	8003df8 <__libc_init_array+0x24>
 8003de4:	4d0b      	ldr	r5, [pc, #44]	; (8003e14 <__libc_init_array+0x40>)
 8003de6:	4c0c      	ldr	r4, [pc, #48]	; (8003e18 <__libc_init_array+0x44>)
 8003de8:	f002 fcf0 	bl	80067cc <_init>
 8003dec:	1b64      	subs	r4, r4, r5
 8003dee:	10a4      	asrs	r4, r4, #2
 8003df0:	2600      	movs	r6, #0
 8003df2:	42a6      	cmp	r6, r4
 8003df4:	d105      	bne.n	8003e02 <__libc_init_array+0x2e>
 8003df6:	bd70      	pop	{r4, r5, r6, pc}
 8003df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dfc:	4798      	blx	r3
 8003dfe:	3601      	adds	r6, #1
 8003e00:	e7ee      	b.n	8003de0 <__libc_init_array+0xc>
 8003e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e06:	4798      	blx	r3
 8003e08:	3601      	adds	r6, #1
 8003e0a:	e7f2      	b.n	8003df2 <__libc_init_array+0x1e>
 8003e0c:	08006c04 	.word	0x08006c04
 8003e10:	08006c04 	.word	0x08006c04
 8003e14:	08006c04 	.word	0x08006c04
 8003e18:	08006c08 	.word	0x08006c08

08003e1c <memset>:
 8003e1c:	4402      	add	r2, r0
 8003e1e:	4603      	mov	r3, r0
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d100      	bne.n	8003e26 <memset+0xa>
 8003e24:	4770      	bx	lr
 8003e26:	f803 1b01 	strb.w	r1, [r3], #1
 8003e2a:	e7f9      	b.n	8003e20 <memset+0x4>

08003e2c <__cvt>:
 8003e2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e30:	ec55 4b10 	vmov	r4, r5, d0
 8003e34:	2d00      	cmp	r5, #0
 8003e36:	460e      	mov	r6, r1
 8003e38:	4619      	mov	r1, r3
 8003e3a:	462b      	mov	r3, r5
 8003e3c:	bfbb      	ittet	lt
 8003e3e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003e42:	461d      	movlt	r5, r3
 8003e44:	2300      	movge	r3, #0
 8003e46:	232d      	movlt	r3, #45	; 0x2d
 8003e48:	700b      	strb	r3, [r1, #0]
 8003e4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e4c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003e50:	4691      	mov	r9, r2
 8003e52:	f023 0820 	bic.w	r8, r3, #32
 8003e56:	bfbc      	itt	lt
 8003e58:	4622      	movlt	r2, r4
 8003e5a:	4614      	movlt	r4, r2
 8003e5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003e60:	d005      	beq.n	8003e6e <__cvt+0x42>
 8003e62:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003e66:	d100      	bne.n	8003e6a <__cvt+0x3e>
 8003e68:	3601      	adds	r6, #1
 8003e6a:	2102      	movs	r1, #2
 8003e6c:	e000      	b.n	8003e70 <__cvt+0x44>
 8003e6e:	2103      	movs	r1, #3
 8003e70:	ab03      	add	r3, sp, #12
 8003e72:	9301      	str	r3, [sp, #4]
 8003e74:	ab02      	add	r3, sp, #8
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	ec45 4b10 	vmov	d0, r4, r5
 8003e7c:	4653      	mov	r3, sl
 8003e7e:	4632      	mov	r2, r6
 8003e80:	f000 fcca 	bl	8004818 <_dtoa_r>
 8003e84:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003e88:	4607      	mov	r7, r0
 8003e8a:	d102      	bne.n	8003e92 <__cvt+0x66>
 8003e8c:	f019 0f01 	tst.w	r9, #1
 8003e90:	d022      	beq.n	8003ed8 <__cvt+0xac>
 8003e92:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003e96:	eb07 0906 	add.w	r9, r7, r6
 8003e9a:	d110      	bne.n	8003ebe <__cvt+0x92>
 8003e9c:	783b      	ldrb	r3, [r7, #0]
 8003e9e:	2b30      	cmp	r3, #48	; 0x30
 8003ea0:	d10a      	bne.n	8003eb8 <__cvt+0x8c>
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	4620      	mov	r0, r4
 8003ea8:	4629      	mov	r1, r5
 8003eaa:	f7fc fe0d 	bl	8000ac8 <__aeabi_dcmpeq>
 8003eae:	b918      	cbnz	r0, 8003eb8 <__cvt+0x8c>
 8003eb0:	f1c6 0601 	rsb	r6, r6, #1
 8003eb4:	f8ca 6000 	str.w	r6, [sl]
 8003eb8:	f8da 3000 	ldr.w	r3, [sl]
 8003ebc:	4499      	add	r9, r3
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	4620      	mov	r0, r4
 8003ec4:	4629      	mov	r1, r5
 8003ec6:	f7fc fdff 	bl	8000ac8 <__aeabi_dcmpeq>
 8003eca:	b108      	cbz	r0, 8003ed0 <__cvt+0xa4>
 8003ecc:	f8cd 900c 	str.w	r9, [sp, #12]
 8003ed0:	2230      	movs	r2, #48	; 0x30
 8003ed2:	9b03      	ldr	r3, [sp, #12]
 8003ed4:	454b      	cmp	r3, r9
 8003ed6:	d307      	bcc.n	8003ee8 <__cvt+0xbc>
 8003ed8:	9b03      	ldr	r3, [sp, #12]
 8003eda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003edc:	1bdb      	subs	r3, r3, r7
 8003ede:	4638      	mov	r0, r7
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	b004      	add	sp, #16
 8003ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ee8:	1c59      	adds	r1, r3, #1
 8003eea:	9103      	str	r1, [sp, #12]
 8003eec:	701a      	strb	r2, [r3, #0]
 8003eee:	e7f0      	b.n	8003ed2 <__cvt+0xa6>

08003ef0 <__exponent>:
 8003ef0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2900      	cmp	r1, #0
 8003ef6:	bfb8      	it	lt
 8003ef8:	4249      	neglt	r1, r1
 8003efa:	f803 2b02 	strb.w	r2, [r3], #2
 8003efe:	bfb4      	ite	lt
 8003f00:	222d      	movlt	r2, #45	; 0x2d
 8003f02:	222b      	movge	r2, #43	; 0x2b
 8003f04:	2909      	cmp	r1, #9
 8003f06:	7042      	strb	r2, [r0, #1]
 8003f08:	dd2a      	ble.n	8003f60 <__exponent+0x70>
 8003f0a:	f10d 0407 	add.w	r4, sp, #7
 8003f0e:	46a4      	mov	ip, r4
 8003f10:	270a      	movs	r7, #10
 8003f12:	46a6      	mov	lr, r4
 8003f14:	460a      	mov	r2, r1
 8003f16:	fb91 f6f7 	sdiv	r6, r1, r7
 8003f1a:	fb07 1516 	mls	r5, r7, r6, r1
 8003f1e:	3530      	adds	r5, #48	; 0x30
 8003f20:	2a63      	cmp	r2, #99	; 0x63
 8003f22:	f104 34ff 	add.w	r4, r4, #4294967295
 8003f26:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003f2a:	4631      	mov	r1, r6
 8003f2c:	dcf1      	bgt.n	8003f12 <__exponent+0x22>
 8003f2e:	3130      	adds	r1, #48	; 0x30
 8003f30:	f1ae 0502 	sub.w	r5, lr, #2
 8003f34:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003f38:	1c44      	adds	r4, r0, #1
 8003f3a:	4629      	mov	r1, r5
 8003f3c:	4561      	cmp	r1, ip
 8003f3e:	d30a      	bcc.n	8003f56 <__exponent+0x66>
 8003f40:	f10d 0209 	add.w	r2, sp, #9
 8003f44:	eba2 020e 	sub.w	r2, r2, lr
 8003f48:	4565      	cmp	r5, ip
 8003f4a:	bf88      	it	hi
 8003f4c:	2200      	movhi	r2, #0
 8003f4e:	4413      	add	r3, r2
 8003f50:	1a18      	subs	r0, r3, r0
 8003f52:	b003      	add	sp, #12
 8003f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f5a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003f5e:	e7ed      	b.n	8003f3c <__exponent+0x4c>
 8003f60:	2330      	movs	r3, #48	; 0x30
 8003f62:	3130      	adds	r1, #48	; 0x30
 8003f64:	7083      	strb	r3, [r0, #2]
 8003f66:	70c1      	strb	r1, [r0, #3]
 8003f68:	1d03      	adds	r3, r0, #4
 8003f6a:	e7f1      	b.n	8003f50 <__exponent+0x60>

08003f6c <_printf_float>:
 8003f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f70:	ed2d 8b02 	vpush	{d8}
 8003f74:	b08d      	sub	sp, #52	; 0x34
 8003f76:	460c      	mov	r4, r1
 8003f78:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003f7c:	4616      	mov	r6, r2
 8003f7e:	461f      	mov	r7, r3
 8003f80:	4605      	mov	r5, r0
 8003f82:	f001 fa35 	bl	80053f0 <_localeconv_r>
 8003f86:	f8d0 a000 	ldr.w	sl, [r0]
 8003f8a:	4650      	mov	r0, sl
 8003f8c:	f7fc f920 	bl	80001d0 <strlen>
 8003f90:	2300      	movs	r3, #0
 8003f92:	930a      	str	r3, [sp, #40]	; 0x28
 8003f94:	6823      	ldr	r3, [r4, #0]
 8003f96:	9305      	str	r3, [sp, #20]
 8003f98:	f8d8 3000 	ldr.w	r3, [r8]
 8003f9c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003fa0:	3307      	adds	r3, #7
 8003fa2:	f023 0307 	bic.w	r3, r3, #7
 8003fa6:	f103 0208 	add.w	r2, r3, #8
 8003faa:	f8c8 2000 	str.w	r2, [r8]
 8003fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003fb6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003fba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003fbe:	9307      	str	r3, [sp, #28]
 8003fc0:	f8cd 8018 	str.w	r8, [sp, #24]
 8003fc4:	ee08 0a10 	vmov	s16, r0
 8003fc8:	4b9f      	ldr	r3, [pc, #636]	; (8004248 <_printf_float+0x2dc>)
 8003fca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003fce:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd2:	f7fc fdab 	bl	8000b2c <__aeabi_dcmpun>
 8003fd6:	bb88      	cbnz	r0, 800403c <_printf_float+0xd0>
 8003fd8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003fdc:	4b9a      	ldr	r3, [pc, #616]	; (8004248 <_printf_float+0x2dc>)
 8003fde:	f04f 32ff 	mov.w	r2, #4294967295
 8003fe2:	f7fc fd85 	bl	8000af0 <__aeabi_dcmple>
 8003fe6:	bb48      	cbnz	r0, 800403c <_printf_float+0xd0>
 8003fe8:	2200      	movs	r2, #0
 8003fea:	2300      	movs	r3, #0
 8003fec:	4640      	mov	r0, r8
 8003fee:	4649      	mov	r1, r9
 8003ff0:	f7fc fd74 	bl	8000adc <__aeabi_dcmplt>
 8003ff4:	b110      	cbz	r0, 8003ffc <_printf_float+0x90>
 8003ff6:	232d      	movs	r3, #45	; 0x2d
 8003ff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ffc:	4b93      	ldr	r3, [pc, #588]	; (800424c <_printf_float+0x2e0>)
 8003ffe:	4894      	ldr	r0, [pc, #592]	; (8004250 <_printf_float+0x2e4>)
 8004000:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004004:	bf94      	ite	ls
 8004006:	4698      	movls	r8, r3
 8004008:	4680      	movhi	r8, r0
 800400a:	2303      	movs	r3, #3
 800400c:	6123      	str	r3, [r4, #16]
 800400e:	9b05      	ldr	r3, [sp, #20]
 8004010:	f023 0204 	bic.w	r2, r3, #4
 8004014:	6022      	str	r2, [r4, #0]
 8004016:	f04f 0900 	mov.w	r9, #0
 800401a:	9700      	str	r7, [sp, #0]
 800401c:	4633      	mov	r3, r6
 800401e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004020:	4621      	mov	r1, r4
 8004022:	4628      	mov	r0, r5
 8004024:	f000 f9d8 	bl	80043d8 <_printf_common>
 8004028:	3001      	adds	r0, #1
 800402a:	f040 8090 	bne.w	800414e <_printf_float+0x1e2>
 800402e:	f04f 30ff 	mov.w	r0, #4294967295
 8004032:	b00d      	add	sp, #52	; 0x34
 8004034:	ecbd 8b02 	vpop	{d8}
 8004038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800403c:	4642      	mov	r2, r8
 800403e:	464b      	mov	r3, r9
 8004040:	4640      	mov	r0, r8
 8004042:	4649      	mov	r1, r9
 8004044:	f7fc fd72 	bl	8000b2c <__aeabi_dcmpun>
 8004048:	b140      	cbz	r0, 800405c <_printf_float+0xf0>
 800404a:	464b      	mov	r3, r9
 800404c:	2b00      	cmp	r3, #0
 800404e:	bfbc      	itt	lt
 8004050:	232d      	movlt	r3, #45	; 0x2d
 8004052:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004056:	487f      	ldr	r0, [pc, #508]	; (8004254 <_printf_float+0x2e8>)
 8004058:	4b7f      	ldr	r3, [pc, #508]	; (8004258 <_printf_float+0x2ec>)
 800405a:	e7d1      	b.n	8004000 <_printf_float+0x94>
 800405c:	6863      	ldr	r3, [r4, #4]
 800405e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004062:	9206      	str	r2, [sp, #24]
 8004064:	1c5a      	adds	r2, r3, #1
 8004066:	d13f      	bne.n	80040e8 <_printf_float+0x17c>
 8004068:	2306      	movs	r3, #6
 800406a:	6063      	str	r3, [r4, #4]
 800406c:	9b05      	ldr	r3, [sp, #20]
 800406e:	6861      	ldr	r1, [r4, #4]
 8004070:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004074:	2300      	movs	r3, #0
 8004076:	9303      	str	r3, [sp, #12]
 8004078:	ab0a      	add	r3, sp, #40	; 0x28
 800407a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800407e:	ab09      	add	r3, sp, #36	; 0x24
 8004080:	ec49 8b10 	vmov	d0, r8, r9
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	6022      	str	r2, [r4, #0]
 8004088:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800408c:	4628      	mov	r0, r5
 800408e:	f7ff fecd 	bl	8003e2c <__cvt>
 8004092:	9b06      	ldr	r3, [sp, #24]
 8004094:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004096:	2b47      	cmp	r3, #71	; 0x47
 8004098:	4680      	mov	r8, r0
 800409a:	d108      	bne.n	80040ae <_printf_float+0x142>
 800409c:	1cc8      	adds	r0, r1, #3
 800409e:	db02      	blt.n	80040a6 <_printf_float+0x13a>
 80040a0:	6863      	ldr	r3, [r4, #4]
 80040a2:	4299      	cmp	r1, r3
 80040a4:	dd41      	ble.n	800412a <_printf_float+0x1be>
 80040a6:	f1ab 0b02 	sub.w	fp, fp, #2
 80040aa:	fa5f fb8b 	uxtb.w	fp, fp
 80040ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80040b2:	d820      	bhi.n	80040f6 <_printf_float+0x18a>
 80040b4:	3901      	subs	r1, #1
 80040b6:	465a      	mov	r2, fp
 80040b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80040bc:	9109      	str	r1, [sp, #36]	; 0x24
 80040be:	f7ff ff17 	bl	8003ef0 <__exponent>
 80040c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80040c4:	1813      	adds	r3, r2, r0
 80040c6:	2a01      	cmp	r2, #1
 80040c8:	4681      	mov	r9, r0
 80040ca:	6123      	str	r3, [r4, #16]
 80040cc:	dc02      	bgt.n	80040d4 <_printf_float+0x168>
 80040ce:	6822      	ldr	r2, [r4, #0]
 80040d0:	07d2      	lsls	r2, r2, #31
 80040d2:	d501      	bpl.n	80040d8 <_printf_float+0x16c>
 80040d4:	3301      	adds	r3, #1
 80040d6:	6123      	str	r3, [r4, #16]
 80040d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d09c      	beq.n	800401a <_printf_float+0xae>
 80040e0:	232d      	movs	r3, #45	; 0x2d
 80040e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040e6:	e798      	b.n	800401a <_printf_float+0xae>
 80040e8:	9a06      	ldr	r2, [sp, #24]
 80040ea:	2a47      	cmp	r2, #71	; 0x47
 80040ec:	d1be      	bne.n	800406c <_printf_float+0x100>
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1bc      	bne.n	800406c <_printf_float+0x100>
 80040f2:	2301      	movs	r3, #1
 80040f4:	e7b9      	b.n	800406a <_printf_float+0xfe>
 80040f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80040fa:	d118      	bne.n	800412e <_printf_float+0x1c2>
 80040fc:	2900      	cmp	r1, #0
 80040fe:	6863      	ldr	r3, [r4, #4]
 8004100:	dd0b      	ble.n	800411a <_printf_float+0x1ae>
 8004102:	6121      	str	r1, [r4, #16]
 8004104:	b913      	cbnz	r3, 800410c <_printf_float+0x1a0>
 8004106:	6822      	ldr	r2, [r4, #0]
 8004108:	07d0      	lsls	r0, r2, #31
 800410a:	d502      	bpl.n	8004112 <_printf_float+0x1a6>
 800410c:	3301      	adds	r3, #1
 800410e:	440b      	add	r3, r1
 8004110:	6123      	str	r3, [r4, #16]
 8004112:	65a1      	str	r1, [r4, #88]	; 0x58
 8004114:	f04f 0900 	mov.w	r9, #0
 8004118:	e7de      	b.n	80040d8 <_printf_float+0x16c>
 800411a:	b913      	cbnz	r3, 8004122 <_printf_float+0x1b6>
 800411c:	6822      	ldr	r2, [r4, #0]
 800411e:	07d2      	lsls	r2, r2, #31
 8004120:	d501      	bpl.n	8004126 <_printf_float+0x1ba>
 8004122:	3302      	adds	r3, #2
 8004124:	e7f4      	b.n	8004110 <_printf_float+0x1a4>
 8004126:	2301      	movs	r3, #1
 8004128:	e7f2      	b.n	8004110 <_printf_float+0x1a4>
 800412a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800412e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004130:	4299      	cmp	r1, r3
 8004132:	db05      	blt.n	8004140 <_printf_float+0x1d4>
 8004134:	6823      	ldr	r3, [r4, #0]
 8004136:	6121      	str	r1, [r4, #16]
 8004138:	07d8      	lsls	r0, r3, #31
 800413a:	d5ea      	bpl.n	8004112 <_printf_float+0x1a6>
 800413c:	1c4b      	adds	r3, r1, #1
 800413e:	e7e7      	b.n	8004110 <_printf_float+0x1a4>
 8004140:	2900      	cmp	r1, #0
 8004142:	bfd4      	ite	le
 8004144:	f1c1 0202 	rsble	r2, r1, #2
 8004148:	2201      	movgt	r2, #1
 800414a:	4413      	add	r3, r2
 800414c:	e7e0      	b.n	8004110 <_printf_float+0x1a4>
 800414e:	6823      	ldr	r3, [r4, #0]
 8004150:	055a      	lsls	r2, r3, #21
 8004152:	d407      	bmi.n	8004164 <_printf_float+0x1f8>
 8004154:	6923      	ldr	r3, [r4, #16]
 8004156:	4642      	mov	r2, r8
 8004158:	4631      	mov	r1, r6
 800415a:	4628      	mov	r0, r5
 800415c:	47b8      	blx	r7
 800415e:	3001      	adds	r0, #1
 8004160:	d12c      	bne.n	80041bc <_printf_float+0x250>
 8004162:	e764      	b.n	800402e <_printf_float+0xc2>
 8004164:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004168:	f240 80e0 	bls.w	800432c <_printf_float+0x3c0>
 800416c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004170:	2200      	movs	r2, #0
 8004172:	2300      	movs	r3, #0
 8004174:	f7fc fca8 	bl	8000ac8 <__aeabi_dcmpeq>
 8004178:	2800      	cmp	r0, #0
 800417a:	d034      	beq.n	80041e6 <_printf_float+0x27a>
 800417c:	4a37      	ldr	r2, [pc, #220]	; (800425c <_printf_float+0x2f0>)
 800417e:	2301      	movs	r3, #1
 8004180:	4631      	mov	r1, r6
 8004182:	4628      	mov	r0, r5
 8004184:	47b8      	blx	r7
 8004186:	3001      	adds	r0, #1
 8004188:	f43f af51 	beq.w	800402e <_printf_float+0xc2>
 800418c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004190:	429a      	cmp	r2, r3
 8004192:	db02      	blt.n	800419a <_printf_float+0x22e>
 8004194:	6823      	ldr	r3, [r4, #0]
 8004196:	07d8      	lsls	r0, r3, #31
 8004198:	d510      	bpl.n	80041bc <_printf_float+0x250>
 800419a:	ee18 3a10 	vmov	r3, s16
 800419e:	4652      	mov	r2, sl
 80041a0:	4631      	mov	r1, r6
 80041a2:	4628      	mov	r0, r5
 80041a4:	47b8      	blx	r7
 80041a6:	3001      	adds	r0, #1
 80041a8:	f43f af41 	beq.w	800402e <_printf_float+0xc2>
 80041ac:	f04f 0800 	mov.w	r8, #0
 80041b0:	f104 091a 	add.w	r9, r4, #26
 80041b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041b6:	3b01      	subs	r3, #1
 80041b8:	4543      	cmp	r3, r8
 80041ba:	dc09      	bgt.n	80041d0 <_printf_float+0x264>
 80041bc:	6823      	ldr	r3, [r4, #0]
 80041be:	079b      	lsls	r3, r3, #30
 80041c0:	f100 8105 	bmi.w	80043ce <_printf_float+0x462>
 80041c4:	68e0      	ldr	r0, [r4, #12]
 80041c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80041c8:	4298      	cmp	r0, r3
 80041ca:	bfb8      	it	lt
 80041cc:	4618      	movlt	r0, r3
 80041ce:	e730      	b.n	8004032 <_printf_float+0xc6>
 80041d0:	2301      	movs	r3, #1
 80041d2:	464a      	mov	r2, r9
 80041d4:	4631      	mov	r1, r6
 80041d6:	4628      	mov	r0, r5
 80041d8:	47b8      	blx	r7
 80041da:	3001      	adds	r0, #1
 80041dc:	f43f af27 	beq.w	800402e <_printf_float+0xc2>
 80041e0:	f108 0801 	add.w	r8, r8, #1
 80041e4:	e7e6      	b.n	80041b4 <_printf_float+0x248>
 80041e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	dc39      	bgt.n	8004260 <_printf_float+0x2f4>
 80041ec:	4a1b      	ldr	r2, [pc, #108]	; (800425c <_printf_float+0x2f0>)
 80041ee:	2301      	movs	r3, #1
 80041f0:	4631      	mov	r1, r6
 80041f2:	4628      	mov	r0, r5
 80041f4:	47b8      	blx	r7
 80041f6:	3001      	adds	r0, #1
 80041f8:	f43f af19 	beq.w	800402e <_printf_float+0xc2>
 80041fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004200:	4313      	orrs	r3, r2
 8004202:	d102      	bne.n	800420a <_printf_float+0x29e>
 8004204:	6823      	ldr	r3, [r4, #0]
 8004206:	07d9      	lsls	r1, r3, #31
 8004208:	d5d8      	bpl.n	80041bc <_printf_float+0x250>
 800420a:	ee18 3a10 	vmov	r3, s16
 800420e:	4652      	mov	r2, sl
 8004210:	4631      	mov	r1, r6
 8004212:	4628      	mov	r0, r5
 8004214:	47b8      	blx	r7
 8004216:	3001      	adds	r0, #1
 8004218:	f43f af09 	beq.w	800402e <_printf_float+0xc2>
 800421c:	f04f 0900 	mov.w	r9, #0
 8004220:	f104 0a1a 	add.w	sl, r4, #26
 8004224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004226:	425b      	negs	r3, r3
 8004228:	454b      	cmp	r3, r9
 800422a:	dc01      	bgt.n	8004230 <_printf_float+0x2c4>
 800422c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800422e:	e792      	b.n	8004156 <_printf_float+0x1ea>
 8004230:	2301      	movs	r3, #1
 8004232:	4652      	mov	r2, sl
 8004234:	4631      	mov	r1, r6
 8004236:	4628      	mov	r0, r5
 8004238:	47b8      	blx	r7
 800423a:	3001      	adds	r0, #1
 800423c:	f43f aef7 	beq.w	800402e <_printf_float+0xc2>
 8004240:	f109 0901 	add.w	r9, r9, #1
 8004244:	e7ee      	b.n	8004224 <_printf_float+0x2b8>
 8004246:	bf00      	nop
 8004248:	7fefffff 	.word	0x7fefffff
 800424c:	08006824 	.word	0x08006824
 8004250:	08006828 	.word	0x08006828
 8004254:	08006830 	.word	0x08006830
 8004258:	0800682c 	.word	0x0800682c
 800425c:	08006834 	.word	0x08006834
 8004260:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004262:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004264:	429a      	cmp	r2, r3
 8004266:	bfa8      	it	ge
 8004268:	461a      	movge	r2, r3
 800426a:	2a00      	cmp	r2, #0
 800426c:	4691      	mov	r9, r2
 800426e:	dc37      	bgt.n	80042e0 <_printf_float+0x374>
 8004270:	f04f 0b00 	mov.w	fp, #0
 8004274:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004278:	f104 021a 	add.w	r2, r4, #26
 800427c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800427e:	9305      	str	r3, [sp, #20]
 8004280:	eba3 0309 	sub.w	r3, r3, r9
 8004284:	455b      	cmp	r3, fp
 8004286:	dc33      	bgt.n	80042f0 <_printf_float+0x384>
 8004288:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800428c:	429a      	cmp	r2, r3
 800428e:	db3b      	blt.n	8004308 <_printf_float+0x39c>
 8004290:	6823      	ldr	r3, [r4, #0]
 8004292:	07da      	lsls	r2, r3, #31
 8004294:	d438      	bmi.n	8004308 <_printf_float+0x39c>
 8004296:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004298:	9b05      	ldr	r3, [sp, #20]
 800429a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	eba2 0901 	sub.w	r9, r2, r1
 80042a2:	4599      	cmp	r9, r3
 80042a4:	bfa8      	it	ge
 80042a6:	4699      	movge	r9, r3
 80042a8:	f1b9 0f00 	cmp.w	r9, #0
 80042ac:	dc35      	bgt.n	800431a <_printf_float+0x3ae>
 80042ae:	f04f 0800 	mov.w	r8, #0
 80042b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80042b6:	f104 0a1a 	add.w	sl, r4, #26
 80042ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042be:	1a9b      	subs	r3, r3, r2
 80042c0:	eba3 0309 	sub.w	r3, r3, r9
 80042c4:	4543      	cmp	r3, r8
 80042c6:	f77f af79 	ble.w	80041bc <_printf_float+0x250>
 80042ca:	2301      	movs	r3, #1
 80042cc:	4652      	mov	r2, sl
 80042ce:	4631      	mov	r1, r6
 80042d0:	4628      	mov	r0, r5
 80042d2:	47b8      	blx	r7
 80042d4:	3001      	adds	r0, #1
 80042d6:	f43f aeaa 	beq.w	800402e <_printf_float+0xc2>
 80042da:	f108 0801 	add.w	r8, r8, #1
 80042de:	e7ec      	b.n	80042ba <_printf_float+0x34e>
 80042e0:	4613      	mov	r3, r2
 80042e2:	4631      	mov	r1, r6
 80042e4:	4642      	mov	r2, r8
 80042e6:	4628      	mov	r0, r5
 80042e8:	47b8      	blx	r7
 80042ea:	3001      	adds	r0, #1
 80042ec:	d1c0      	bne.n	8004270 <_printf_float+0x304>
 80042ee:	e69e      	b.n	800402e <_printf_float+0xc2>
 80042f0:	2301      	movs	r3, #1
 80042f2:	4631      	mov	r1, r6
 80042f4:	4628      	mov	r0, r5
 80042f6:	9205      	str	r2, [sp, #20]
 80042f8:	47b8      	blx	r7
 80042fa:	3001      	adds	r0, #1
 80042fc:	f43f ae97 	beq.w	800402e <_printf_float+0xc2>
 8004300:	9a05      	ldr	r2, [sp, #20]
 8004302:	f10b 0b01 	add.w	fp, fp, #1
 8004306:	e7b9      	b.n	800427c <_printf_float+0x310>
 8004308:	ee18 3a10 	vmov	r3, s16
 800430c:	4652      	mov	r2, sl
 800430e:	4631      	mov	r1, r6
 8004310:	4628      	mov	r0, r5
 8004312:	47b8      	blx	r7
 8004314:	3001      	adds	r0, #1
 8004316:	d1be      	bne.n	8004296 <_printf_float+0x32a>
 8004318:	e689      	b.n	800402e <_printf_float+0xc2>
 800431a:	9a05      	ldr	r2, [sp, #20]
 800431c:	464b      	mov	r3, r9
 800431e:	4442      	add	r2, r8
 8004320:	4631      	mov	r1, r6
 8004322:	4628      	mov	r0, r5
 8004324:	47b8      	blx	r7
 8004326:	3001      	adds	r0, #1
 8004328:	d1c1      	bne.n	80042ae <_printf_float+0x342>
 800432a:	e680      	b.n	800402e <_printf_float+0xc2>
 800432c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800432e:	2a01      	cmp	r2, #1
 8004330:	dc01      	bgt.n	8004336 <_printf_float+0x3ca>
 8004332:	07db      	lsls	r3, r3, #31
 8004334:	d538      	bpl.n	80043a8 <_printf_float+0x43c>
 8004336:	2301      	movs	r3, #1
 8004338:	4642      	mov	r2, r8
 800433a:	4631      	mov	r1, r6
 800433c:	4628      	mov	r0, r5
 800433e:	47b8      	blx	r7
 8004340:	3001      	adds	r0, #1
 8004342:	f43f ae74 	beq.w	800402e <_printf_float+0xc2>
 8004346:	ee18 3a10 	vmov	r3, s16
 800434a:	4652      	mov	r2, sl
 800434c:	4631      	mov	r1, r6
 800434e:	4628      	mov	r0, r5
 8004350:	47b8      	blx	r7
 8004352:	3001      	adds	r0, #1
 8004354:	f43f ae6b 	beq.w	800402e <_printf_float+0xc2>
 8004358:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800435c:	2200      	movs	r2, #0
 800435e:	2300      	movs	r3, #0
 8004360:	f7fc fbb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8004364:	b9d8      	cbnz	r0, 800439e <_printf_float+0x432>
 8004366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004368:	f108 0201 	add.w	r2, r8, #1
 800436c:	3b01      	subs	r3, #1
 800436e:	4631      	mov	r1, r6
 8004370:	4628      	mov	r0, r5
 8004372:	47b8      	blx	r7
 8004374:	3001      	adds	r0, #1
 8004376:	d10e      	bne.n	8004396 <_printf_float+0x42a>
 8004378:	e659      	b.n	800402e <_printf_float+0xc2>
 800437a:	2301      	movs	r3, #1
 800437c:	4652      	mov	r2, sl
 800437e:	4631      	mov	r1, r6
 8004380:	4628      	mov	r0, r5
 8004382:	47b8      	blx	r7
 8004384:	3001      	adds	r0, #1
 8004386:	f43f ae52 	beq.w	800402e <_printf_float+0xc2>
 800438a:	f108 0801 	add.w	r8, r8, #1
 800438e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004390:	3b01      	subs	r3, #1
 8004392:	4543      	cmp	r3, r8
 8004394:	dcf1      	bgt.n	800437a <_printf_float+0x40e>
 8004396:	464b      	mov	r3, r9
 8004398:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800439c:	e6dc      	b.n	8004158 <_printf_float+0x1ec>
 800439e:	f04f 0800 	mov.w	r8, #0
 80043a2:	f104 0a1a 	add.w	sl, r4, #26
 80043a6:	e7f2      	b.n	800438e <_printf_float+0x422>
 80043a8:	2301      	movs	r3, #1
 80043aa:	4642      	mov	r2, r8
 80043ac:	e7df      	b.n	800436e <_printf_float+0x402>
 80043ae:	2301      	movs	r3, #1
 80043b0:	464a      	mov	r2, r9
 80043b2:	4631      	mov	r1, r6
 80043b4:	4628      	mov	r0, r5
 80043b6:	47b8      	blx	r7
 80043b8:	3001      	adds	r0, #1
 80043ba:	f43f ae38 	beq.w	800402e <_printf_float+0xc2>
 80043be:	f108 0801 	add.w	r8, r8, #1
 80043c2:	68e3      	ldr	r3, [r4, #12]
 80043c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80043c6:	1a5b      	subs	r3, r3, r1
 80043c8:	4543      	cmp	r3, r8
 80043ca:	dcf0      	bgt.n	80043ae <_printf_float+0x442>
 80043cc:	e6fa      	b.n	80041c4 <_printf_float+0x258>
 80043ce:	f04f 0800 	mov.w	r8, #0
 80043d2:	f104 0919 	add.w	r9, r4, #25
 80043d6:	e7f4      	b.n	80043c2 <_printf_float+0x456>

080043d8 <_printf_common>:
 80043d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043dc:	4616      	mov	r6, r2
 80043de:	4699      	mov	r9, r3
 80043e0:	688a      	ldr	r2, [r1, #8]
 80043e2:	690b      	ldr	r3, [r1, #16]
 80043e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043e8:	4293      	cmp	r3, r2
 80043ea:	bfb8      	it	lt
 80043ec:	4613      	movlt	r3, r2
 80043ee:	6033      	str	r3, [r6, #0]
 80043f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043f4:	4607      	mov	r7, r0
 80043f6:	460c      	mov	r4, r1
 80043f8:	b10a      	cbz	r2, 80043fe <_printf_common+0x26>
 80043fa:	3301      	adds	r3, #1
 80043fc:	6033      	str	r3, [r6, #0]
 80043fe:	6823      	ldr	r3, [r4, #0]
 8004400:	0699      	lsls	r1, r3, #26
 8004402:	bf42      	ittt	mi
 8004404:	6833      	ldrmi	r3, [r6, #0]
 8004406:	3302      	addmi	r3, #2
 8004408:	6033      	strmi	r3, [r6, #0]
 800440a:	6825      	ldr	r5, [r4, #0]
 800440c:	f015 0506 	ands.w	r5, r5, #6
 8004410:	d106      	bne.n	8004420 <_printf_common+0x48>
 8004412:	f104 0a19 	add.w	sl, r4, #25
 8004416:	68e3      	ldr	r3, [r4, #12]
 8004418:	6832      	ldr	r2, [r6, #0]
 800441a:	1a9b      	subs	r3, r3, r2
 800441c:	42ab      	cmp	r3, r5
 800441e:	dc26      	bgt.n	800446e <_printf_common+0x96>
 8004420:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004424:	1e13      	subs	r3, r2, #0
 8004426:	6822      	ldr	r2, [r4, #0]
 8004428:	bf18      	it	ne
 800442a:	2301      	movne	r3, #1
 800442c:	0692      	lsls	r2, r2, #26
 800442e:	d42b      	bmi.n	8004488 <_printf_common+0xb0>
 8004430:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004434:	4649      	mov	r1, r9
 8004436:	4638      	mov	r0, r7
 8004438:	47c0      	blx	r8
 800443a:	3001      	adds	r0, #1
 800443c:	d01e      	beq.n	800447c <_printf_common+0xa4>
 800443e:	6823      	ldr	r3, [r4, #0]
 8004440:	68e5      	ldr	r5, [r4, #12]
 8004442:	6832      	ldr	r2, [r6, #0]
 8004444:	f003 0306 	and.w	r3, r3, #6
 8004448:	2b04      	cmp	r3, #4
 800444a:	bf08      	it	eq
 800444c:	1aad      	subeq	r5, r5, r2
 800444e:	68a3      	ldr	r3, [r4, #8]
 8004450:	6922      	ldr	r2, [r4, #16]
 8004452:	bf0c      	ite	eq
 8004454:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004458:	2500      	movne	r5, #0
 800445a:	4293      	cmp	r3, r2
 800445c:	bfc4      	itt	gt
 800445e:	1a9b      	subgt	r3, r3, r2
 8004460:	18ed      	addgt	r5, r5, r3
 8004462:	2600      	movs	r6, #0
 8004464:	341a      	adds	r4, #26
 8004466:	42b5      	cmp	r5, r6
 8004468:	d11a      	bne.n	80044a0 <_printf_common+0xc8>
 800446a:	2000      	movs	r0, #0
 800446c:	e008      	b.n	8004480 <_printf_common+0xa8>
 800446e:	2301      	movs	r3, #1
 8004470:	4652      	mov	r2, sl
 8004472:	4649      	mov	r1, r9
 8004474:	4638      	mov	r0, r7
 8004476:	47c0      	blx	r8
 8004478:	3001      	adds	r0, #1
 800447a:	d103      	bne.n	8004484 <_printf_common+0xac>
 800447c:	f04f 30ff 	mov.w	r0, #4294967295
 8004480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004484:	3501      	adds	r5, #1
 8004486:	e7c6      	b.n	8004416 <_printf_common+0x3e>
 8004488:	18e1      	adds	r1, r4, r3
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	2030      	movs	r0, #48	; 0x30
 800448e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004492:	4422      	add	r2, r4
 8004494:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004498:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800449c:	3302      	adds	r3, #2
 800449e:	e7c7      	b.n	8004430 <_printf_common+0x58>
 80044a0:	2301      	movs	r3, #1
 80044a2:	4622      	mov	r2, r4
 80044a4:	4649      	mov	r1, r9
 80044a6:	4638      	mov	r0, r7
 80044a8:	47c0      	blx	r8
 80044aa:	3001      	adds	r0, #1
 80044ac:	d0e6      	beq.n	800447c <_printf_common+0xa4>
 80044ae:	3601      	adds	r6, #1
 80044b0:	e7d9      	b.n	8004466 <_printf_common+0x8e>
	...

080044b4 <_printf_i>:
 80044b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044b8:	460c      	mov	r4, r1
 80044ba:	4691      	mov	r9, r2
 80044bc:	7e27      	ldrb	r7, [r4, #24]
 80044be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80044c0:	2f78      	cmp	r7, #120	; 0x78
 80044c2:	4680      	mov	r8, r0
 80044c4:	469a      	mov	sl, r3
 80044c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044ca:	d807      	bhi.n	80044dc <_printf_i+0x28>
 80044cc:	2f62      	cmp	r7, #98	; 0x62
 80044ce:	d80a      	bhi.n	80044e6 <_printf_i+0x32>
 80044d0:	2f00      	cmp	r7, #0
 80044d2:	f000 80d8 	beq.w	8004686 <_printf_i+0x1d2>
 80044d6:	2f58      	cmp	r7, #88	; 0x58
 80044d8:	f000 80a3 	beq.w	8004622 <_printf_i+0x16e>
 80044dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80044e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044e4:	e03a      	b.n	800455c <_printf_i+0xa8>
 80044e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044ea:	2b15      	cmp	r3, #21
 80044ec:	d8f6      	bhi.n	80044dc <_printf_i+0x28>
 80044ee:	a001      	add	r0, pc, #4	; (adr r0, 80044f4 <_printf_i+0x40>)
 80044f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80044f4:	0800454d 	.word	0x0800454d
 80044f8:	08004561 	.word	0x08004561
 80044fc:	080044dd 	.word	0x080044dd
 8004500:	080044dd 	.word	0x080044dd
 8004504:	080044dd 	.word	0x080044dd
 8004508:	080044dd 	.word	0x080044dd
 800450c:	08004561 	.word	0x08004561
 8004510:	080044dd 	.word	0x080044dd
 8004514:	080044dd 	.word	0x080044dd
 8004518:	080044dd 	.word	0x080044dd
 800451c:	080044dd 	.word	0x080044dd
 8004520:	0800466d 	.word	0x0800466d
 8004524:	08004591 	.word	0x08004591
 8004528:	0800464f 	.word	0x0800464f
 800452c:	080044dd 	.word	0x080044dd
 8004530:	080044dd 	.word	0x080044dd
 8004534:	0800468f 	.word	0x0800468f
 8004538:	080044dd 	.word	0x080044dd
 800453c:	08004591 	.word	0x08004591
 8004540:	080044dd 	.word	0x080044dd
 8004544:	080044dd 	.word	0x080044dd
 8004548:	08004657 	.word	0x08004657
 800454c:	680b      	ldr	r3, [r1, #0]
 800454e:	1d1a      	adds	r2, r3, #4
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	600a      	str	r2, [r1, #0]
 8004554:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004558:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800455c:	2301      	movs	r3, #1
 800455e:	e0a3      	b.n	80046a8 <_printf_i+0x1f4>
 8004560:	6825      	ldr	r5, [r4, #0]
 8004562:	6808      	ldr	r0, [r1, #0]
 8004564:	062e      	lsls	r6, r5, #24
 8004566:	f100 0304 	add.w	r3, r0, #4
 800456a:	d50a      	bpl.n	8004582 <_printf_i+0xce>
 800456c:	6805      	ldr	r5, [r0, #0]
 800456e:	600b      	str	r3, [r1, #0]
 8004570:	2d00      	cmp	r5, #0
 8004572:	da03      	bge.n	800457c <_printf_i+0xc8>
 8004574:	232d      	movs	r3, #45	; 0x2d
 8004576:	426d      	negs	r5, r5
 8004578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800457c:	485e      	ldr	r0, [pc, #376]	; (80046f8 <_printf_i+0x244>)
 800457e:	230a      	movs	r3, #10
 8004580:	e019      	b.n	80045b6 <_printf_i+0x102>
 8004582:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004586:	6805      	ldr	r5, [r0, #0]
 8004588:	600b      	str	r3, [r1, #0]
 800458a:	bf18      	it	ne
 800458c:	b22d      	sxthne	r5, r5
 800458e:	e7ef      	b.n	8004570 <_printf_i+0xbc>
 8004590:	680b      	ldr	r3, [r1, #0]
 8004592:	6825      	ldr	r5, [r4, #0]
 8004594:	1d18      	adds	r0, r3, #4
 8004596:	6008      	str	r0, [r1, #0]
 8004598:	0628      	lsls	r0, r5, #24
 800459a:	d501      	bpl.n	80045a0 <_printf_i+0xec>
 800459c:	681d      	ldr	r5, [r3, #0]
 800459e:	e002      	b.n	80045a6 <_printf_i+0xf2>
 80045a0:	0669      	lsls	r1, r5, #25
 80045a2:	d5fb      	bpl.n	800459c <_printf_i+0xe8>
 80045a4:	881d      	ldrh	r5, [r3, #0]
 80045a6:	4854      	ldr	r0, [pc, #336]	; (80046f8 <_printf_i+0x244>)
 80045a8:	2f6f      	cmp	r7, #111	; 0x6f
 80045aa:	bf0c      	ite	eq
 80045ac:	2308      	moveq	r3, #8
 80045ae:	230a      	movne	r3, #10
 80045b0:	2100      	movs	r1, #0
 80045b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045b6:	6866      	ldr	r6, [r4, #4]
 80045b8:	60a6      	str	r6, [r4, #8]
 80045ba:	2e00      	cmp	r6, #0
 80045bc:	bfa2      	ittt	ge
 80045be:	6821      	ldrge	r1, [r4, #0]
 80045c0:	f021 0104 	bicge.w	r1, r1, #4
 80045c4:	6021      	strge	r1, [r4, #0]
 80045c6:	b90d      	cbnz	r5, 80045cc <_printf_i+0x118>
 80045c8:	2e00      	cmp	r6, #0
 80045ca:	d04d      	beq.n	8004668 <_printf_i+0x1b4>
 80045cc:	4616      	mov	r6, r2
 80045ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80045d2:	fb03 5711 	mls	r7, r3, r1, r5
 80045d6:	5dc7      	ldrb	r7, [r0, r7]
 80045d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80045dc:	462f      	mov	r7, r5
 80045de:	42bb      	cmp	r3, r7
 80045e0:	460d      	mov	r5, r1
 80045e2:	d9f4      	bls.n	80045ce <_printf_i+0x11a>
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d10b      	bne.n	8004600 <_printf_i+0x14c>
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	07df      	lsls	r7, r3, #31
 80045ec:	d508      	bpl.n	8004600 <_printf_i+0x14c>
 80045ee:	6923      	ldr	r3, [r4, #16]
 80045f0:	6861      	ldr	r1, [r4, #4]
 80045f2:	4299      	cmp	r1, r3
 80045f4:	bfde      	ittt	le
 80045f6:	2330      	movle	r3, #48	; 0x30
 80045f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004600:	1b92      	subs	r2, r2, r6
 8004602:	6122      	str	r2, [r4, #16]
 8004604:	f8cd a000 	str.w	sl, [sp]
 8004608:	464b      	mov	r3, r9
 800460a:	aa03      	add	r2, sp, #12
 800460c:	4621      	mov	r1, r4
 800460e:	4640      	mov	r0, r8
 8004610:	f7ff fee2 	bl	80043d8 <_printf_common>
 8004614:	3001      	adds	r0, #1
 8004616:	d14c      	bne.n	80046b2 <_printf_i+0x1fe>
 8004618:	f04f 30ff 	mov.w	r0, #4294967295
 800461c:	b004      	add	sp, #16
 800461e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004622:	4835      	ldr	r0, [pc, #212]	; (80046f8 <_printf_i+0x244>)
 8004624:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004628:	6823      	ldr	r3, [r4, #0]
 800462a:	680e      	ldr	r6, [r1, #0]
 800462c:	061f      	lsls	r7, r3, #24
 800462e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004632:	600e      	str	r6, [r1, #0]
 8004634:	d514      	bpl.n	8004660 <_printf_i+0x1ac>
 8004636:	07d9      	lsls	r1, r3, #31
 8004638:	bf44      	itt	mi
 800463a:	f043 0320 	orrmi.w	r3, r3, #32
 800463e:	6023      	strmi	r3, [r4, #0]
 8004640:	b91d      	cbnz	r5, 800464a <_printf_i+0x196>
 8004642:	6823      	ldr	r3, [r4, #0]
 8004644:	f023 0320 	bic.w	r3, r3, #32
 8004648:	6023      	str	r3, [r4, #0]
 800464a:	2310      	movs	r3, #16
 800464c:	e7b0      	b.n	80045b0 <_printf_i+0xfc>
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	f043 0320 	orr.w	r3, r3, #32
 8004654:	6023      	str	r3, [r4, #0]
 8004656:	2378      	movs	r3, #120	; 0x78
 8004658:	4828      	ldr	r0, [pc, #160]	; (80046fc <_printf_i+0x248>)
 800465a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800465e:	e7e3      	b.n	8004628 <_printf_i+0x174>
 8004660:	065e      	lsls	r6, r3, #25
 8004662:	bf48      	it	mi
 8004664:	b2ad      	uxthmi	r5, r5
 8004666:	e7e6      	b.n	8004636 <_printf_i+0x182>
 8004668:	4616      	mov	r6, r2
 800466a:	e7bb      	b.n	80045e4 <_printf_i+0x130>
 800466c:	680b      	ldr	r3, [r1, #0]
 800466e:	6826      	ldr	r6, [r4, #0]
 8004670:	6960      	ldr	r0, [r4, #20]
 8004672:	1d1d      	adds	r5, r3, #4
 8004674:	600d      	str	r5, [r1, #0]
 8004676:	0635      	lsls	r5, r6, #24
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	d501      	bpl.n	8004680 <_printf_i+0x1cc>
 800467c:	6018      	str	r0, [r3, #0]
 800467e:	e002      	b.n	8004686 <_printf_i+0x1d2>
 8004680:	0671      	lsls	r1, r6, #25
 8004682:	d5fb      	bpl.n	800467c <_printf_i+0x1c8>
 8004684:	8018      	strh	r0, [r3, #0]
 8004686:	2300      	movs	r3, #0
 8004688:	6123      	str	r3, [r4, #16]
 800468a:	4616      	mov	r6, r2
 800468c:	e7ba      	b.n	8004604 <_printf_i+0x150>
 800468e:	680b      	ldr	r3, [r1, #0]
 8004690:	1d1a      	adds	r2, r3, #4
 8004692:	600a      	str	r2, [r1, #0]
 8004694:	681e      	ldr	r6, [r3, #0]
 8004696:	6862      	ldr	r2, [r4, #4]
 8004698:	2100      	movs	r1, #0
 800469a:	4630      	mov	r0, r6
 800469c:	f7fb fda0 	bl	80001e0 <memchr>
 80046a0:	b108      	cbz	r0, 80046a6 <_printf_i+0x1f2>
 80046a2:	1b80      	subs	r0, r0, r6
 80046a4:	6060      	str	r0, [r4, #4]
 80046a6:	6863      	ldr	r3, [r4, #4]
 80046a8:	6123      	str	r3, [r4, #16]
 80046aa:	2300      	movs	r3, #0
 80046ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046b0:	e7a8      	b.n	8004604 <_printf_i+0x150>
 80046b2:	6923      	ldr	r3, [r4, #16]
 80046b4:	4632      	mov	r2, r6
 80046b6:	4649      	mov	r1, r9
 80046b8:	4640      	mov	r0, r8
 80046ba:	47d0      	blx	sl
 80046bc:	3001      	adds	r0, #1
 80046be:	d0ab      	beq.n	8004618 <_printf_i+0x164>
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	079b      	lsls	r3, r3, #30
 80046c4:	d413      	bmi.n	80046ee <_printf_i+0x23a>
 80046c6:	68e0      	ldr	r0, [r4, #12]
 80046c8:	9b03      	ldr	r3, [sp, #12]
 80046ca:	4298      	cmp	r0, r3
 80046cc:	bfb8      	it	lt
 80046ce:	4618      	movlt	r0, r3
 80046d0:	e7a4      	b.n	800461c <_printf_i+0x168>
 80046d2:	2301      	movs	r3, #1
 80046d4:	4632      	mov	r2, r6
 80046d6:	4649      	mov	r1, r9
 80046d8:	4640      	mov	r0, r8
 80046da:	47d0      	blx	sl
 80046dc:	3001      	adds	r0, #1
 80046de:	d09b      	beq.n	8004618 <_printf_i+0x164>
 80046e0:	3501      	adds	r5, #1
 80046e2:	68e3      	ldr	r3, [r4, #12]
 80046e4:	9903      	ldr	r1, [sp, #12]
 80046e6:	1a5b      	subs	r3, r3, r1
 80046e8:	42ab      	cmp	r3, r5
 80046ea:	dcf2      	bgt.n	80046d2 <_printf_i+0x21e>
 80046ec:	e7eb      	b.n	80046c6 <_printf_i+0x212>
 80046ee:	2500      	movs	r5, #0
 80046f0:	f104 0619 	add.w	r6, r4, #25
 80046f4:	e7f5      	b.n	80046e2 <_printf_i+0x22e>
 80046f6:	bf00      	nop
 80046f8:	08006836 	.word	0x08006836
 80046fc:	08006847 	.word	0x08006847

08004700 <quorem>:
 8004700:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004704:	6903      	ldr	r3, [r0, #16]
 8004706:	690c      	ldr	r4, [r1, #16]
 8004708:	42a3      	cmp	r3, r4
 800470a:	4607      	mov	r7, r0
 800470c:	f2c0 8081 	blt.w	8004812 <quorem+0x112>
 8004710:	3c01      	subs	r4, #1
 8004712:	f101 0814 	add.w	r8, r1, #20
 8004716:	f100 0514 	add.w	r5, r0, #20
 800471a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800471e:	9301      	str	r3, [sp, #4]
 8004720:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004724:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004728:	3301      	adds	r3, #1
 800472a:	429a      	cmp	r2, r3
 800472c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004730:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004734:	fbb2 f6f3 	udiv	r6, r2, r3
 8004738:	d331      	bcc.n	800479e <quorem+0x9e>
 800473a:	f04f 0e00 	mov.w	lr, #0
 800473e:	4640      	mov	r0, r8
 8004740:	46ac      	mov	ip, r5
 8004742:	46f2      	mov	sl, lr
 8004744:	f850 2b04 	ldr.w	r2, [r0], #4
 8004748:	b293      	uxth	r3, r2
 800474a:	fb06 e303 	mla	r3, r6, r3, lr
 800474e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004752:	b29b      	uxth	r3, r3
 8004754:	ebaa 0303 	sub.w	r3, sl, r3
 8004758:	0c12      	lsrs	r2, r2, #16
 800475a:	f8dc a000 	ldr.w	sl, [ip]
 800475e:	fb06 e202 	mla	r2, r6, r2, lr
 8004762:	fa13 f38a 	uxtah	r3, r3, sl
 8004766:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800476a:	fa1f fa82 	uxth.w	sl, r2
 800476e:	f8dc 2000 	ldr.w	r2, [ip]
 8004772:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004776:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800477a:	b29b      	uxth	r3, r3
 800477c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004780:	4581      	cmp	r9, r0
 8004782:	f84c 3b04 	str.w	r3, [ip], #4
 8004786:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800478a:	d2db      	bcs.n	8004744 <quorem+0x44>
 800478c:	f855 300b 	ldr.w	r3, [r5, fp]
 8004790:	b92b      	cbnz	r3, 800479e <quorem+0x9e>
 8004792:	9b01      	ldr	r3, [sp, #4]
 8004794:	3b04      	subs	r3, #4
 8004796:	429d      	cmp	r5, r3
 8004798:	461a      	mov	r2, r3
 800479a:	d32e      	bcc.n	80047fa <quorem+0xfa>
 800479c:	613c      	str	r4, [r7, #16]
 800479e:	4638      	mov	r0, r7
 80047a0:	f001 f8be 	bl	8005920 <__mcmp>
 80047a4:	2800      	cmp	r0, #0
 80047a6:	db24      	blt.n	80047f2 <quorem+0xf2>
 80047a8:	3601      	adds	r6, #1
 80047aa:	4628      	mov	r0, r5
 80047ac:	f04f 0c00 	mov.w	ip, #0
 80047b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80047b4:	f8d0 e000 	ldr.w	lr, [r0]
 80047b8:	b293      	uxth	r3, r2
 80047ba:	ebac 0303 	sub.w	r3, ip, r3
 80047be:	0c12      	lsrs	r2, r2, #16
 80047c0:	fa13 f38e 	uxtah	r3, r3, lr
 80047c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80047c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80047d2:	45c1      	cmp	r9, r8
 80047d4:	f840 3b04 	str.w	r3, [r0], #4
 80047d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80047dc:	d2e8      	bcs.n	80047b0 <quorem+0xb0>
 80047de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80047e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80047e6:	b922      	cbnz	r2, 80047f2 <quorem+0xf2>
 80047e8:	3b04      	subs	r3, #4
 80047ea:	429d      	cmp	r5, r3
 80047ec:	461a      	mov	r2, r3
 80047ee:	d30a      	bcc.n	8004806 <quorem+0x106>
 80047f0:	613c      	str	r4, [r7, #16]
 80047f2:	4630      	mov	r0, r6
 80047f4:	b003      	add	sp, #12
 80047f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047fa:	6812      	ldr	r2, [r2, #0]
 80047fc:	3b04      	subs	r3, #4
 80047fe:	2a00      	cmp	r2, #0
 8004800:	d1cc      	bne.n	800479c <quorem+0x9c>
 8004802:	3c01      	subs	r4, #1
 8004804:	e7c7      	b.n	8004796 <quorem+0x96>
 8004806:	6812      	ldr	r2, [r2, #0]
 8004808:	3b04      	subs	r3, #4
 800480a:	2a00      	cmp	r2, #0
 800480c:	d1f0      	bne.n	80047f0 <quorem+0xf0>
 800480e:	3c01      	subs	r4, #1
 8004810:	e7eb      	b.n	80047ea <quorem+0xea>
 8004812:	2000      	movs	r0, #0
 8004814:	e7ee      	b.n	80047f4 <quorem+0xf4>
	...

08004818 <_dtoa_r>:
 8004818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800481c:	ed2d 8b02 	vpush	{d8}
 8004820:	ec57 6b10 	vmov	r6, r7, d0
 8004824:	b095      	sub	sp, #84	; 0x54
 8004826:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004828:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800482c:	9105      	str	r1, [sp, #20]
 800482e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004832:	4604      	mov	r4, r0
 8004834:	9209      	str	r2, [sp, #36]	; 0x24
 8004836:	930f      	str	r3, [sp, #60]	; 0x3c
 8004838:	b975      	cbnz	r5, 8004858 <_dtoa_r+0x40>
 800483a:	2010      	movs	r0, #16
 800483c:	f000 fddc 	bl	80053f8 <malloc>
 8004840:	4602      	mov	r2, r0
 8004842:	6260      	str	r0, [r4, #36]	; 0x24
 8004844:	b920      	cbnz	r0, 8004850 <_dtoa_r+0x38>
 8004846:	4bb2      	ldr	r3, [pc, #712]	; (8004b10 <_dtoa_r+0x2f8>)
 8004848:	21ea      	movs	r1, #234	; 0xea
 800484a:	48b2      	ldr	r0, [pc, #712]	; (8004b14 <_dtoa_r+0x2fc>)
 800484c:	f001 fa32 	bl	8005cb4 <__assert_func>
 8004850:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004854:	6005      	str	r5, [r0, #0]
 8004856:	60c5      	str	r5, [r0, #12]
 8004858:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800485a:	6819      	ldr	r1, [r3, #0]
 800485c:	b151      	cbz	r1, 8004874 <_dtoa_r+0x5c>
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	604a      	str	r2, [r1, #4]
 8004862:	2301      	movs	r3, #1
 8004864:	4093      	lsls	r3, r2
 8004866:	608b      	str	r3, [r1, #8]
 8004868:	4620      	mov	r0, r4
 800486a:	f000 fe1b 	bl	80054a4 <_Bfree>
 800486e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004870:	2200      	movs	r2, #0
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	1e3b      	subs	r3, r7, #0
 8004876:	bfb9      	ittee	lt
 8004878:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800487c:	9303      	strlt	r3, [sp, #12]
 800487e:	2300      	movge	r3, #0
 8004880:	f8c8 3000 	strge.w	r3, [r8]
 8004884:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004888:	4ba3      	ldr	r3, [pc, #652]	; (8004b18 <_dtoa_r+0x300>)
 800488a:	bfbc      	itt	lt
 800488c:	2201      	movlt	r2, #1
 800488e:	f8c8 2000 	strlt.w	r2, [r8]
 8004892:	ea33 0309 	bics.w	r3, r3, r9
 8004896:	d11b      	bne.n	80048d0 <_dtoa_r+0xb8>
 8004898:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800489a:	f242 730f 	movw	r3, #9999	; 0x270f
 800489e:	6013      	str	r3, [r2, #0]
 80048a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80048a4:	4333      	orrs	r3, r6
 80048a6:	f000 857a 	beq.w	800539e <_dtoa_r+0xb86>
 80048aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80048ac:	b963      	cbnz	r3, 80048c8 <_dtoa_r+0xb0>
 80048ae:	4b9b      	ldr	r3, [pc, #620]	; (8004b1c <_dtoa_r+0x304>)
 80048b0:	e024      	b.n	80048fc <_dtoa_r+0xe4>
 80048b2:	4b9b      	ldr	r3, [pc, #620]	; (8004b20 <_dtoa_r+0x308>)
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	3308      	adds	r3, #8
 80048b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80048ba:	6013      	str	r3, [r2, #0]
 80048bc:	9800      	ldr	r0, [sp, #0]
 80048be:	b015      	add	sp, #84	; 0x54
 80048c0:	ecbd 8b02 	vpop	{d8}
 80048c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048c8:	4b94      	ldr	r3, [pc, #592]	; (8004b1c <_dtoa_r+0x304>)
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	3303      	adds	r3, #3
 80048ce:	e7f3      	b.n	80048b8 <_dtoa_r+0xa0>
 80048d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80048d4:	2200      	movs	r2, #0
 80048d6:	ec51 0b17 	vmov	r0, r1, d7
 80048da:	2300      	movs	r3, #0
 80048dc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80048e0:	f7fc f8f2 	bl	8000ac8 <__aeabi_dcmpeq>
 80048e4:	4680      	mov	r8, r0
 80048e6:	b158      	cbz	r0, 8004900 <_dtoa_r+0xe8>
 80048e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80048ea:	2301      	movs	r3, #1
 80048ec:	6013      	str	r3, [r2, #0]
 80048ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 8551 	beq.w	8005398 <_dtoa_r+0xb80>
 80048f6:	488b      	ldr	r0, [pc, #556]	; (8004b24 <_dtoa_r+0x30c>)
 80048f8:	6018      	str	r0, [r3, #0]
 80048fa:	1e43      	subs	r3, r0, #1
 80048fc:	9300      	str	r3, [sp, #0]
 80048fe:	e7dd      	b.n	80048bc <_dtoa_r+0xa4>
 8004900:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004904:	aa12      	add	r2, sp, #72	; 0x48
 8004906:	a913      	add	r1, sp, #76	; 0x4c
 8004908:	4620      	mov	r0, r4
 800490a:	f001 f8ad 	bl	8005a68 <__d2b>
 800490e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004912:	4683      	mov	fp, r0
 8004914:	2d00      	cmp	r5, #0
 8004916:	d07c      	beq.n	8004a12 <_dtoa_r+0x1fa>
 8004918:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800491a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800491e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004922:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004926:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800492a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800492e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004932:	4b7d      	ldr	r3, [pc, #500]	; (8004b28 <_dtoa_r+0x310>)
 8004934:	2200      	movs	r2, #0
 8004936:	4630      	mov	r0, r6
 8004938:	4639      	mov	r1, r7
 800493a:	f7fb fca5 	bl	8000288 <__aeabi_dsub>
 800493e:	a36e      	add	r3, pc, #440	; (adr r3, 8004af8 <_dtoa_r+0x2e0>)
 8004940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004944:	f7fb fe58 	bl	80005f8 <__aeabi_dmul>
 8004948:	a36d      	add	r3, pc, #436	; (adr r3, 8004b00 <_dtoa_r+0x2e8>)
 800494a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494e:	f7fb fc9d 	bl	800028c <__adddf3>
 8004952:	4606      	mov	r6, r0
 8004954:	4628      	mov	r0, r5
 8004956:	460f      	mov	r7, r1
 8004958:	f7fb fde4 	bl	8000524 <__aeabi_i2d>
 800495c:	a36a      	add	r3, pc, #424	; (adr r3, 8004b08 <_dtoa_r+0x2f0>)
 800495e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004962:	f7fb fe49 	bl	80005f8 <__aeabi_dmul>
 8004966:	4602      	mov	r2, r0
 8004968:	460b      	mov	r3, r1
 800496a:	4630      	mov	r0, r6
 800496c:	4639      	mov	r1, r7
 800496e:	f7fb fc8d 	bl	800028c <__adddf3>
 8004972:	4606      	mov	r6, r0
 8004974:	460f      	mov	r7, r1
 8004976:	f7fc f8ef 	bl	8000b58 <__aeabi_d2iz>
 800497a:	2200      	movs	r2, #0
 800497c:	4682      	mov	sl, r0
 800497e:	2300      	movs	r3, #0
 8004980:	4630      	mov	r0, r6
 8004982:	4639      	mov	r1, r7
 8004984:	f7fc f8aa 	bl	8000adc <__aeabi_dcmplt>
 8004988:	b148      	cbz	r0, 800499e <_dtoa_r+0x186>
 800498a:	4650      	mov	r0, sl
 800498c:	f7fb fdca 	bl	8000524 <__aeabi_i2d>
 8004990:	4632      	mov	r2, r6
 8004992:	463b      	mov	r3, r7
 8004994:	f7fc f898 	bl	8000ac8 <__aeabi_dcmpeq>
 8004998:	b908      	cbnz	r0, 800499e <_dtoa_r+0x186>
 800499a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800499e:	f1ba 0f16 	cmp.w	sl, #22
 80049a2:	d854      	bhi.n	8004a4e <_dtoa_r+0x236>
 80049a4:	4b61      	ldr	r3, [pc, #388]	; (8004b2c <_dtoa_r+0x314>)
 80049a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80049aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80049b2:	f7fc f893 	bl	8000adc <__aeabi_dcmplt>
 80049b6:	2800      	cmp	r0, #0
 80049b8:	d04b      	beq.n	8004a52 <_dtoa_r+0x23a>
 80049ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80049be:	2300      	movs	r3, #0
 80049c0:	930e      	str	r3, [sp, #56]	; 0x38
 80049c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80049c4:	1b5d      	subs	r5, r3, r5
 80049c6:	1e6b      	subs	r3, r5, #1
 80049c8:	9304      	str	r3, [sp, #16]
 80049ca:	bf43      	ittte	mi
 80049cc:	2300      	movmi	r3, #0
 80049ce:	f1c5 0801 	rsbmi	r8, r5, #1
 80049d2:	9304      	strmi	r3, [sp, #16]
 80049d4:	f04f 0800 	movpl.w	r8, #0
 80049d8:	f1ba 0f00 	cmp.w	sl, #0
 80049dc:	db3b      	blt.n	8004a56 <_dtoa_r+0x23e>
 80049de:	9b04      	ldr	r3, [sp, #16]
 80049e0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80049e4:	4453      	add	r3, sl
 80049e6:	9304      	str	r3, [sp, #16]
 80049e8:	2300      	movs	r3, #0
 80049ea:	9306      	str	r3, [sp, #24]
 80049ec:	9b05      	ldr	r3, [sp, #20]
 80049ee:	2b09      	cmp	r3, #9
 80049f0:	d869      	bhi.n	8004ac6 <_dtoa_r+0x2ae>
 80049f2:	2b05      	cmp	r3, #5
 80049f4:	bfc4      	itt	gt
 80049f6:	3b04      	subgt	r3, #4
 80049f8:	9305      	strgt	r3, [sp, #20]
 80049fa:	9b05      	ldr	r3, [sp, #20]
 80049fc:	f1a3 0302 	sub.w	r3, r3, #2
 8004a00:	bfcc      	ite	gt
 8004a02:	2500      	movgt	r5, #0
 8004a04:	2501      	movle	r5, #1
 8004a06:	2b03      	cmp	r3, #3
 8004a08:	d869      	bhi.n	8004ade <_dtoa_r+0x2c6>
 8004a0a:	e8df f003 	tbb	[pc, r3]
 8004a0e:	4e2c      	.short	0x4e2c
 8004a10:	5a4c      	.short	0x5a4c
 8004a12:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004a16:	441d      	add	r5, r3
 8004a18:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004a1c:	2b20      	cmp	r3, #32
 8004a1e:	bfc1      	itttt	gt
 8004a20:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004a24:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004a28:	fa09 f303 	lslgt.w	r3, r9, r3
 8004a2c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004a30:	bfda      	itte	le
 8004a32:	f1c3 0320 	rsble	r3, r3, #32
 8004a36:	fa06 f003 	lslle.w	r0, r6, r3
 8004a3a:	4318      	orrgt	r0, r3
 8004a3c:	f7fb fd62 	bl	8000504 <__aeabi_ui2d>
 8004a40:	2301      	movs	r3, #1
 8004a42:	4606      	mov	r6, r0
 8004a44:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004a48:	3d01      	subs	r5, #1
 8004a4a:	9310      	str	r3, [sp, #64]	; 0x40
 8004a4c:	e771      	b.n	8004932 <_dtoa_r+0x11a>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e7b6      	b.n	80049c0 <_dtoa_r+0x1a8>
 8004a52:	900e      	str	r0, [sp, #56]	; 0x38
 8004a54:	e7b5      	b.n	80049c2 <_dtoa_r+0x1aa>
 8004a56:	f1ca 0300 	rsb	r3, sl, #0
 8004a5a:	9306      	str	r3, [sp, #24]
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	eba8 080a 	sub.w	r8, r8, sl
 8004a62:	930d      	str	r3, [sp, #52]	; 0x34
 8004a64:	e7c2      	b.n	80049ec <_dtoa_r+0x1d4>
 8004a66:	2300      	movs	r3, #0
 8004a68:	9308      	str	r3, [sp, #32]
 8004a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	dc39      	bgt.n	8004ae4 <_dtoa_r+0x2cc>
 8004a70:	f04f 0901 	mov.w	r9, #1
 8004a74:	f8cd 9004 	str.w	r9, [sp, #4]
 8004a78:	464b      	mov	r3, r9
 8004a7a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004a7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004a80:	2200      	movs	r2, #0
 8004a82:	6042      	str	r2, [r0, #4]
 8004a84:	2204      	movs	r2, #4
 8004a86:	f102 0614 	add.w	r6, r2, #20
 8004a8a:	429e      	cmp	r6, r3
 8004a8c:	6841      	ldr	r1, [r0, #4]
 8004a8e:	d92f      	bls.n	8004af0 <_dtoa_r+0x2d8>
 8004a90:	4620      	mov	r0, r4
 8004a92:	f000 fcc7 	bl	8005424 <_Balloc>
 8004a96:	9000      	str	r0, [sp, #0]
 8004a98:	2800      	cmp	r0, #0
 8004a9a:	d14b      	bne.n	8004b34 <_dtoa_r+0x31c>
 8004a9c:	4b24      	ldr	r3, [pc, #144]	; (8004b30 <_dtoa_r+0x318>)
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004aa4:	e6d1      	b.n	800484a <_dtoa_r+0x32>
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e7de      	b.n	8004a68 <_dtoa_r+0x250>
 8004aaa:	2300      	movs	r3, #0
 8004aac:	9308      	str	r3, [sp, #32]
 8004aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ab0:	eb0a 0903 	add.w	r9, sl, r3
 8004ab4:	f109 0301 	add.w	r3, r9, #1
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	9301      	str	r3, [sp, #4]
 8004abc:	bfb8      	it	lt
 8004abe:	2301      	movlt	r3, #1
 8004ac0:	e7dd      	b.n	8004a7e <_dtoa_r+0x266>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e7f2      	b.n	8004aac <_dtoa_r+0x294>
 8004ac6:	2501      	movs	r5, #1
 8004ac8:	2300      	movs	r3, #0
 8004aca:	9305      	str	r3, [sp, #20]
 8004acc:	9508      	str	r5, [sp, #32]
 8004ace:	f04f 39ff 	mov.w	r9, #4294967295
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f8cd 9004 	str.w	r9, [sp, #4]
 8004ad8:	2312      	movs	r3, #18
 8004ada:	9209      	str	r2, [sp, #36]	; 0x24
 8004adc:	e7cf      	b.n	8004a7e <_dtoa_r+0x266>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	9308      	str	r3, [sp, #32]
 8004ae2:	e7f4      	b.n	8004ace <_dtoa_r+0x2b6>
 8004ae4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004ae8:	f8cd 9004 	str.w	r9, [sp, #4]
 8004aec:	464b      	mov	r3, r9
 8004aee:	e7c6      	b.n	8004a7e <_dtoa_r+0x266>
 8004af0:	3101      	adds	r1, #1
 8004af2:	6041      	str	r1, [r0, #4]
 8004af4:	0052      	lsls	r2, r2, #1
 8004af6:	e7c6      	b.n	8004a86 <_dtoa_r+0x26e>
 8004af8:	636f4361 	.word	0x636f4361
 8004afc:	3fd287a7 	.word	0x3fd287a7
 8004b00:	8b60c8b3 	.word	0x8b60c8b3
 8004b04:	3fc68a28 	.word	0x3fc68a28
 8004b08:	509f79fb 	.word	0x509f79fb
 8004b0c:	3fd34413 	.word	0x3fd34413
 8004b10:	08006865 	.word	0x08006865
 8004b14:	0800687c 	.word	0x0800687c
 8004b18:	7ff00000 	.word	0x7ff00000
 8004b1c:	08006861 	.word	0x08006861
 8004b20:	08006858 	.word	0x08006858
 8004b24:	08006835 	.word	0x08006835
 8004b28:	3ff80000 	.word	0x3ff80000
 8004b2c:	08006978 	.word	0x08006978
 8004b30:	080068db 	.word	0x080068db
 8004b34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b36:	9a00      	ldr	r2, [sp, #0]
 8004b38:	601a      	str	r2, [r3, #0]
 8004b3a:	9b01      	ldr	r3, [sp, #4]
 8004b3c:	2b0e      	cmp	r3, #14
 8004b3e:	f200 80ad 	bhi.w	8004c9c <_dtoa_r+0x484>
 8004b42:	2d00      	cmp	r5, #0
 8004b44:	f000 80aa 	beq.w	8004c9c <_dtoa_r+0x484>
 8004b48:	f1ba 0f00 	cmp.w	sl, #0
 8004b4c:	dd36      	ble.n	8004bbc <_dtoa_r+0x3a4>
 8004b4e:	4ac3      	ldr	r2, [pc, #780]	; (8004e5c <_dtoa_r+0x644>)
 8004b50:	f00a 030f 	and.w	r3, sl, #15
 8004b54:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004b58:	ed93 7b00 	vldr	d7, [r3]
 8004b5c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004b60:	ea4f 172a 	mov.w	r7, sl, asr #4
 8004b64:	eeb0 8a47 	vmov.f32	s16, s14
 8004b68:	eef0 8a67 	vmov.f32	s17, s15
 8004b6c:	d016      	beq.n	8004b9c <_dtoa_r+0x384>
 8004b6e:	4bbc      	ldr	r3, [pc, #752]	; (8004e60 <_dtoa_r+0x648>)
 8004b70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004b74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004b78:	f7fb fe68 	bl	800084c <__aeabi_ddiv>
 8004b7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b80:	f007 070f 	and.w	r7, r7, #15
 8004b84:	2503      	movs	r5, #3
 8004b86:	4eb6      	ldr	r6, [pc, #728]	; (8004e60 <_dtoa_r+0x648>)
 8004b88:	b957      	cbnz	r7, 8004ba0 <_dtoa_r+0x388>
 8004b8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b8e:	ec53 2b18 	vmov	r2, r3, d8
 8004b92:	f7fb fe5b 	bl	800084c <__aeabi_ddiv>
 8004b96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b9a:	e029      	b.n	8004bf0 <_dtoa_r+0x3d8>
 8004b9c:	2502      	movs	r5, #2
 8004b9e:	e7f2      	b.n	8004b86 <_dtoa_r+0x36e>
 8004ba0:	07f9      	lsls	r1, r7, #31
 8004ba2:	d508      	bpl.n	8004bb6 <_dtoa_r+0x39e>
 8004ba4:	ec51 0b18 	vmov	r0, r1, d8
 8004ba8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004bac:	f7fb fd24 	bl	80005f8 <__aeabi_dmul>
 8004bb0:	ec41 0b18 	vmov	d8, r0, r1
 8004bb4:	3501      	adds	r5, #1
 8004bb6:	107f      	asrs	r7, r7, #1
 8004bb8:	3608      	adds	r6, #8
 8004bba:	e7e5      	b.n	8004b88 <_dtoa_r+0x370>
 8004bbc:	f000 80a6 	beq.w	8004d0c <_dtoa_r+0x4f4>
 8004bc0:	f1ca 0600 	rsb	r6, sl, #0
 8004bc4:	4ba5      	ldr	r3, [pc, #660]	; (8004e5c <_dtoa_r+0x644>)
 8004bc6:	4fa6      	ldr	r7, [pc, #664]	; (8004e60 <_dtoa_r+0x648>)
 8004bc8:	f006 020f 	and.w	r2, r6, #15
 8004bcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004bd8:	f7fb fd0e 	bl	80005f8 <__aeabi_dmul>
 8004bdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004be0:	1136      	asrs	r6, r6, #4
 8004be2:	2300      	movs	r3, #0
 8004be4:	2502      	movs	r5, #2
 8004be6:	2e00      	cmp	r6, #0
 8004be8:	f040 8085 	bne.w	8004cf6 <_dtoa_r+0x4de>
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1d2      	bne.n	8004b96 <_dtoa_r+0x37e>
 8004bf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 808c 	beq.w	8004d10 <_dtoa_r+0x4f8>
 8004bf8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004bfc:	4b99      	ldr	r3, [pc, #612]	; (8004e64 <_dtoa_r+0x64c>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	4630      	mov	r0, r6
 8004c02:	4639      	mov	r1, r7
 8004c04:	f7fb ff6a 	bl	8000adc <__aeabi_dcmplt>
 8004c08:	2800      	cmp	r0, #0
 8004c0a:	f000 8081 	beq.w	8004d10 <_dtoa_r+0x4f8>
 8004c0e:	9b01      	ldr	r3, [sp, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d07d      	beq.n	8004d10 <_dtoa_r+0x4f8>
 8004c14:	f1b9 0f00 	cmp.w	r9, #0
 8004c18:	dd3c      	ble.n	8004c94 <_dtoa_r+0x47c>
 8004c1a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004c1e:	9307      	str	r3, [sp, #28]
 8004c20:	2200      	movs	r2, #0
 8004c22:	4b91      	ldr	r3, [pc, #580]	; (8004e68 <_dtoa_r+0x650>)
 8004c24:	4630      	mov	r0, r6
 8004c26:	4639      	mov	r1, r7
 8004c28:	f7fb fce6 	bl	80005f8 <__aeabi_dmul>
 8004c2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c30:	3501      	adds	r5, #1
 8004c32:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8004c36:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	f7fb fc72 	bl	8000524 <__aeabi_i2d>
 8004c40:	4632      	mov	r2, r6
 8004c42:	463b      	mov	r3, r7
 8004c44:	f7fb fcd8 	bl	80005f8 <__aeabi_dmul>
 8004c48:	4b88      	ldr	r3, [pc, #544]	; (8004e6c <_dtoa_r+0x654>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f7fb fb1e 	bl	800028c <__adddf3>
 8004c50:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004c54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c58:	9303      	str	r3, [sp, #12]
 8004c5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d15c      	bne.n	8004d1a <_dtoa_r+0x502>
 8004c60:	4b83      	ldr	r3, [pc, #524]	; (8004e70 <_dtoa_r+0x658>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	4630      	mov	r0, r6
 8004c66:	4639      	mov	r1, r7
 8004c68:	f7fb fb0e 	bl	8000288 <__aeabi_dsub>
 8004c6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c70:	4606      	mov	r6, r0
 8004c72:	460f      	mov	r7, r1
 8004c74:	f7fb ff50 	bl	8000b18 <__aeabi_dcmpgt>
 8004c78:	2800      	cmp	r0, #0
 8004c7a:	f040 8296 	bne.w	80051aa <_dtoa_r+0x992>
 8004c7e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004c82:	4630      	mov	r0, r6
 8004c84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004c88:	4639      	mov	r1, r7
 8004c8a:	f7fb ff27 	bl	8000adc <__aeabi_dcmplt>
 8004c8e:	2800      	cmp	r0, #0
 8004c90:	f040 8288 	bne.w	80051a4 <_dtoa_r+0x98c>
 8004c94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004c98:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f2c0 8158 	blt.w	8004f54 <_dtoa_r+0x73c>
 8004ca4:	f1ba 0f0e 	cmp.w	sl, #14
 8004ca8:	f300 8154 	bgt.w	8004f54 <_dtoa_r+0x73c>
 8004cac:	4b6b      	ldr	r3, [pc, #428]	; (8004e5c <_dtoa_r+0x644>)
 8004cae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004cb2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f280 80e3 	bge.w	8004e84 <_dtoa_r+0x66c>
 8004cbe:	9b01      	ldr	r3, [sp, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f300 80df 	bgt.w	8004e84 <_dtoa_r+0x66c>
 8004cc6:	f040 826d 	bne.w	80051a4 <_dtoa_r+0x98c>
 8004cca:	4b69      	ldr	r3, [pc, #420]	; (8004e70 <_dtoa_r+0x658>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	4640      	mov	r0, r8
 8004cd0:	4649      	mov	r1, r9
 8004cd2:	f7fb fc91 	bl	80005f8 <__aeabi_dmul>
 8004cd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004cda:	f7fb ff13 	bl	8000b04 <__aeabi_dcmpge>
 8004cde:	9e01      	ldr	r6, [sp, #4]
 8004ce0:	4637      	mov	r7, r6
 8004ce2:	2800      	cmp	r0, #0
 8004ce4:	f040 8243 	bne.w	800516e <_dtoa_r+0x956>
 8004ce8:	9d00      	ldr	r5, [sp, #0]
 8004cea:	2331      	movs	r3, #49	; 0x31
 8004cec:	f805 3b01 	strb.w	r3, [r5], #1
 8004cf0:	f10a 0a01 	add.w	sl, sl, #1
 8004cf4:	e23f      	b.n	8005176 <_dtoa_r+0x95e>
 8004cf6:	07f2      	lsls	r2, r6, #31
 8004cf8:	d505      	bpl.n	8004d06 <_dtoa_r+0x4ee>
 8004cfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cfe:	f7fb fc7b 	bl	80005f8 <__aeabi_dmul>
 8004d02:	3501      	adds	r5, #1
 8004d04:	2301      	movs	r3, #1
 8004d06:	1076      	asrs	r6, r6, #1
 8004d08:	3708      	adds	r7, #8
 8004d0a:	e76c      	b.n	8004be6 <_dtoa_r+0x3ce>
 8004d0c:	2502      	movs	r5, #2
 8004d0e:	e76f      	b.n	8004bf0 <_dtoa_r+0x3d8>
 8004d10:	9b01      	ldr	r3, [sp, #4]
 8004d12:	f8cd a01c 	str.w	sl, [sp, #28]
 8004d16:	930c      	str	r3, [sp, #48]	; 0x30
 8004d18:	e78d      	b.n	8004c36 <_dtoa_r+0x41e>
 8004d1a:	9900      	ldr	r1, [sp, #0]
 8004d1c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004d1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d20:	4b4e      	ldr	r3, [pc, #312]	; (8004e5c <_dtoa_r+0x644>)
 8004d22:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004d26:	4401      	add	r1, r0
 8004d28:	9102      	str	r1, [sp, #8]
 8004d2a:	9908      	ldr	r1, [sp, #32]
 8004d2c:	eeb0 8a47 	vmov.f32	s16, s14
 8004d30:	eef0 8a67 	vmov.f32	s17, s15
 8004d34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d38:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004d3c:	2900      	cmp	r1, #0
 8004d3e:	d045      	beq.n	8004dcc <_dtoa_r+0x5b4>
 8004d40:	494c      	ldr	r1, [pc, #304]	; (8004e74 <_dtoa_r+0x65c>)
 8004d42:	2000      	movs	r0, #0
 8004d44:	f7fb fd82 	bl	800084c <__aeabi_ddiv>
 8004d48:	ec53 2b18 	vmov	r2, r3, d8
 8004d4c:	f7fb fa9c 	bl	8000288 <__aeabi_dsub>
 8004d50:	9d00      	ldr	r5, [sp, #0]
 8004d52:	ec41 0b18 	vmov	d8, r0, r1
 8004d56:	4639      	mov	r1, r7
 8004d58:	4630      	mov	r0, r6
 8004d5a:	f7fb fefd 	bl	8000b58 <__aeabi_d2iz>
 8004d5e:	900c      	str	r0, [sp, #48]	; 0x30
 8004d60:	f7fb fbe0 	bl	8000524 <__aeabi_i2d>
 8004d64:	4602      	mov	r2, r0
 8004d66:	460b      	mov	r3, r1
 8004d68:	4630      	mov	r0, r6
 8004d6a:	4639      	mov	r1, r7
 8004d6c:	f7fb fa8c 	bl	8000288 <__aeabi_dsub>
 8004d70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004d72:	3330      	adds	r3, #48	; 0x30
 8004d74:	f805 3b01 	strb.w	r3, [r5], #1
 8004d78:	ec53 2b18 	vmov	r2, r3, d8
 8004d7c:	4606      	mov	r6, r0
 8004d7e:	460f      	mov	r7, r1
 8004d80:	f7fb feac 	bl	8000adc <__aeabi_dcmplt>
 8004d84:	2800      	cmp	r0, #0
 8004d86:	d165      	bne.n	8004e54 <_dtoa_r+0x63c>
 8004d88:	4632      	mov	r2, r6
 8004d8a:	463b      	mov	r3, r7
 8004d8c:	4935      	ldr	r1, [pc, #212]	; (8004e64 <_dtoa_r+0x64c>)
 8004d8e:	2000      	movs	r0, #0
 8004d90:	f7fb fa7a 	bl	8000288 <__aeabi_dsub>
 8004d94:	ec53 2b18 	vmov	r2, r3, d8
 8004d98:	f7fb fea0 	bl	8000adc <__aeabi_dcmplt>
 8004d9c:	2800      	cmp	r0, #0
 8004d9e:	f040 80b9 	bne.w	8004f14 <_dtoa_r+0x6fc>
 8004da2:	9b02      	ldr	r3, [sp, #8]
 8004da4:	429d      	cmp	r5, r3
 8004da6:	f43f af75 	beq.w	8004c94 <_dtoa_r+0x47c>
 8004daa:	4b2f      	ldr	r3, [pc, #188]	; (8004e68 <_dtoa_r+0x650>)
 8004dac:	ec51 0b18 	vmov	r0, r1, d8
 8004db0:	2200      	movs	r2, #0
 8004db2:	f7fb fc21 	bl	80005f8 <__aeabi_dmul>
 8004db6:	4b2c      	ldr	r3, [pc, #176]	; (8004e68 <_dtoa_r+0x650>)
 8004db8:	ec41 0b18 	vmov	d8, r0, r1
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	4630      	mov	r0, r6
 8004dc0:	4639      	mov	r1, r7
 8004dc2:	f7fb fc19 	bl	80005f8 <__aeabi_dmul>
 8004dc6:	4606      	mov	r6, r0
 8004dc8:	460f      	mov	r7, r1
 8004dca:	e7c4      	b.n	8004d56 <_dtoa_r+0x53e>
 8004dcc:	ec51 0b17 	vmov	r0, r1, d7
 8004dd0:	f7fb fc12 	bl	80005f8 <__aeabi_dmul>
 8004dd4:	9b02      	ldr	r3, [sp, #8]
 8004dd6:	9d00      	ldr	r5, [sp, #0]
 8004dd8:	930c      	str	r3, [sp, #48]	; 0x30
 8004dda:	ec41 0b18 	vmov	d8, r0, r1
 8004dde:	4639      	mov	r1, r7
 8004de0:	4630      	mov	r0, r6
 8004de2:	f7fb feb9 	bl	8000b58 <__aeabi_d2iz>
 8004de6:	9011      	str	r0, [sp, #68]	; 0x44
 8004de8:	f7fb fb9c 	bl	8000524 <__aeabi_i2d>
 8004dec:	4602      	mov	r2, r0
 8004dee:	460b      	mov	r3, r1
 8004df0:	4630      	mov	r0, r6
 8004df2:	4639      	mov	r1, r7
 8004df4:	f7fb fa48 	bl	8000288 <__aeabi_dsub>
 8004df8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004dfa:	3330      	adds	r3, #48	; 0x30
 8004dfc:	f805 3b01 	strb.w	r3, [r5], #1
 8004e00:	9b02      	ldr	r3, [sp, #8]
 8004e02:	429d      	cmp	r5, r3
 8004e04:	4606      	mov	r6, r0
 8004e06:	460f      	mov	r7, r1
 8004e08:	f04f 0200 	mov.w	r2, #0
 8004e0c:	d134      	bne.n	8004e78 <_dtoa_r+0x660>
 8004e0e:	4b19      	ldr	r3, [pc, #100]	; (8004e74 <_dtoa_r+0x65c>)
 8004e10:	ec51 0b18 	vmov	r0, r1, d8
 8004e14:	f7fb fa3a 	bl	800028c <__adddf3>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	4630      	mov	r0, r6
 8004e1e:	4639      	mov	r1, r7
 8004e20:	f7fb fe7a 	bl	8000b18 <__aeabi_dcmpgt>
 8004e24:	2800      	cmp	r0, #0
 8004e26:	d175      	bne.n	8004f14 <_dtoa_r+0x6fc>
 8004e28:	ec53 2b18 	vmov	r2, r3, d8
 8004e2c:	4911      	ldr	r1, [pc, #68]	; (8004e74 <_dtoa_r+0x65c>)
 8004e2e:	2000      	movs	r0, #0
 8004e30:	f7fb fa2a 	bl	8000288 <__aeabi_dsub>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	4630      	mov	r0, r6
 8004e3a:	4639      	mov	r1, r7
 8004e3c:	f7fb fe4e 	bl	8000adc <__aeabi_dcmplt>
 8004e40:	2800      	cmp	r0, #0
 8004e42:	f43f af27 	beq.w	8004c94 <_dtoa_r+0x47c>
 8004e46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e48:	1e6b      	subs	r3, r5, #1
 8004e4a:	930c      	str	r3, [sp, #48]	; 0x30
 8004e4c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004e50:	2b30      	cmp	r3, #48	; 0x30
 8004e52:	d0f8      	beq.n	8004e46 <_dtoa_r+0x62e>
 8004e54:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004e58:	e04a      	b.n	8004ef0 <_dtoa_r+0x6d8>
 8004e5a:	bf00      	nop
 8004e5c:	08006978 	.word	0x08006978
 8004e60:	08006950 	.word	0x08006950
 8004e64:	3ff00000 	.word	0x3ff00000
 8004e68:	40240000 	.word	0x40240000
 8004e6c:	401c0000 	.word	0x401c0000
 8004e70:	40140000 	.word	0x40140000
 8004e74:	3fe00000 	.word	0x3fe00000
 8004e78:	4baf      	ldr	r3, [pc, #700]	; (8005138 <_dtoa_r+0x920>)
 8004e7a:	f7fb fbbd 	bl	80005f8 <__aeabi_dmul>
 8004e7e:	4606      	mov	r6, r0
 8004e80:	460f      	mov	r7, r1
 8004e82:	e7ac      	b.n	8004dde <_dtoa_r+0x5c6>
 8004e84:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004e88:	9d00      	ldr	r5, [sp, #0]
 8004e8a:	4642      	mov	r2, r8
 8004e8c:	464b      	mov	r3, r9
 8004e8e:	4630      	mov	r0, r6
 8004e90:	4639      	mov	r1, r7
 8004e92:	f7fb fcdb 	bl	800084c <__aeabi_ddiv>
 8004e96:	f7fb fe5f 	bl	8000b58 <__aeabi_d2iz>
 8004e9a:	9002      	str	r0, [sp, #8]
 8004e9c:	f7fb fb42 	bl	8000524 <__aeabi_i2d>
 8004ea0:	4642      	mov	r2, r8
 8004ea2:	464b      	mov	r3, r9
 8004ea4:	f7fb fba8 	bl	80005f8 <__aeabi_dmul>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4630      	mov	r0, r6
 8004eae:	4639      	mov	r1, r7
 8004eb0:	f7fb f9ea 	bl	8000288 <__aeabi_dsub>
 8004eb4:	9e02      	ldr	r6, [sp, #8]
 8004eb6:	9f01      	ldr	r7, [sp, #4]
 8004eb8:	3630      	adds	r6, #48	; 0x30
 8004eba:	f805 6b01 	strb.w	r6, [r5], #1
 8004ebe:	9e00      	ldr	r6, [sp, #0]
 8004ec0:	1bae      	subs	r6, r5, r6
 8004ec2:	42b7      	cmp	r7, r6
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	d137      	bne.n	8004f3a <_dtoa_r+0x722>
 8004eca:	f7fb f9df 	bl	800028c <__adddf3>
 8004ece:	4642      	mov	r2, r8
 8004ed0:	464b      	mov	r3, r9
 8004ed2:	4606      	mov	r6, r0
 8004ed4:	460f      	mov	r7, r1
 8004ed6:	f7fb fe1f 	bl	8000b18 <__aeabi_dcmpgt>
 8004eda:	b9c8      	cbnz	r0, 8004f10 <_dtoa_r+0x6f8>
 8004edc:	4642      	mov	r2, r8
 8004ede:	464b      	mov	r3, r9
 8004ee0:	4630      	mov	r0, r6
 8004ee2:	4639      	mov	r1, r7
 8004ee4:	f7fb fdf0 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ee8:	b110      	cbz	r0, 8004ef0 <_dtoa_r+0x6d8>
 8004eea:	9b02      	ldr	r3, [sp, #8]
 8004eec:	07d9      	lsls	r1, r3, #31
 8004eee:	d40f      	bmi.n	8004f10 <_dtoa_r+0x6f8>
 8004ef0:	4620      	mov	r0, r4
 8004ef2:	4659      	mov	r1, fp
 8004ef4:	f000 fad6 	bl	80054a4 <_Bfree>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	702b      	strb	r3, [r5, #0]
 8004efc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004efe:	f10a 0001 	add.w	r0, sl, #1
 8004f02:	6018      	str	r0, [r3, #0]
 8004f04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	f43f acd8 	beq.w	80048bc <_dtoa_r+0xa4>
 8004f0c:	601d      	str	r5, [r3, #0]
 8004f0e:	e4d5      	b.n	80048bc <_dtoa_r+0xa4>
 8004f10:	f8cd a01c 	str.w	sl, [sp, #28]
 8004f14:	462b      	mov	r3, r5
 8004f16:	461d      	mov	r5, r3
 8004f18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f1c:	2a39      	cmp	r2, #57	; 0x39
 8004f1e:	d108      	bne.n	8004f32 <_dtoa_r+0x71a>
 8004f20:	9a00      	ldr	r2, [sp, #0]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d1f7      	bne.n	8004f16 <_dtoa_r+0x6fe>
 8004f26:	9a07      	ldr	r2, [sp, #28]
 8004f28:	9900      	ldr	r1, [sp, #0]
 8004f2a:	3201      	adds	r2, #1
 8004f2c:	9207      	str	r2, [sp, #28]
 8004f2e:	2230      	movs	r2, #48	; 0x30
 8004f30:	700a      	strb	r2, [r1, #0]
 8004f32:	781a      	ldrb	r2, [r3, #0]
 8004f34:	3201      	adds	r2, #1
 8004f36:	701a      	strb	r2, [r3, #0]
 8004f38:	e78c      	b.n	8004e54 <_dtoa_r+0x63c>
 8004f3a:	4b7f      	ldr	r3, [pc, #508]	; (8005138 <_dtoa_r+0x920>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f7fb fb5b 	bl	80005f8 <__aeabi_dmul>
 8004f42:	2200      	movs	r2, #0
 8004f44:	2300      	movs	r3, #0
 8004f46:	4606      	mov	r6, r0
 8004f48:	460f      	mov	r7, r1
 8004f4a:	f7fb fdbd 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f4e:	2800      	cmp	r0, #0
 8004f50:	d09b      	beq.n	8004e8a <_dtoa_r+0x672>
 8004f52:	e7cd      	b.n	8004ef0 <_dtoa_r+0x6d8>
 8004f54:	9a08      	ldr	r2, [sp, #32]
 8004f56:	2a00      	cmp	r2, #0
 8004f58:	f000 80c4 	beq.w	80050e4 <_dtoa_r+0x8cc>
 8004f5c:	9a05      	ldr	r2, [sp, #20]
 8004f5e:	2a01      	cmp	r2, #1
 8004f60:	f300 80a8 	bgt.w	80050b4 <_dtoa_r+0x89c>
 8004f64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004f66:	2a00      	cmp	r2, #0
 8004f68:	f000 80a0 	beq.w	80050ac <_dtoa_r+0x894>
 8004f6c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004f70:	9e06      	ldr	r6, [sp, #24]
 8004f72:	4645      	mov	r5, r8
 8004f74:	9a04      	ldr	r2, [sp, #16]
 8004f76:	2101      	movs	r1, #1
 8004f78:	441a      	add	r2, r3
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	4498      	add	r8, r3
 8004f7e:	9204      	str	r2, [sp, #16]
 8004f80:	f000 fb4c 	bl	800561c <__i2b>
 8004f84:	4607      	mov	r7, r0
 8004f86:	2d00      	cmp	r5, #0
 8004f88:	dd0b      	ble.n	8004fa2 <_dtoa_r+0x78a>
 8004f8a:	9b04      	ldr	r3, [sp, #16]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	dd08      	ble.n	8004fa2 <_dtoa_r+0x78a>
 8004f90:	42ab      	cmp	r3, r5
 8004f92:	9a04      	ldr	r2, [sp, #16]
 8004f94:	bfa8      	it	ge
 8004f96:	462b      	movge	r3, r5
 8004f98:	eba8 0803 	sub.w	r8, r8, r3
 8004f9c:	1aed      	subs	r5, r5, r3
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	9304      	str	r3, [sp, #16]
 8004fa2:	9b06      	ldr	r3, [sp, #24]
 8004fa4:	b1fb      	cbz	r3, 8004fe6 <_dtoa_r+0x7ce>
 8004fa6:	9b08      	ldr	r3, [sp, #32]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f000 809f 	beq.w	80050ec <_dtoa_r+0x8d4>
 8004fae:	2e00      	cmp	r6, #0
 8004fb0:	dd11      	ble.n	8004fd6 <_dtoa_r+0x7be>
 8004fb2:	4639      	mov	r1, r7
 8004fb4:	4632      	mov	r2, r6
 8004fb6:	4620      	mov	r0, r4
 8004fb8:	f000 fbec 	bl	8005794 <__pow5mult>
 8004fbc:	465a      	mov	r2, fp
 8004fbe:	4601      	mov	r1, r0
 8004fc0:	4607      	mov	r7, r0
 8004fc2:	4620      	mov	r0, r4
 8004fc4:	f000 fb40 	bl	8005648 <__multiply>
 8004fc8:	4659      	mov	r1, fp
 8004fca:	9007      	str	r0, [sp, #28]
 8004fcc:	4620      	mov	r0, r4
 8004fce:	f000 fa69 	bl	80054a4 <_Bfree>
 8004fd2:	9b07      	ldr	r3, [sp, #28]
 8004fd4:	469b      	mov	fp, r3
 8004fd6:	9b06      	ldr	r3, [sp, #24]
 8004fd8:	1b9a      	subs	r2, r3, r6
 8004fda:	d004      	beq.n	8004fe6 <_dtoa_r+0x7ce>
 8004fdc:	4659      	mov	r1, fp
 8004fde:	4620      	mov	r0, r4
 8004fe0:	f000 fbd8 	bl	8005794 <__pow5mult>
 8004fe4:	4683      	mov	fp, r0
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	4620      	mov	r0, r4
 8004fea:	f000 fb17 	bl	800561c <__i2b>
 8004fee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	4606      	mov	r6, r0
 8004ff4:	dd7c      	ble.n	80050f0 <_dtoa_r+0x8d8>
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	4601      	mov	r1, r0
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	f000 fbca 	bl	8005794 <__pow5mult>
 8005000:	9b05      	ldr	r3, [sp, #20]
 8005002:	2b01      	cmp	r3, #1
 8005004:	4606      	mov	r6, r0
 8005006:	dd76      	ble.n	80050f6 <_dtoa_r+0x8de>
 8005008:	2300      	movs	r3, #0
 800500a:	9306      	str	r3, [sp, #24]
 800500c:	6933      	ldr	r3, [r6, #16]
 800500e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005012:	6918      	ldr	r0, [r3, #16]
 8005014:	f000 fab2 	bl	800557c <__hi0bits>
 8005018:	f1c0 0020 	rsb	r0, r0, #32
 800501c:	9b04      	ldr	r3, [sp, #16]
 800501e:	4418      	add	r0, r3
 8005020:	f010 001f 	ands.w	r0, r0, #31
 8005024:	f000 8086 	beq.w	8005134 <_dtoa_r+0x91c>
 8005028:	f1c0 0320 	rsb	r3, r0, #32
 800502c:	2b04      	cmp	r3, #4
 800502e:	dd7f      	ble.n	8005130 <_dtoa_r+0x918>
 8005030:	f1c0 001c 	rsb	r0, r0, #28
 8005034:	9b04      	ldr	r3, [sp, #16]
 8005036:	4403      	add	r3, r0
 8005038:	4480      	add	r8, r0
 800503a:	4405      	add	r5, r0
 800503c:	9304      	str	r3, [sp, #16]
 800503e:	f1b8 0f00 	cmp.w	r8, #0
 8005042:	dd05      	ble.n	8005050 <_dtoa_r+0x838>
 8005044:	4659      	mov	r1, fp
 8005046:	4642      	mov	r2, r8
 8005048:	4620      	mov	r0, r4
 800504a:	f000 fbfd 	bl	8005848 <__lshift>
 800504e:	4683      	mov	fp, r0
 8005050:	9b04      	ldr	r3, [sp, #16]
 8005052:	2b00      	cmp	r3, #0
 8005054:	dd05      	ble.n	8005062 <_dtoa_r+0x84a>
 8005056:	4631      	mov	r1, r6
 8005058:	461a      	mov	r2, r3
 800505a:	4620      	mov	r0, r4
 800505c:	f000 fbf4 	bl	8005848 <__lshift>
 8005060:	4606      	mov	r6, r0
 8005062:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005064:	2b00      	cmp	r3, #0
 8005066:	d069      	beq.n	800513c <_dtoa_r+0x924>
 8005068:	4631      	mov	r1, r6
 800506a:	4658      	mov	r0, fp
 800506c:	f000 fc58 	bl	8005920 <__mcmp>
 8005070:	2800      	cmp	r0, #0
 8005072:	da63      	bge.n	800513c <_dtoa_r+0x924>
 8005074:	2300      	movs	r3, #0
 8005076:	4659      	mov	r1, fp
 8005078:	220a      	movs	r2, #10
 800507a:	4620      	mov	r0, r4
 800507c:	f000 fa34 	bl	80054e8 <__multadd>
 8005080:	9b08      	ldr	r3, [sp, #32]
 8005082:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005086:	4683      	mov	fp, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 818f 	beq.w	80053ac <_dtoa_r+0xb94>
 800508e:	4639      	mov	r1, r7
 8005090:	2300      	movs	r3, #0
 8005092:	220a      	movs	r2, #10
 8005094:	4620      	mov	r0, r4
 8005096:	f000 fa27 	bl	80054e8 <__multadd>
 800509a:	f1b9 0f00 	cmp.w	r9, #0
 800509e:	4607      	mov	r7, r0
 80050a0:	f300 808e 	bgt.w	80051c0 <_dtoa_r+0x9a8>
 80050a4:	9b05      	ldr	r3, [sp, #20]
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	dc50      	bgt.n	800514c <_dtoa_r+0x934>
 80050aa:	e089      	b.n	80051c0 <_dtoa_r+0x9a8>
 80050ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80050ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80050b2:	e75d      	b.n	8004f70 <_dtoa_r+0x758>
 80050b4:	9b01      	ldr	r3, [sp, #4]
 80050b6:	1e5e      	subs	r6, r3, #1
 80050b8:	9b06      	ldr	r3, [sp, #24]
 80050ba:	42b3      	cmp	r3, r6
 80050bc:	bfbf      	itttt	lt
 80050be:	9b06      	ldrlt	r3, [sp, #24]
 80050c0:	9606      	strlt	r6, [sp, #24]
 80050c2:	1af2      	sublt	r2, r6, r3
 80050c4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80050c6:	bfb6      	itet	lt
 80050c8:	189b      	addlt	r3, r3, r2
 80050ca:	1b9e      	subge	r6, r3, r6
 80050cc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80050ce:	9b01      	ldr	r3, [sp, #4]
 80050d0:	bfb8      	it	lt
 80050d2:	2600      	movlt	r6, #0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	bfb5      	itete	lt
 80050d8:	eba8 0503 	sublt.w	r5, r8, r3
 80050dc:	9b01      	ldrge	r3, [sp, #4]
 80050de:	2300      	movlt	r3, #0
 80050e0:	4645      	movge	r5, r8
 80050e2:	e747      	b.n	8004f74 <_dtoa_r+0x75c>
 80050e4:	9e06      	ldr	r6, [sp, #24]
 80050e6:	9f08      	ldr	r7, [sp, #32]
 80050e8:	4645      	mov	r5, r8
 80050ea:	e74c      	b.n	8004f86 <_dtoa_r+0x76e>
 80050ec:	9a06      	ldr	r2, [sp, #24]
 80050ee:	e775      	b.n	8004fdc <_dtoa_r+0x7c4>
 80050f0:	9b05      	ldr	r3, [sp, #20]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	dc18      	bgt.n	8005128 <_dtoa_r+0x910>
 80050f6:	9b02      	ldr	r3, [sp, #8]
 80050f8:	b9b3      	cbnz	r3, 8005128 <_dtoa_r+0x910>
 80050fa:	9b03      	ldr	r3, [sp, #12]
 80050fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005100:	b9a3      	cbnz	r3, 800512c <_dtoa_r+0x914>
 8005102:	9b03      	ldr	r3, [sp, #12]
 8005104:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005108:	0d1b      	lsrs	r3, r3, #20
 800510a:	051b      	lsls	r3, r3, #20
 800510c:	b12b      	cbz	r3, 800511a <_dtoa_r+0x902>
 800510e:	9b04      	ldr	r3, [sp, #16]
 8005110:	3301      	adds	r3, #1
 8005112:	9304      	str	r3, [sp, #16]
 8005114:	f108 0801 	add.w	r8, r8, #1
 8005118:	2301      	movs	r3, #1
 800511a:	9306      	str	r3, [sp, #24]
 800511c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800511e:	2b00      	cmp	r3, #0
 8005120:	f47f af74 	bne.w	800500c <_dtoa_r+0x7f4>
 8005124:	2001      	movs	r0, #1
 8005126:	e779      	b.n	800501c <_dtoa_r+0x804>
 8005128:	2300      	movs	r3, #0
 800512a:	e7f6      	b.n	800511a <_dtoa_r+0x902>
 800512c:	9b02      	ldr	r3, [sp, #8]
 800512e:	e7f4      	b.n	800511a <_dtoa_r+0x902>
 8005130:	d085      	beq.n	800503e <_dtoa_r+0x826>
 8005132:	4618      	mov	r0, r3
 8005134:	301c      	adds	r0, #28
 8005136:	e77d      	b.n	8005034 <_dtoa_r+0x81c>
 8005138:	40240000 	.word	0x40240000
 800513c:	9b01      	ldr	r3, [sp, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	dc38      	bgt.n	80051b4 <_dtoa_r+0x99c>
 8005142:	9b05      	ldr	r3, [sp, #20]
 8005144:	2b02      	cmp	r3, #2
 8005146:	dd35      	ble.n	80051b4 <_dtoa_r+0x99c>
 8005148:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800514c:	f1b9 0f00 	cmp.w	r9, #0
 8005150:	d10d      	bne.n	800516e <_dtoa_r+0x956>
 8005152:	4631      	mov	r1, r6
 8005154:	464b      	mov	r3, r9
 8005156:	2205      	movs	r2, #5
 8005158:	4620      	mov	r0, r4
 800515a:	f000 f9c5 	bl	80054e8 <__multadd>
 800515e:	4601      	mov	r1, r0
 8005160:	4606      	mov	r6, r0
 8005162:	4658      	mov	r0, fp
 8005164:	f000 fbdc 	bl	8005920 <__mcmp>
 8005168:	2800      	cmp	r0, #0
 800516a:	f73f adbd 	bgt.w	8004ce8 <_dtoa_r+0x4d0>
 800516e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005170:	9d00      	ldr	r5, [sp, #0]
 8005172:	ea6f 0a03 	mvn.w	sl, r3
 8005176:	f04f 0800 	mov.w	r8, #0
 800517a:	4631      	mov	r1, r6
 800517c:	4620      	mov	r0, r4
 800517e:	f000 f991 	bl	80054a4 <_Bfree>
 8005182:	2f00      	cmp	r7, #0
 8005184:	f43f aeb4 	beq.w	8004ef0 <_dtoa_r+0x6d8>
 8005188:	f1b8 0f00 	cmp.w	r8, #0
 800518c:	d005      	beq.n	800519a <_dtoa_r+0x982>
 800518e:	45b8      	cmp	r8, r7
 8005190:	d003      	beq.n	800519a <_dtoa_r+0x982>
 8005192:	4641      	mov	r1, r8
 8005194:	4620      	mov	r0, r4
 8005196:	f000 f985 	bl	80054a4 <_Bfree>
 800519a:	4639      	mov	r1, r7
 800519c:	4620      	mov	r0, r4
 800519e:	f000 f981 	bl	80054a4 <_Bfree>
 80051a2:	e6a5      	b.n	8004ef0 <_dtoa_r+0x6d8>
 80051a4:	2600      	movs	r6, #0
 80051a6:	4637      	mov	r7, r6
 80051a8:	e7e1      	b.n	800516e <_dtoa_r+0x956>
 80051aa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80051ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80051b0:	4637      	mov	r7, r6
 80051b2:	e599      	b.n	8004ce8 <_dtoa_r+0x4d0>
 80051b4:	9b08      	ldr	r3, [sp, #32]
 80051b6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 80fd 	beq.w	80053ba <_dtoa_r+0xba2>
 80051c0:	2d00      	cmp	r5, #0
 80051c2:	dd05      	ble.n	80051d0 <_dtoa_r+0x9b8>
 80051c4:	4639      	mov	r1, r7
 80051c6:	462a      	mov	r2, r5
 80051c8:	4620      	mov	r0, r4
 80051ca:	f000 fb3d 	bl	8005848 <__lshift>
 80051ce:	4607      	mov	r7, r0
 80051d0:	9b06      	ldr	r3, [sp, #24]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d05c      	beq.n	8005290 <_dtoa_r+0xa78>
 80051d6:	6879      	ldr	r1, [r7, #4]
 80051d8:	4620      	mov	r0, r4
 80051da:	f000 f923 	bl	8005424 <_Balloc>
 80051de:	4605      	mov	r5, r0
 80051e0:	b928      	cbnz	r0, 80051ee <_dtoa_r+0x9d6>
 80051e2:	4b80      	ldr	r3, [pc, #512]	; (80053e4 <_dtoa_r+0xbcc>)
 80051e4:	4602      	mov	r2, r0
 80051e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80051ea:	f7ff bb2e 	b.w	800484a <_dtoa_r+0x32>
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	3202      	adds	r2, #2
 80051f2:	0092      	lsls	r2, r2, #2
 80051f4:	f107 010c 	add.w	r1, r7, #12
 80051f8:	300c      	adds	r0, #12
 80051fa:	f000 f905 	bl	8005408 <memcpy>
 80051fe:	2201      	movs	r2, #1
 8005200:	4629      	mov	r1, r5
 8005202:	4620      	mov	r0, r4
 8005204:	f000 fb20 	bl	8005848 <__lshift>
 8005208:	9b00      	ldr	r3, [sp, #0]
 800520a:	3301      	adds	r3, #1
 800520c:	9301      	str	r3, [sp, #4]
 800520e:	9b00      	ldr	r3, [sp, #0]
 8005210:	444b      	add	r3, r9
 8005212:	9307      	str	r3, [sp, #28]
 8005214:	9b02      	ldr	r3, [sp, #8]
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	46b8      	mov	r8, r7
 800521c:	9306      	str	r3, [sp, #24]
 800521e:	4607      	mov	r7, r0
 8005220:	9b01      	ldr	r3, [sp, #4]
 8005222:	4631      	mov	r1, r6
 8005224:	3b01      	subs	r3, #1
 8005226:	4658      	mov	r0, fp
 8005228:	9302      	str	r3, [sp, #8]
 800522a:	f7ff fa69 	bl	8004700 <quorem>
 800522e:	4603      	mov	r3, r0
 8005230:	3330      	adds	r3, #48	; 0x30
 8005232:	9004      	str	r0, [sp, #16]
 8005234:	4641      	mov	r1, r8
 8005236:	4658      	mov	r0, fp
 8005238:	9308      	str	r3, [sp, #32]
 800523a:	f000 fb71 	bl	8005920 <__mcmp>
 800523e:	463a      	mov	r2, r7
 8005240:	4681      	mov	r9, r0
 8005242:	4631      	mov	r1, r6
 8005244:	4620      	mov	r0, r4
 8005246:	f000 fb87 	bl	8005958 <__mdiff>
 800524a:	68c2      	ldr	r2, [r0, #12]
 800524c:	9b08      	ldr	r3, [sp, #32]
 800524e:	4605      	mov	r5, r0
 8005250:	bb02      	cbnz	r2, 8005294 <_dtoa_r+0xa7c>
 8005252:	4601      	mov	r1, r0
 8005254:	4658      	mov	r0, fp
 8005256:	f000 fb63 	bl	8005920 <__mcmp>
 800525a:	9b08      	ldr	r3, [sp, #32]
 800525c:	4602      	mov	r2, r0
 800525e:	4629      	mov	r1, r5
 8005260:	4620      	mov	r0, r4
 8005262:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005266:	f000 f91d 	bl	80054a4 <_Bfree>
 800526a:	9b05      	ldr	r3, [sp, #20]
 800526c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800526e:	9d01      	ldr	r5, [sp, #4]
 8005270:	ea43 0102 	orr.w	r1, r3, r2
 8005274:	9b06      	ldr	r3, [sp, #24]
 8005276:	430b      	orrs	r3, r1
 8005278:	9b08      	ldr	r3, [sp, #32]
 800527a:	d10d      	bne.n	8005298 <_dtoa_r+0xa80>
 800527c:	2b39      	cmp	r3, #57	; 0x39
 800527e:	d029      	beq.n	80052d4 <_dtoa_r+0xabc>
 8005280:	f1b9 0f00 	cmp.w	r9, #0
 8005284:	dd01      	ble.n	800528a <_dtoa_r+0xa72>
 8005286:	9b04      	ldr	r3, [sp, #16]
 8005288:	3331      	adds	r3, #49	; 0x31
 800528a:	9a02      	ldr	r2, [sp, #8]
 800528c:	7013      	strb	r3, [r2, #0]
 800528e:	e774      	b.n	800517a <_dtoa_r+0x962>
 8005290:	4638      	mov	r0, r7
 8005292:	e7b9      	b.n	8005208 <_dtoa_r+0x9f0>
 8005294:	2201      	movs	r2, #1
 8005296:	e7e2      	b.n	800525e <_dtoa_r+0xa46>
 8005298:	f1b9 0f00 	cmp.w	r9, #0
 800529c:	db06      	blt.n	80052ac <_dtoa_r+0xa94>
 800529e:	9905      	ldr	r1, [sp, #20]
 80052a0:	ea41 0909 	orr.w	r9, r1, r9
 80052a4:	9906      	ldr	r1, [sp, #24]
 80052a6:	ea59 0101 	orrs.w	r1, r9, r1
 80052aa:	d120      	bne.n	80052ee <_dtoa_r+0xad6>
 80052ac:	2a00      	cmp	r2, #0
 80052ae:	ddec      	ble.n	800528a <_dtoa_r+0xa72>
 80052b0:	4659      	mov	r1, fp
 80052b2:	2201      	movs	r2, #1
 80052b4:	4620      	mov	r0, r4
 80052b6:	9301      	str	r3, [sp, #4]
 80052b8:	f000 fac6 	bl	8005848 <__lshift>
 80052bc:	4631      	mov	r1, r6
 80052be:	4683      	mov	fp, r0
 80052c0:	f000 fb2e 	bl	8005920 <__mcmp>
 80052c4:	2800      	cmp	r0, #0
 80052c6:	9b01      	ldr	r3, [sp, #4]
 80052c8:	dc02      	bgt.n	80052d0 <_dtoa_r+0xab8>
 80052ca:	d1de      	bne.n	800528a <_dtoa_r+0xa72>
 80052cc:	07da      	lsls	r2, r3, #31
 80052ce:	d5dc      	bpl.n	800528a <_dtoa_r+0xa72>
 80052d0:	2b39      	cmp	r3, #57	; 0x39
 80052d2:	d1d8      	bne.n	8005286 <_dtoa_r+0xa6e>
 80052d4:	9a02      	ldr	r2, [sp, #8]
 80052d6:	2339      	movs	r3, #57	; 0x39
 80052d8:	7013      	strb	r3, [r2, #0]
 80052da:	462b      	mov	r3, r5
 80052dc:	461d      	mov	r5, r3
 80052de:	3b01      	subs	r3, #1
 80052e0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80052e4:	2a39      	cmp	r2, #57	; 0x39
 80052e6:	d050      	beq.n	800538a <_dtoa_r+0xb72>
 80052e8:	3201      	adds	r2, #1
 80052ea:	701a      	strb	r2, [r3, #0]
 80052ec:	e745      	b.n	800517a <_dtoa_r+0x962>
 80052ee:	2a00      	cmp	r2, #0
 80052f0:	dd03      	ble.n	80052fa <_dtoa_r+0xae2>
 80052f2:	2b39      	cmp	r3, #57	; 0x39
 80052f4:	d0ee      	beq.n	80052d4 <_dtoa_r+0xabc>
 80052f6:	3301      	adds	r3, #1
 80052f8:	e7c7      	b.n	800528a <_dtoa_r+0xa72>
 80052fa:	9a01      	ldr	r2, [sp, #4]
 80052fc:	9907      	ldr	r1, [sp, #28]
 80052fe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005302:	428a      	cmp	r2, r1
 8005304:	d02a      	beq.n	800535c <_dtoa_r+0xb44>
 8005306:	4659      	mov	r1, fp
 8005308:	2300      	movs	r3, #0
 800530a:	220a      	movs	r2, #10
 800530c:	4620      	mov	r0, r4
 800530e:	f000 f8eb 	bl	80054e8 <__multadd>
 8005312:	45b8      	cmp	r8, r7
 8005314:	4683      	mov	fp, r0
 8005316:	f04f 0300 	mov.w	r3, #0
 800531a:	f04f 020a 	mov.w	r2, #10
 800531e:	4641      	mov	r1, r8
 8005320:	4620      	mov	r0, r4
 8005322:	d107      	bne.n	8005334 <_dtoa_r+0xb1c>
 8005324:	f000 f8e0 	bl	80054e8 <__multadd>
 8005328:	4680      	mov	r8, r0
 800532a:	4607      	mov	r7, r0
 800532c:	9b01      	ldr	r3, [sp, #4]
 800532e:	3301      	adds	r3, #1
 8005330:	9301      	str	r3, [sp, #4]
 8005332:	e775      	b.n	8005220 <_dtoa_r+0xa08>
 8005334:	f000 f8d8 	bl	80054e8 <__multadd>
 8005338:	4639      	mov	r1, r7
 800533a:	4680      	mov	r8, r0
 800533c:	2300      	movs	r3, #0
 800533e:	220a      	movs	r2, #10
 8005340:	4620      	mov	r0, r4
 8005342:	f000 f8d1 	bl	80054e8 <__multadd>
 8005346:	4607      	mov	r7, r0
 8005348:	e7f0      	b.n	800532c <_dtoa_r+0xb14>
 800534a:	f1b9 0f00 	cmp.w	r9, #0
 800534e:	9a00      	ldr	r2, [sp, #0]
 8005350:	bfcc      	ite	gt
 8005352:	464d      	movgt	r5, r9
 8005354:	2501      	movle	r5, #1
 8005356:	4415      	add	r5, r2
 8005358:	f04f 0800 	mov.w	r8, #0
 800535c:	4659      	mov	r1, fp
 800535e:	2201      	movs	r2, #1
 8005360:	4620      	mov	r0, r4
 8005362:	9301      	str	r3, [sp, #4]
 8005364:	f000 fa70 	bl	8005848 <__lshift>
 8005368:	4631      	mov	r1, r6
 800536a:	4683      	mov	fp, r0
 800536c:	f000 fad8 	bl	8005920 <__mcmp>
 8005370:	2800      	cmp	r0, #0
 8005372:	dcb2      	bgt.n	80052da <_dtoa_r+0xac2>
 8005374:	d102      	bne.n	800537c <_dtoa_r+0xb64>
 8005376:	9b01      	ldr	r3, [sp, #4]
 8005378:	07db      	lsls	r3, r3, #31
 800537a:	d4ae      	bmi.n	80052da <_dtoa_r+0xac2>
 800537c:	462b      	mov	r3, r5
 800537e:	461d      	mov	r5, r3
 8005380:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005384:	2a30      	cmp	r2, #48	; 0x30
 8005386:	d0fa      	beq.n	800537e <_dtoa_r+0xb66>
 8005388:	e6f7      	b.n	800517a <_dtoa_r+0x962>
 800538a:	9a00      	ldr	r2, [sp, #0]
 800538c:	429a      	cmp	r2, r3
 800538e:	d1a5      	bne.n	80052dc <_dtoa_r+0xac4>
 8005390:	f10a 0a01 	add.w	sl, sl, #1
 8005394:	2331      	movs	r3, #49	; 0x31
 8005396:	e779      	b.n	800528c <_dtoa_r+0xa74>
 8005398:	4b13      	ldr	r3, [pc, #76]	; (80053e8 <_dtoa_r+0xbd0>)
 800539a:	f7ff baaf 	b.w	80048fc <_dtoa_r+0xe4>
 800539e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f47f aa86 	bne.w	80048b2 <_dtoa_r+0x9a>
 80053a6:	4b11      	ldr	r3, [pc, #68]	; (80053ec <_dtoa_r+0xbd4>)
 80053a8:	f7ff baa8 	b.w	80048fc <_dtoa_r+0xe4>
 80053ac:	f1b9 0f00 	cmp.w	r9, #0
 80053b0:	dc03      	bgt.n	80053ba <_dtoa_r+0xba2>
 80053b2:	9b05      	ldr	r3, [sp, #20]
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	f73f aec9 	bgt.w	800514c <_dtoa_r+0x934>
 80053ba:	9d00      	ldr	r5, [sp, #0]
 80053bc:	4631      	mov	r1, r6
 80053be:	4658      	mov	r0, fp
 80053c0:	f7ff f99e 	bl	8004700 <quorem>
 80053c4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80053c8:	f805 3b01 	strb.w	r3, [r5], #1
 80053cc:	9a00      	ldr	r2, [sp, #0]
 80053ce:	1aaa      	subs	r2, r5, r2
 80053d0:	4591      	cmp	r9, r2
 80053d2:	ddba      	ble.n	800534a <_dtoa_r+0xb32>
 80053d4:	4659      	mov	r1, fp
 80053d6:	2300      	movs	r3, #0
 80053d8:	220a      	movs	r2, #10
 80053da:	4620      	mov	r0, r4
 80053dc:	f000 f884 	bl	80054e8 <__multadd>
 80053e0:	4683      	mov	fp, r0
 80053e2:	e7eb      	b.n	80053bc <_dtoa_r+0xba4>
 80053e4:	080068db 	.word	0x080068db
 80053e8:	08006834 	.word	0x08006834
 80053ec:	08006858 	.word	0x08006858

080053f0 <_localeconv_r>:
 80053f0:	4800      	ldr	r0, [pc, #0]	; (80053f4 <_localeconv_r+0x4>)
 80053f2:	4770      	bx	lr
 80053f4:	20000160 	.word	0x20000160

080053f8 <malloc>:
 80053f8:	4b02      	ldr	r3, [pc, #8]	; (8005404 <malloc+0xc>)
 80053fa:	4601      	mov	r1, r0
 80053fc:	6818      	ldr	r0, [r3, #0]
 80053fe:	f000 bbef 	b.w	8005be0 <_malloc_r>
 8005402:	bf00      	nop
 8005404:	2000000c 	.word	0x2000000c

08005408 <memcpy>:
 8005408:	440a      	add	r2, r1
 800540a:	4291      	cmp	r1, r2
 800540c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005410:	d100      	bne.n	8005414 <memcpy+0xc>
 8005412:	4770      	bx	lr
 8005414:	b510      	push	{r4, lr}
 8005416:	f811 4b01 	ldrb.w	r4, [r1], #1
 800541a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800541e:	4291      	cmp	r1, r2
 8005420:	d1f9      	bne.n	8005416 <memcpy+0xe>
 8005422:	bd10      	pop	{r4, pc}

08005424 <_Balloc>:
 8005424:	b570      	push	{r4, r5, r6, lr}
 8005426:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005428:	4604      	mov	r4, r0
 800542a:	460d      	mov	r5, r1
 800542c:	b976      	cbnz	r6, 800544c <_Balloc+0x28>
 800542e:	2010      	movs	r0, #16
 8005430:	f7ff ffe2 	bl	80053f8 <malloc>
 8005434:	4602      	mov	r2, r0
 8005436:	6260      	str	r0, [r4, #36]	; 0x24
 8005438:	b920      	cbnz	r0, 8005444 <_Balloc+0x20>
 800543a:	4b18      	ldr	r3, [pc, #96]	; (800549c <_Balloc+0x78>)
 800543c:	4818      	ldr	r0, [pc, #96]	; (80054a0 <_Balloc+0x7c>)
 800543e:	2166      	movs	r1, #102	; 0x66
 8005440:	f000 fc38 	bl	8005cb4 <__assert_func>
 8005444:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005448:	6006      	str	r6, [r0, #0]
 800544a:	60c6      	str	r6, [r0, #12]
 800544c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800544e:	68f3      	ldr	r3, [r6, #12]
 8005450:	b183      	cbz	r3, 8005474 <_Balloc+0x50>
 8005452:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800545a:	b9b8      	cbnz	r0, 800548c <_Balloc+0x68>
 800545c:	2101      	movs	r1, #1
 800545e:	fa01 f605 	lsl.w	r6, r1, r5
 8005462:	1d72      	adds	r2, r6, #5
 8005464:	0092      	lsls	r2, r2, #2
 8005466:	4620      	mov	r0, r4
 8005468:	f000 fb5a 	bl	8005b20 <_calloc_r>
 800546c:	b160      	cbz	r0, 8005488 <_Balloc+0x64>
 800546e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005472:	e00e      	b.n	8005492 <_Balloc+0x6e>
 8005474:	2221      	movs	r2, #33	; 0x21
 8005476:	2104      	movs	r1, #4
 8005478:	4620      	mov	r0, r4
 800547a:	f000 fb51 	bl	8005b20 <_calloc_r>
 800547e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005480:	60f0      	str	r0, [r6, #12]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1e4      	bne.n	8005452 <_Balloc+0x2e>
 8005488:	2000      	movs	r0, #0
 800548a:	bd70      	pop	{r4, r5, r6, pc}
 800548c:	6802      	ldr	r2, [r0, #0]
 800548e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005492:	2300      	movs	r3, #0
 8005494:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005498:	e7f7      	b.n	800548a <_Balloc+0x66>
 800549a:	bf00      	nop
 800549c:	08006865 	.word	0x08006865
 80054a0:	080068ec 	.word	0x080068ec

080054a4 <_Bfree>:
 80054a4:	b570      	push	{r4, r5, r6, lr}
 80054a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80054a8:	4605      	mov	r5, r0
 80054aa:	460c      	mov	r4, r1
 80054ac:	b976      	cbnz	r6, 80054cc <_Bfree+0x28>
 80054ae:	2010      	movs	r0, #16
 80054b0:	f7ff ffa2 	bl	80053f8 <malloc>
 80054b4:	4602      	mov	r2, r0
 80054b6:	6268      	str	r0, [r5, #36]	; 0x24
 80054b8:	b920      	cbnz	r0, 80054c4 <_Bfree+0x20>
 80054ba:	4b09      	ldr	r3, [pc, #36]	; (80054e0 <_Bfree+0x3c>)
 80054bc:	4809      	ldr	r0, [pc, #36]	; (80054e4 <_Bfree+0x40>)
 80054be:	218a      	movs	r1, #138	; 0x8a
 80054c0:	f000 fbf8 	bl	8005cb4 <__assert_func>
 80054c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80054c8:	6006      	str	r6, [r0, #0]
 80054ca:	60c6      	str	r6, [r0, #12]
 80054cc:	b13c      	cbz	r4, 80054de <_Bfree+0x3a>
 80054ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80054d0:	6862      	ldr	r2, [r4, #4]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80054d8:	6021      	str	r1, [r4, #0]
 80054da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80054de:	bd70      	pop	{r4, r5, r6, pc}
 80054e0:	08006865 	.word	0x08006865
 80054e4:	080068ec 	.word	0x080068ec

080054e8 <__multadd>:
 80054e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054ec:	690e      	ldr	r6, [r1, #16]
 80054ee:	4607      	mov	r7, r0
 80054f0:	4698      	mov	r8, r3
 80054f2:	460c      	mov	r4, r1
 80054f4:	f101 0014 	add.w	r0, r1, #20
 80054f8:	2300      	movs	r3, #0
 80054fa:	6805      	ldr	r5, [r0, #0]
 80054fc:	b2a9      	uxth	r1, r5
 80054fe:	fb02 8101 	mla	r1, r2, r1, r8
 8005502:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005506:	0c2d      	lsrs	r5, r5, #16
 8005508:	fb02 c505 	mla	r5, r2, r5, ip
 800550c:	b289      	uxth	r1, r1
 800550e:	3301      	adds	r3, #1
 8005510:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005514:	429e      	cmp	r6, r3
 8005516:	f840 1b04 	str.w	r1, [r0], #4
 800551a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800551e:	dcec      	bgt.n	80054fa <__multadd+0x12>
 8005520:	f1b8 0f00 	cmp.w	r8, #0
 8005524:	d022      	beq.n	800556c <__multadd+0x84>
 8005526:	68a3      	ldr	r3, [r4, #8]
 8005528:	42b3      	cmp	r3, r6
 800552a:	dc19      	bgt.n	8005560 <__multadd+0x78>
 800552c:	6861      	ldr	r1, [r4, #4]
 800552e:	4638      	mov	r0, r7
 8005530:	3101      	adds	r1, #1
 8005532:	f7ff ff77 	bl	8005424 <_Balloc>
 8005536:	4605      	mov	r5, r0
 8005538:	b928      	cbnz	r0, 8005546 <__multadd+0x5e>
 800553a:	4602      	mov	r2, r0
 800553c:	4b0d      	ldr	r3, [pc, #52]	; (8005574 <__multadd+0x8c>)
 800553e:	480e      	ldr	r0, [pc, #56]	; (8005578 <__multadd+0x90>)
 8005540:	21b5      	movs	r1, #181	; 0xb5
 8005542:	f000 fbb7 	bl	8005cb4 <__assert_func>
 8005546:	6922      	ldr	r2, [r4, #16]
 8005548:	3202      	adds	r2, #2
 800554a:	f104 010c 	add.w	r1, r4, #12
 800554e:	0092      	lsls	r2, r2, #2
 8005550:	300c      	adds	r0, #12
 8005552:	f7ff ff59 	bl	8005408 <memcpy>
 8005556:	4621      	mov	r1, r4
 8005558:	4638      	mov	r0, r7
 800555a:	f7ff ffa3 	bl	80054a4 <_Bfree>
 800555e:	462c      	mov	r4, r5
 8005560:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005564:	3601      	adds	r6, #1
 8005566:	f8c3 8014 	str.w	r8, [r3, #20]
 800556a:	6126      	str	r6, [r4, #16]
 800556c:	4620      	mov	r0, r4
 800556e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005572:	bf00      	nop
 8005574:	080068db 	.word	0x080068db
 8005578:	080068ec 	.word	0x080068ec

0800557c <__hi0bits>:
 800557c:	0c03      	lsrs	r3, r0, #16
 800557e:	041b      	lsls	r3, r3, #16
 8005580:	b9d3      	cbnz	r3, 80055b8 <__hi0bits+0x3c>
 8005582:	0400      	lsls	r0, r0, #16
 8005584:	2310      	movs	r3, #16
 8005586:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800558a:	bf04      	itt	eq
 800558c:	0200      	lsleq	r0, r0, #8
 800558e:	3308      	addeq	r3, #8
 8005590:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005594:	bf04      	itt	eq
 8005596:	0100      	lsleq	r0, r0, #4
 8005598:	3304      	addeq	r3, #4
 800559a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800559e:	bf04      	itt	eq
 80055a0:	0080      	lsleq	r0, r0, #2
 80055a2:	3302      	addeq	r3, #2
 80055a4:	2800      	cmp	r0, #0
 80055a6:	db05      	blt.n	80055b4 <__hi0bits+0x38>
 80055a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80055ac:	f103 0301 	add.w	r3, r3, #1
 80055b0:	bf08      	it	eq
 80055b2:	2320      	moveq	r3, #32
 80055b4:	4618      	mov	r0, r3
 80055b6:	4770      	bx	lr
 80055b8:	2300      	movs	r3, #0
 80055ba:	e7e4      	b.n	8005586 <__hi0bits+0xa>

080055bc <__lo0bits>:
 80055bc:	6803      	ldr	r3, [r0, #0]
 80055be:	f013 0207 	ands.w	r2, r3, #7
 80055c2:	4601      	mov	r1, r0
 80055c4:	d00b      	beq.n	80055de <__lo0bits+0x22>
 80055c6:	07da      	lsls	r2, r3, #31
 80055c8:	d424      	bmi.n	8005614 <__lo0bits+0x58>
 80055ca:	0798      	lsls	r0, r3, #30
 80055cc:	bf49      	itett	mi
 80055ce:	085b      	lsrmi	r3, r3, #1
 80055d0:	089b      	lsrpl	r3, r3, #2
 80055d2:	2001      	movmi	r0, #1
 80055d4:	600b      	strmi	r3, [r1, #0]
 80055d6:	bf5c      	itt	pl
 80055d8:	600b      	strpl	r3, [r1, #0]
 80055da:	2002      	movpl	r0, #2
 80055dc:	4770      	bx	lr
 80055de:	b298      	uxth	r0, r3
 80055e0:	b9b0      	cbnz	r0, 8005610 <__lo0bits+0x54>
 80055e2:	0c1b      	lsrs	r3, r3, #16
 80055e4:	2010      	movs	r0, #16
 80055e6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80055ea:	bf04      	itt	eq
 80055ec:	0a1b      	lsreq	r3, r3, #8
 80055ee:	3008      	addeq	r0, #8
 80055f0:	071a      	lsls	r2, r3, #28
 80055f2:	bf04      	itt	eq
 80055f4:	091b      	lsreq	r3, r3, #4
 80055f6:	3004      	addeq	r0, #4
 80055f8:	079a      	lsls	r2, r3, #30
 80055fa:	bf04      	itt	eq
 80055fc:	089b      	lsreq	r3, r3, #2
 80055fe:	3002      	addeq	r0, #2
 8005600:	07da      	lsls	r2, r3, #31
 8005602:	d403      	bmi.n	800560c <__lo0bits+0x50>
 8005604:	085b      	lsrs	r3, r3, #1
 8005606:	f100 0001 	add.w	r0, r0, #1
 800560a:	d005      	beq.n	8005618 <__lo0bits+0x5c>
 800560c:	600b      	str	r3, [r1, #0]
 800560e:	4770      	bx	lr
 8005610:	4610      	mov	r0, r2
 8005612:	e7e8      	b.n	80055e6 <__lo0bits+0x2a>
 8005614:	2000      	movs	r0, #0
 8005616:	4770      	bx	lr
 8005618:	2020      	movs	r0, #32
 800561a:	4770      	bx	lr

0800561c <__i2b>:
 800561c:	b510      	push	{r4, lr}
 800561e:	460c      	mov	r4, r1
 8005620:	2101      	movs	r1, #1
 8005622:	f7ff feff 	bl	8005424 <_Balloc>
 8005626:	4602      	mov	r2, r0
 8005628:	b928      	cbnz	r0, 8005636 <__i2b+0x1a>
 800562a:	4b05      	ldr	r3, [pc, #20]	; (8005640 <__i2b+0x24>)
 800562c:	4805      	ldr	r0, [pc, #20]	; (8005644 <__i2b+0x28>)
 800562e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005632:	f000 fb3f 	bl	8005cb4 <__assert_func>
 8005636:	2301      	movs	r3, #1
 8005638:	6144      	str	r4, [r0, #20]
 800563a:	6103      	str	r3, [r0, #16]
 800563c:	bd10      	pop	{r4, pc}
 800563e:	bf00      	nop
 8005640:	080068db 	.word	0x080068db
 8005644:	080068ec 	.word	0x080068ec

08005648 <__multiply>:
 8005648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800564c:	4614      	mov	r4, r2
 800564e:	690a      	ldr	r2, [r1, #16]
 8005650:	6923      	ldr	r3, [r4, #16]
 8005652:	429a      	cmp	r2, r3
 8005654:	bfb8      	it	lt
 8005656:	460b      	movlt	r3, r1
 8005658:	460d      	mov	r5, r1
 800565a:	bfbc      	itt	lt
 800565c:	4625      	movlt	r5, r4
 800565e:	461c      	movlt	r4, r3
 8005660:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005664:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005668:	68ab      	ldr	r3, [r5, #8]
 800566a:	6869      	ldr	r1, [r5, #4]
 800566c:	eb0a 0709 	add.w	r7, sl, r9
 8005670:	42bb      	cmp	r3, r7
 8005672:	b085      	sub	sp, #20
 8005674:	bfb8      	it	lt
 8005676:	3101      	addlt	r1, #1
 8005678:	f7ff fed4 	bl	8005424 <_Balloc>
 800567c:	b930      	cbnz	r0, 800568c <__multiply+0x44>
 800567e:	4602      	mov	r2, r0
 8005680:	4b42      	ldr	r3, [pc, #264]	; (800578c <__multiply+0x144>)
 8005682:	4843      	ldr	r0, [pc, #268]	; (8005790 <__multiply+0x148>)
 8005684:	f240 115d 	movw	r1, #349	; 0x15d
 8005688:	f000 fb14 	bl	8005cb4 <__assert_func>
 800568c:	f100 0614 	add.w	r6, r0, #20
 8005690:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005694:	4633      	mov	r3, r6
 8005696:	2200      	movs	r2, #0
 8005698:	4543      	cmp	r3, r8
 800569a:	d31e      	bcc.n	80056da <__multiply+0x92>
 800569c:	f105 0c14 	add.w	ip, r5, #20
 80056a0:	f104 0314 	add.w	r3, r4, #20
 80056a4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80056a8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80056ac:	9202      	str	r2, [sp, #8]
 80056ae:	ebac 0205 	sub.w	r2, ip, r5
 80056b2:	3a15      	subs	r2, #21
 80056b4:	f022 0203 	bic.w	r2, r2, #3
 80056b8:	3204      	adds	r2, #4
 80056ba:	f105 0115 	add.w	r1, r5, #21
 80056be:	458c      	cmp	ip, r1
 80056c0:	bf38      	it	cc
 80056c2:	2204      	movcc	r2, #4
 80056c4:	9201      	str	r2, [sp, #4]
 80056c6:	9a02      	ldr	r2, [sp, #8]
 80056c8:	9303      	str	r3, [sp, #12]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d808      	bhi.n	80056e0 <__multiply+0x98>
 80056ce:	2f00      	cmp	r7, #0
 80056d0:	dc55      	bgt.n	800577e <__multiply+0x136>
 80056d2:	6107      	str	r7, [r0, #16]
 80056d4:	b005      	add	sp, #20
 80056d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056da:	f843 2b04 	str.w	r2, [r3], #4
 80056de:	e7db      	b.n	8005698 <__multiply+0x50>
 80056e0:	f8b3 a000 	ldrh.w	sl, [r3]
 80056e4:	f1ba 0f00 	cmp.w	sl, #0
 80056e8:	d020      	beq.n	800572c <__multiply+0xe4>
 80056ea:	f105 0e14 	add.w	lr, r5, #20
 80056ee:	46b1      	mov	r9, r6
 80056f0:	2200      	movs	r2, #0
 80056f2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80056f6:	f8d9 b000 	ldr.w	fp, [r9]
 80056fa:	b2a1      	uxth	r1, r4
 80056fc:	fa1f fb8b 	uxth.w	fp, fp
 8005700:	fb0a b101 	mla	r1, sl, r1, fp
 8005704:	4411      	add	r1, r2
 8005706:	f8d9 2000 	ldr.w	r2, [r9]
 800570a:	0c24      	lsrs	r4, r4, #16
 800570c:	0c12      	lsrs	r2, r2, #16
 800570e:	fb0a 2404 	mla	r4, sl, r4, r2
 8005712:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005716:	b289      	uxth	r1, r1
 8005718:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800571c:	45f4      	cmp	ip, lr
 800571e:	f849 1b04 	str.w	r1, [r9], #4
 8005722:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005726:	d8e4      	bhi.n	80056f2 <__multiply+0xaa>
 8005728:	9901      	ldr	r1, [sp, #4]
 800572a:	5072      	str	r2, [r6, r1]
 800572c:	9a03      	ldr	r2, [sp, #12]
 800572e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005732:	3304      	adds	r3, #4
 8005734:	f1b9 0f00 	cmp.w	r9, #0
 8005738:	d01f      	beq.n	800577a <__multiply+0x132>
 800573a:	6834      	ldr	r4, [r6, #0]
 800573c:	f105 0114 	add.w	r1, r5, #20
 8005740:	46b6      	mov	lr, r6
 8005742:	f04f 0a00 	mov.w	sl, #0
 8005746:	880a      	ldrh	r2, [r1, #0]
 8005748:	f8be b002 	ldrh.w	fp, [lr, #2]
 800574c:	fb09 b202 	mla	r2, r9, r2, fp
 8005750:	4492      	add	sl, r2
 8005752:	b2a4      	uxth	r4, r4
 8005754:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005758:	f84e 4b04 	str.w	r4, [lr], #4
 800575c:	f851 4b04 	ldr.w	r4, [r1], #4
 8005760:	f8be 2000 	ldrh.w	r2, [lr]
 8005764:	0c24      	lsrs	r4, r4, #16
 8005766:	fb09 2404 	mla	r4, r9, r4, r2
 800576a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800576e:	458c      	cmp	ip, r1
 8005770:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005774:	d8e7      	bhi.n	8005746 <__multiply+0xfe>
 8005776:	9a01      	ldr	r2, [sp, #4]
 8005778:	50b4      	str	r4, [r6, r2]
 800577a:	3604      	adds	r6, #4
 800577c:	e7a3      	b.n	80056c6 <__multiply+0x7e>
 800577e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1a5      	bne.n	80056d2 <__multiply+0x8a>
 8005786:	3f01      	subs	r7, #1
 8005788:	e7a1      	b.n	80056ce <__multiply+0x86>
 800578a:	bf00      	nop
 800578c:	080068db 	.word	0x080068db
 8005790:	080068ec 	.word	0x080068ec

08005794 <__pow5mult>:
 8005794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005798:	4615      	mov	r5, r2
 800579a:	f012 0203 	ands.w	r2, r2, #3
 800579e:	4606      	mov	r6, r0
 80057a0:	460f      	mov	r7, r1
 80057a2:	d007      	beq.n	80057b4 <__pow5mult+0x20>
 80057a4:	4c25      	ldr	r4, [pc, #148]	; (800583c <__pow5mult+0xa8>)
 80057a6:	3a01      	subs	r2, #1
 80057a8:	2300      	movs	r3, #0
 80057aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80057ae:	f7ff fe9b 	bl	80054e8 <__multadd>
 80057b2:	4607      	mov	r7, r0
 80057b4:	10ad      	asrs	r5, r5, #2
 80057b6:	d03d      	beq.n	8005834 <__pow5mult+0xa0>
 80057b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80057ba:	b97c      	cbnz	r4, 80057dc <__pow5mult+0x48>
 80057bc:	2010      	movs	r0, #16
 80057be:	f7ff fe1b 	bl	80053f8 <malloc>
 80057c2:	4602      	mov	r2, r0
 80057c4:	6270      	str	r0, [r6, #36]	; 0x24
 80057c6:	b928      	cbnz	r0, 80057d4 <__pow5mult+0x40>
 80057c8:	4b1d      	ldr	r3, [pc, #116]	; (8005840 <__pow5mult+0xac>)
 80057ca:	481e      	ldr	r0, [pc, #120]	; (8005844 <__pow5mult+0xb0>)
 80057cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80057d0:	f000 fa70 	bl	8005cb4 <__assert_func>
 80057d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80057d8:	6004      	str	r4, [r0, #0]
 80057da:	60c4      	str	r4, [r0, #12]
 80057dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80057e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80057e4:	b94c      	cbnz	r4, 80057fa <__pow5mult+0x66>
 80057e6:	f240 2171 	movw	r1, #625	; 0x271
 80057ea:	4630      	mov	r0, r6
 80057ec:	f7ff ff16 	bl	800561c <__i2b>
 80057f0:	2300      	movs	r3, #0
 80057f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80057f6:	4604      	mov	r4, r0
 80057f8:	6003      	str	r3, [r0, #0]
 80057fa:	f04f 0900 	mov.w	r9, #0
 80057fe:	07eb      	lsls	r3, r5, #31
 8005800:	d50a      	bpl.n	8005818 <__pow5mult+0x84>
 8005802:	4639      	mov	r1, r7
 8005804:	4622      	mov	r2, r4
 8005806:	4630      	mov	r0, r6
 8005808:	f7ff ff1e 	bl	8005648 <__multiply>
 800580c:	4639      	mov	r1, r7
 800580e:	4680      	mov	r8, r0
 8005810:	4630      	mov	r0, r6
 8005812:	f7ff fe47 	bl	80054a4 <_Bfree>
 8005816:	4647      	mov	r7, r8
 8005818:	106d      	asrs	r5, r5, #1
 800581a:	d00b      	beq.n	8005834 <__pow5mult+0xa0>
 800581c:	6820      	ldr	r0, [r4, #0]
 800581e:	b938      	cbnz	r0, 8005830 <__pow5mult+0x9c>
 8005820:	4622      	mov	r2, r4
 8005822:	4621      	mov	r1, r4
 8005824:	4630      	mov	r0, r6
 8005826:	f7ff ff0f 	bl	8005648 <__multiply>
 800582a:	6020      	str	r0, [r4, #0]
 800582c:	f8c0 9000 	str.w	r9, [r0]
 8005830:	4604      	mov	r4, r0
 8005832:	e7e4      	b.n	80057fe <__pow5mult+0x6a>
 8005834:	4638      	mov	r0, r7
 8005836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800583a:	bf00      	nop
 800583c:	08006a40 	.word	0x08006a40
 8005840:	08006865 	.word	0x08006865
 8005844:	080068ec 	.word	0x080068ec

08005848 <__lshift>:
 8005848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800584c:	460c      	mov	r4, r1
 800584e:	6849      	ldr	r1, [r1, #4]
 8005850:	6923      	ldr	r3, [r4, #16]
 8005852:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005856:	68a3      	ldr	r3, [r4, #8]
 8005858:	4607      	mov	r7, r0
 800585a:	4691      	mov	r9, r2
 800585c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005860:	f108 0601 	add.w	r6, r8, #1
 8005864:	42b3      	cmp	r3, r6
 8005866:	db0b      	blt.n	8005880 <__lshift+0x38>
 8005868:	4638      	mov	r0, r7
 800586a:	f7ff fddb 	bl	8005424 <_Balloc>
 800586e:	4605      	mov	r5, r0
 8005870:	b948      	cbnz	r0, 8005886 <__lshift+0x3e>
 8005872:	4602      	mov	r2, r0
 8005874:	4b28      	ldr	r3, [pc, #160]	; (8005918 <__lshift+0xd0>)
 8005876:	4829      	ldr	r0, [pc, #164]	; (800591c <__lshift+0xd4>)
 8005878:	f240 11d9 	movw	r1, #473	; 0x1d9
 800587c:	f000 fa1a 	bl	8005cb4 <__assert_func>
 8005880:	3101      	adds	r1, #1
 8005882:	005b      	lsls	r3, r3, #1
 8005884:	e7ee      	b.n	8005864 <__lshift+0x1c>
 8005886:	2300      	movs	r3, #0
 8005888:	f100 0114 	add.w	r1, r0, #20
 800588c:	f100 0210 	add.w	r2, r0, #16
 8005890:	4618      	mov	r0, r3
 8005892:	4553      	cmp	r3, sl
 8005894:	db33      	blt.n	80058fe <__lshift+0xb6>
 8005896:	6920      	ldr	r0, [r4, #16]
 8005898:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800589c:	f104 0314 	add.w	r3, r4, #20
 80058a0:	f019 091f 	ands.w	r9, r9, #31
 80058a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80058a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80058ac:	d02b      	beq.n	8005906 <__lshift+0xbe>
 80058ae:	f1c9 0e20 	rsb	lr, r9, #32
 80058b2:	468a      	mov	sl, r1
 80058b4:	2200      	movs	r2, #0
 80058b6:	6818      	ldr	r0, [r3, #0]
 80058b8:	fa00 f009 	lsl.w	r0, r0, r9
 80058bc:	4302      	orrs	r2, r0
 80058be:	f84a 2b04 	str.w	r2, [sl], #4
 80058c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80058c6:	459c      	cmp	ip, r3
 80058c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80058cc:	d8f3      	bhi.n	80058b6 <__lshift+0x6e>
 80058ce:	ebac 0304 	sub.w	r3, ip, r4
 80058d2:	3b15      	subs	r3, #21
 80058d4:	f023 0303 	bic.w	r3, r3, #3
 80058d8:	3304      	adds	r3, #4
 80058da:	f104 0015 	add.w	r0, r4, #21
 80058de:	4584      	cmp	ip, r0
 80058e0:	bf38      	it	cc
 80058e2:	2304      	movcc	r3, #4
 80058e4:	50ca      	str	r2, [r1, r3]
 80058e6:	b10a      	cbz	r2, 80058ec <__lshift+0xa4>
 80058e8:	f108 0602 	add.w	r6, r8, #2
 80058ec:	3e01      	subs	r6, #1
 80058ee:	4638      	mov	r0, r7
 80058f0:	612e      	str	r6, [r5, #16]
 80058f2:	4621      	mov	r1, r4
 80058f4:	f7ff fdd6 	bl	80054a4 <_Bfree>
 80058f8:	4628      	mov	r0, r5
 80058fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8005902:	3301      	adds	r3, #1
 8005904:	e7c5      	b.n	8005892 <__lshift+0x4a>
 8005906:	3904      	subs	r1, #4
 8005908:	f853 2b04 	ldr.w	r2, [r3], #4
 800590c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005910:	459c      	cmp	ip, r3
 8005912:	d8f9      	bhi.n	8005908 <__lshift+0xc0>
 8005914:	e7ea      	b.n	80058ec <__lshift+0xa4>
 8005916:	bf00      	nop
 8005918:	080068db 	.word	0x080068db
 800591c:	080068ec 	.word	0x080068ec

08005920 <__mcmp>:
 8005920:	b530      	push	{r4, r5, lr}
 8005922:	6902      	ldr	r2, [r0, #16]
 8005924:	690c      	ldr	r4, [r1, #16]
 8005926:	1b12      	subs	r2, r2, r4
 8005928:	d10e      	bne.n	8005948 <__mcmp+0x28>
 800592a:	f100 0314 	add.w	r3, r0, #20
 800592e:	3114      	adds	r1, #20
 8005930:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005934:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005938:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800593c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005940:	42a5      	cmp	r5, r4
 8005942:	d003      	beq.n	800594c <__mcmp+0x2c>
 8005944:	d305      	bcc.n	8005952 <__mcmp+0x32>
 8005946:	2201      	movs	r2, #1
 8005948:	4610      	mov	r0, r2
 800594a:	bd30      	pop	{r4, r5, pc}
 800594c:	4283      	cmp	r3, r0
 800594e:	d3f3      	bcc.n	8005938 <__mcmp+0x18>
 8005950:	e7fa      	b.n	8005948 <__mcmp+0x28>
 8005952:	f04f 32ff 	mov.w	r2, #4294967295
 8005956:	e7f7      	b.n	8005948 <__mcmp+0x28>

08005958 <__mdiff>:
 8005958:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800595c:	460c      	mov	r4, r1
 800595e:	4606      	mov	r6, r0
 8005960:	4611      	mov	r1, r2
 8005962:	4620      	mov	r0, r4
 8005964:	4617      	mov	r7, r2
 8005966:	f7ff ffdb 	bl	8005920 <__mcmp>
 800596a:	1e05      	subs	r5, r0, #0
 800596c:	d110      	bne.n	8005990 <__mdiff+0x38>
 800596e:	4629      	mov	r1, r5
 8005970:	4630      	mov	r0, r6
 8005972:	f7ff fd57 	bl	8005424 <_Balloc>
 8005976:	b930      	cbnz	r0, 8005986 <__mdiff+0x2e>
 8005978:	4b39      	ldr	r3, [pc, #228]	; (8005a60 <__mdiff+0x108>)
 800597a:	4602      	mov	r2, r0
 800597c:	f240 2132 	movw	r1, #562	; 0x232
 8005980:	4838      	ldr	r0, [pc, #224]	; (8005a64 <__mdiff+0x10c>)
 8005982:	f000 f997 	bl	8005cb4 <__assert_func>
 8005986:	2301      	movs	r3, #1
 8005988:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800598c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005990:	bfa4      	itt	ge
 8005992:	463b      	movge	r3, r7
 8005994:	4627      	movge	r7, r4
 8005996:	4630      	mov	r0, r6
 8005998:	6879      	ldr	r1, [r7, #4]
 800599a:	bfa6      	itte	ge
 800599c:	461c      	movge	r4, r3
 800599e:	2500      	movge	r5, #0
 80059a0:	2501      	movlt	r5, #1
 80059a2:	f7ff fd3f 	bl	8005424 <_Balloc>
 80059a6:	b920      	cbnz	r0, 80059b2 <__mdiff+0x5a>
 80059a8:	4b2d      	ldr	r3, [pc, #180]	; (8005a60 <__mdiff+0x108>)
 80059aa:	4602      	mov	r2, r0
 80059ac:	f44f 7110 	mov.w	r1, #576	; 0x240
 80059b0:	e7e6      	b.n	8005980 <__mdiff+0x28>
 80059b2:	693e      	ldr	r6, [r7, #16]
 80059b4:	60c5      	str	r5, [r0, #12]
 80059b6:	6925      	ldr	r5, [r4, #16]
 80059b8:	f107 0114 	add.w	r1, r7, #20
 80059bc:	f104 0914 	add.w	r9, r4, #20
 80059c0:	f100 0e14 	add.w	lr, r0, #20
 80059c4:	f107 0210 	add.w	r2, r7, #16
 80059c8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80059cc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80059d0:	46f2      	mov	sl, lr
 80059d2:	2700      	movs	r7, #0
 80059d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80059d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80059dc:	fa1f f883 	uxth.w	r8, r3
 80059e0:	fa17 f78b 	uxtah	r7, r7, fp
 80059e4:	0c1b      	lsrs	r3, r3, #16
 80059e6:	eba7 0808 	sub.w	r8, r7, r8
 80059ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80059ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80059f2:	fa1f f888 	uxth.w	r8, r8
 80059f6:	141f      	asrs	r7, r3, #16
 80059f8:	454d      	cmp	r5, r9
 80059fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80059fe:	f84a 3b04 	str.w	r3, [sl], #4
 8005a02:	d8e7      	bhi.n	80059d4 <__mdiff+0x7c>
 8005a04:	1b2b      	subs	r3, r5, r4
 8005a06:	3b15      	subs	r3, #21
 8005a08:	f023 0303 	bic.w	r3, r3, #3
 8005a0c:	3304      	adds	r3, #4
 8005a0e:	3415      	adds	r4, #21
 8005a10:	42a5      	cmp	r5, r4
 8005a12:	bf38      	it	cc
 8005a14:	2304      	movcc	r3, #4
 8005a16:	4419      	add	r1, r3
 8005a18:	4473      	add	r3, lr
 8005a1a:	469e      	mov	lr, r3
 8005a1c:	460d      	mov	r5, r1
 8005a1e:	4565      	cmp	r5, ip
 8005a20:	d30e      	bcc.n	8005a40 <__mdiff+0xe8>
 8005a22:	f10c 0203 	add.w	r2, ip, #3
 8005a26:	1a52      	subs	r2, r2, r1
 8005a28:	f022 0203 	bic.w	r2, r2, #3
 8005a2c:	3903      	subs	r1, #3
 8005a2e:	458c      	cmp	ip, r1
 8005a30:	bf38      	it	cc
 8005a32:	2200      	movcc	r2, #0
 8005a34:	441a      	add	r2, r3
 8005a36:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005a3a:	b17b      	cbz	r3, 8005a5c <__mdiff+0x104>
 8005a3c:	6106      	str	r6, [r0, #16]
 8005a3e:	e7a5      	b.n	800598c <__mdiff+0x34>
 8005a40:	f855 8b04 	ldr.w	r8, [r5], #4
 8005a44:	fa17 f488 	uxtah	r4, r7, r8
 8005a48:	1422      	asrs	r2, r4, #16
 8005a4a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8005a4e:	b2a4      	uxth	r4, r4
 8005a50:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005a54:	f84e 4b04 	str.w	r4, [lr], #4
 8005a58:	1417      	asrs	r7, r2, #16
 8005a5a:	e7e0      	b.n	8005a1e <__mdiff+0xc6>
 8005a5c:	3e01      	subs	r6, #1
 8005a5e:	e7ea      	b.n	8005a36 <__mdiff+0xde>
 8005a60:	080068db 	.word	0x080068db
 8005a64:	080068ec 	.word	0x080068ec

08005a68 <__d2b>:
 8005a68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005a6c:	4689      	mov	r9, r1
 8005a6e:	2101      	movs	r1, #1
 8005a70:	ec57 6b10 	vmov	r6, r7, d0
 8005a74:	4690      	mov	r8, r2
 8005a76:	f7ff fcd5 	bl	8005424 <_Balloc>
 8005a7a:	4604      	mov	r4, r0
 8005a7c:	b930      	cbnz	r0, 8005a8c <__d2b+0x24>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	4b25      	ldr	r3, [pc, #148]	; (8005b18 <__d2b+0xb0>)
 8005a82:	4826      	ldr	r0, [pc, #152]	; (8005b1c <__d2b+0xb4>)
 8005a84:	f240 310a 	movw	r1, #778	; 0x30a
 8005a88:	f000 f914 	bl	8005cb4 <__assert_func>
 8005a8c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005a90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005a94:	bb35      	cbnz	r5, 8005ae4 <__d2b+0x7c>
 8005a96:	2e00      	cmp	r6, #0
 8005a98:	9301      	str	r3, [sp, #4]
 8005a9a:	d028      	beq.n	8005aee <__d2b+0x86>
 8005a9c:	4668      	mov	r0, sp
 8005a9e:	9600      	str	r6, [sp, #0]
 8005aa0:	f7ff fd8c 	bl	80055bc <__lo0bits>
 8005aa4:	9900      	ldr	r1, [sp, #0]
 8005aa6:	b300      	cbz	r0, 8005aea <__d2b+0x82>
 8005aa8:	9a01      	ldr	r2, [sp, #4]
 8005aaa:	f1c0 0320 	rsb	r3, r0, #32
 8005aae:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab2:	430b      	orrs	r3, r1
 8005ab4:	40c2      	lsrs	r2, r0
 8005ab6:	6163      	str	r3, [r4, #20]
 8005ab8:	9201      	str	r2, [sp, #4]
 8005aba:	9b01      	ldr	r3, [sp, #4]
 8005abc:	61a3      	str	r3, [r4, #24]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	bf14      	ite	ne
 8005ac2:	2202      	movne	r2, #2
 8005ac4:	2201      	moveq	r2, #1
 8005ac6:	6122      	str	r2, [r4, #16]
 8005ac8:	b1d5      	cbz	r5, 8005b00 <__d2b+0x98>
 8005aca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005ace:	4405      	add	r5, r0
 8005ad0:	f8c9 5000 	str.w	r5, [r9]
 8005ad4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005ad8:	f8c8 0000 	str.w	r0, [r8]
 8005adc:	4620      	mov	r0, r4
 8005ade:	b003      	add	sp, #12
 8005ae0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ae4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ae8:	e7d5      	b.n	8005a96 <__d2b+0x2e>
 8005aea:	6161      	str	r1, [r4, #20]
 8005aec:	e7e5      	b.n	8005aba <__d2b+0x52>
 8005aee:	a801      	add	r0, sp, #4
 8005af0:	f7ff fd64 	bl	80055bc <__lo0bits>
 8005af4:	9b01      	ldr	r3, [sp, #4]
 8005af6:	6163      	str	r3, [r4, #20]
 8005af8:	2201      	movs	r2, #1
 8005afa:	6122      	str	r2, [r4, #16]
 8005afc:	3020      	adds	r0, #32
 8005afe:	e7e3      	b.n	8005ac8 <__d2b+0x60>
 8005b00:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005b04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005b08:	f8c9 0000 	str.w	r0, [r9]
 8005b0c:	6918      	ldr	r0, [r3, #16]
 8005b0e:	f7ff fd35 	bl	800557c <__hi0bits>
 8005b12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005b16:	e7df      	b.n	8005ad8 <__d2b+0x70>
 8005b18:	080068db 	.word	0x080068db
 8005b1c:	080068ec 	.word	0x080068ec

08005b20 <_calloc_r>:
 8005b20:	b513      	push	{r0, r1, r4, lr}
 8005b22:	434a      	muls	r2, r1
 8005b24:	4611      	mov	r1, r2
 8005b26:	9201      	str	r2, [sp, #4]
 8005b28:	f000 f85a 	bl	8005be0 <_malloc_r>
 8005b2c:	4604      	mov	r4, r0
 8005b2e:	b118      	cbz	r0, 8005b38 <_calloc_r+0x18>
 8005b30:	9a01      	ldr	r2, [sp, #4]
 8005b32:	2100      	movs	r1, #0
 8005b34:	f7fe f972 	bl	8003e1c <memset>
 8005b38:	4620      	mov	r0, r4
 8005b3a:	b002      	add	sp, #8
 8005b3c:	bd10      	pop	{r4, pc}
	...

08005b40 <_free_r>:
 8005b40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b42:	2900      	cmp	r1, #0
 8005b44:	d048      	beq.n	8005bd8 <_free_r+0x98>
 8005b46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b4a:	9001      	str	r0, [sp, #4]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f1a1 0404 	sub.w	r4, r1, #4
 8005b52:	bfb8      	it	lt
 8005b54:	18e4      	addlt	r4, r4, r3
 8005b56:	f000 f8ef 	bl	8005d38 <__malloc_lock>
 8005b5a:	4a20      	ldr	r2, [pc, #128]	; (8005bdc <_free_r+0x9c>)
 8005b5c:	9801      	ldr	r0, [sp, #4]
 8005b5e:	6813      	ldr	r3, [r2, #0]
 8005b60:	4615      	mov	r5, r2
 8005b62:	b933      	cbnz	r3, 8005b72 <_free_r+0x32>
 8005b64:	6063      	str	r3, [r4, #4]
 8005b66:	6014      	str	r4, [r2, #0]
 8005b68:	b003      	add	sp, #12
 8005b6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b6e:	f000 b8e9 	b.w	8005d44 <__malloc_unlock>
 8005b72:	42a3      	cmp	r3, r4
 8005b74:	d90b      	bls.n	8005b8e <_free_r+0x4e>
 8005b76:	6821      	ldr	r1, [r4, #0]
 8005b78:	1862      	adds	r2, r4, r1
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	bf04      	itt	eq
 8005b7e:	681a      	ldreq	r2, [r3, #0]
 8005b80:	685b      	ldreq	r3, [r3, #4]
 8005b82:	6063      	str	r3, [r4, #4]
 8005b84:	bf04      	itt	eq
 8005b86:	1852      	addeq	r2, r2, r1
 8005b88:	6022      	streq	r2, [r4, #0]
 8005b8a:	602c      	str	r4, [r5, #0]
 8005b8c:	e7ec      	b.n	8005b68 <_free_r+0x28>
 8005b8e:	461a      	mov	r2, r3
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	b10b      	cbz	r3, 8005b98 <_free_r+0x58>
 8005b94:	42a3      	cmp	r3, r4
 8005b96:	d9fa      	bls.n	8005b8e <_free_r+0x4e>
 8005b98:	6811      	ldr	r1, [r2, #0]
 8005b9a:	1855      	adds	r5, r2, r1
 8005b9c:	42a5      	cmp	r5, r4
 8005b9e:	d10b      	bne.n	8005bb8 <_free_r+0x78>
 8005ba0:	6824      	ldr	r4, [r4, #0]
 8005ba2:	4421      	add	r1, r4
 8005ba4:	1854      	adds	r4, r2, r1
 8005ba6:	42a3      	cmp	r3, r4
 8005ba8:	6011      	str	r1, [r2, #0]
 8005baa:	d1dd      	bne.n	8005b68 <_free_r+0x28>
 8005bac:	681c      	ldr	r4, [r3, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	6053      	str	r3, [r2, #4]
 8005bb2:	4421      	add	r1, r4
 8005bb4:	6011      	str	r1, [r2, #0]
 8005bb6:	e7d7      	b.n	8005b68 <_free_r+0x28>
 8005bb8:	d902      	bls.n	8005bc0 <_free_r+0x80>
 8005bba:	230c      	movs	r3, #12
 8005bbc:	6003      	str	r3, [r0, #0]
 8005bbe:	e7d3      	b.n	8005b68 <_free_r+0x28>
 8005bc0:	6825      	ldr	r5, [r4, #0]
 8005bc2:	1961      	adds	r1, r4, r5
 8005bc4:	428b      	cmp	r3, r1
 8005bc6:	bf04      	itt	eq
 8005bc8:	6819      	ldreq	r1, [r3, #0]
 8005bca:	685b      	ldreq	r3, [r3, #4]
 8005bcc:	6063      	str	r3, [r4, #4]
 8005bce:	bf04      	itt	eq
 8005bd0:	1949      	addeq	r1, r1, r5
 8005bd2:	6021      	streq	r1, [r4, #0]
 8005bd4:	6054      	str	r4, [r2, #4]
 8005bd6:	e7c7      	b.n	8005b68 <_free_r+0x28>
 8005bd8:	b003      	add	sp, #12
 8005bda:	bd30      	pop	{r4, r5, pc}
 8005bdc:	20000200 	.word	0x20000200

08005be0 <_malloc_r>:
 8005be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005be2:	1ccd      	adds	r5, r1, #3
 8005be4:	f025 0503 	bic.w	r5, r5, #3
 8005be8:	3508      	adds	r5, #8
 8005bea:	2d0c      	cmp	r5, #12
 8005bec:	bf38      	it	cc
 8005bee:	250c      	movcc	r5, #12
 8005bf0:	2d00      	cmp	r5, #0
 8005bf2:	4606      	mov	r6, r0
 8005bf4:	db01      	blt.n	8005bfa <_malloc_r+0x1a>
 8005bf6:	42a9      	cmp	r1, r5
 8005bf8:	d903      	bls.n	8005c02 <_malloc_r+0x22>
 8005bfa:	230c      	movs	r3, #12
 8005bfc:	6033      	str	r3, [r6, #0]
 8005bfe:	2000      	movs	r0, #0
 8005c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c02:	f000 f899 	bl	8005d38 <__malloc_lock>
 8005c06:	4921      	ldr	r1, [pc, #132]	; (8005c8c <_malloc_r+0xac>)
 8005c08:	680a      	ldr	r2, [r1, #0]
 8005c0a:	4614      	mov	r4, r2
 8005c0c:	b99c      	cbnz	r4, 8005c36 <_malloc_r+0x56>
 8005c0e:	4f20      	ldr	r7, [pc, #128]	; (8005c90 <_malloc_r+0xb0>)
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	b923      	cbnz	r3, 8005c1e <_malloc_r+0x3e>
 8005c14:	4621      	mov	r1, r4
 8005c16:	4630      	mov	r0, r6
 8005c18:	f000 f83c 	bl	8005c94 <_sbrk_r>
 8005c1c:	6038      	str	r0, [r7, #0]
 8005c1e:	4629      	mov	r1, r5
 8005c20:	4630      	mov	r0, r6
 8005c22:	f000 f837 	bl	8005c94 <_sbrk_r>
 8005c26:	1c43      	adds	r3, r0, #1
 8005c28:	d123      	bne.n	8005c72 <_malloc_r+0x92>
 8005c2a:	230c      	movs	r3, #12
 8005c2c:	6033      	str	r3, [r6, #0]
 8005c2e:	4630      	mov	r0, r6
 8005c30:	f000 f888 	bl	8005d44 <__malloc_unlock>
 8005c34:	e7e3      	b.n	8005bfe <_malloc_r+0x1e>
 8005c36:	6823      	ldr	r3, [r4, #0]
 8005c38:	1b5b      	subs	r3, r3, r5
 8005c3a:	d417      	bmi.n	8005c6c <_malloc_r+0x8c>
 8005c3c:	2b0b      	cmp	r3, #11
 8005c3e:	d903      	bls.n	8005c48 <_malloc_r+0x68>
 8005c40:	6023      	str	r3, [r4, #0]
 8005c42:	441c      	add	r4, r3
 8005c44:	6025      	str	r5, [r4, #0]
 8005c46:	e004      	b.n	8005c52 <_malloc_r+0x72>
 8005c48:	6863      	ldr	r3, [r4, #4]
 8005c4a:	42a2      	cmp	r2, r4
 8005c4c:	bf0c      	ite	eq
 8005c4e:	600b      	streq	r3, [r1, #0]
 8005c50:	6053      	strne	r3, [r2, #4]
 8005c52:	4630      	mov	r0, r6
 8005c54:	f000 f876 	bl	8005d44 <__malloc_unlock>
 8005c58:	f104 000b 	add.w	r0, r4, #11
 8005c5c:	1d23      	adds	r3, r4, #4
 8005c5e:	f020 0007 	bic.w	r0, r0, #7
 8005c62:	1ac2      	subs	r2, r0, r3
 8005c64:	d0cc      	beq.n	8005c00 <_malloc_r+0x20>
 8005c66:	1a1b      	subs	r3, r3, r0
 8005c68:	50a3      	str	r3, [r4, r2]
 8005c6a:	e7c9      	b.n	8005c00 <_malloc_r+0x20>
 8005c6c:	4622      	mov	r2, r4
 8005c6e:	6864      	ldr	r4, [r4, #4]
 8005c70:	e7cc      	b.n	8005c0c <_malloc_r+0x2c>
 8005c72:	1cc4      	adds	r4, r0, #3
 8005c74:	f024 0403 	bic.w	r4, r4, #3
 8005c78:	42a0      	cmp	r0, r4
 8005c7a:	d0e3      	beq.n	8005c44 <_malloc_r+0x64>
 8005c7c:	1a21      	subs	r1, r4, r0
 8005c7e:	4630      	mov	r0, r6
 8005c80:	f000 f808 	bl	8005c94 <_sbrk_r>
 8005c84:	3001      	adds	r0, #1
 8005c86:	d1dd      	bne.n	8005c44 <_malloc_r+0x64>
 8005c88:	e7cf      	b.n	8005c2a <_malloc_r+0x4a>
 8005c8a:	bf00      	nop
 8005c8c:	20000200 	.word	0x20000200
 8005c90:	20000204 	.word	0x20000204

08005c94 <_sbrk_r>:
 8005c94:	b538      	push	{r3, r4, r5, lr}
 8005c96:	4d06      	ldr	r5, [pc, #24]	; (8005cb0 <_sbrk_r+0x1c>)
 8005c98:	2300      	movs	r3, #0
 8005c9a:	4604      	mov	r4, r0
 8005c9c:	4608      	mov	r0, r1
 8005c9e:	602b      	str	r3, [r5, #0]
 8005ca0:	f7fb fa48 	bl	8001134 <_sbrk>
 8005ca4:	1c43      	adds	r3, r0, #1
 8005ca6:	d102      	bne.n	8005cae <_sbrk_r+0x1a>
 8005ca8:	682b      	ldr	r3, [r5, #0]
 8005caa:	b103      	cbz	r3, 8005cae <_sbrk_r+0x1a>
 8005cac:	6023      	str	r3, [r4, #0]
 8005cae:	bd38      	pop	{r3, r4, r5, pc}
 8005cb0:	20000324 	.word	0x20000324

08005cb4 <__assert_func>:
 8005cb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005cb6:	4614      	mov	r4, r2
 8005cb8:	461a      	mov	r2, r3
 8005cba:	4b09      	ldr	r3, [pc, #36]	; (8005ce0 <__assert_func+0x2c>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4605      	mov	r5, r0
 8005cc0:	68d8      	ldr	r0, [r3, #12]
 8005cc2:	b14c      	cbz	r4, 8005cd8 <__assert_func+0x24>
 8005cc4:	4b07      	ldr	r3, [pc, #28]	; (8005ce4 <__assert_func+0x30>)
 8005cc6:	9100      	str	r1, [sp, #0]
 8005cc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005ccc:	4906      	ldr	r1, [pc, #24]	; (8005ce8 <__assert_func+0x34>)
 8005cce:	462b      	mov	r3, r5
 8005cd0:	f000 f80e 	bl	8005cf0 <fiprintf>
 8005cd4:	f000 fa64 	bl	80061a0 <abort>
 8005cd8:	4b04      	ldr	r3, [pc, #16]	; (8005cec <__assert_func+0x38>)
 8005cda:	461c      	mov	r4, r3
 8005cdc:	e7f3      	b.n	8005cc6 <__assert_func+0x12>
 8005cde:	bf00      	nop
 8005ce0:	2000000c 	.word	0x2000000c
 8005ce4:	08006a4c 	.word	0x08006a4c
 8005ce8:	08006a59 	.word	0x08006a59
 8005cec:	08006a87 	.word	0x08006a87

08005cf0 <fiprintf>:
 8005cf0:	b40e      	push	{r1, r2, r3}
 8005cf2:	b503      	push	{r0, r1, lr}
 8005cf4:	4601      	mov	r1, r0
 8005cf6:	ab03      	add	r3, sp, #12
 8005cf8:	4805      	ldr	r0, [pc, #20]	; (8005d10 <fiprintf+0x20>)
 8005cfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cfe:	6800      	ldr	r0, [r0, #0]
 8005d00:	9301      	str	r3, [sp, #4]
 8005d02:	f000 f84f 	bl	8005da4 <_vfiprintf_r>
 8005d06:	b002      	add	sp, #8
 8005d08:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d0c:	b003      	add	sp, #12
 8005d0e:	4770      	bx	lr
 8005d10:	2000000c 	.word	0x2000000c

08005d14 <__ascii_mbtowc>:
 8005d14:	b082      	sub	sp, #8
 8005d16:	b901      	cbnz	r1, 8005d1a <__ascii_mbtowc+0x6>
 8005d18:	a901      	add	r1, sp, #4
 8005d1a:	b142      	cbz	r2, 8005d2e <__ascii_mbtowc+0x1a>
 8005d1c:	b14b      	cbz	r3, 8005d32 <__ascii_mbtowc+0x1e>
 8005d1e:	7813      	ldrb	r3, [r2, #0]
 8005d20:	600b      	str	r3, [r1, #0]
 8005d22:	7812      	ldrb	r2, [r2, #0]
 8005d24:	1e10      	subs	r0, r2, #0
 8005d26:	bf18      	it	ne
 8005d28:	2001      	movne	r0, #1
 8005d2a:	b002      	add	sp, #8
 8005d2c:	4770      	bx	lr
 8005d2e:	4610      	mov	r0, r2
 8005d30:	e7fb      	b.n	8005d2a <__ascii_mbtowc+0x16>
 8005d32:	f06f 0001 	mvn.w	r0, #1
 8005d36:	e7f8      	b.n	8005d2a <__ascii_mbtowc+0x16>

08005d38 <__malloc_lock>:
 8005d38:	4801      	ldr	r0, [pc, #4]	; (8005d40 <__malloc_lock+0x8>)
 8005d3a:	f000 bbf1 	b.w	8006520 <__retarget_lock_acquire_recursive>
 8005d3e:	bf00      	nop
 8005d40:	2000032c 	.word	0x2000032c

08005d44 <__malloc_unlock>:
 8005d44:	4801      	ldr	r0, [pc, #4]	; (8005d4c <__malloc_unlock+0x8>)
 8005d46:	f000 bbec 	b.w	8006522 <__retarget_lock_release_recursive>
 8005d4a:	bf00      	nop
 8005d4c:	2000032c 	.word	0x2000032c

08005d50 <__sfputc_r>:
 8005d50:	6893      	ldr	r3, [r2, #8]
 8005d52:	3b01      	subs	r3, #1
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	b410      	push	{r4}
 8005d58:	6093      	str	r3, [r2, #8]
 8005d5a:	da08      	bge.n	8005d6e <__sfputc_r+0x1e>
 8005d5c:	6994      	ldr	r4, [r2, #24]
 8005d5e:	42a3      	cmp	r3, r4
 8005d60:	db01      	blt.n	8005d66 <__sfputc_r+0x16>
 8005d62:	290a      	cmp	r1, #10
 8005d64:	d103      	bne.n	8005d6e <__sfputc_r+0x1e>
 8005d66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d6a:	f000 b94b 	b.w	8006004 <__swbuf_r>
 8005d6e:	6813      	ldr	r3, [r2, #0]
 8005d70:	1c58      	adds	r0, r3, #1
 8005d72:	6010      	str	r0, [r2, #0]
 8005d74:	7019      	strb	r1, [r3, #0]
 8005d76:	4608      	mov	r0, r1
 8005d78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <__sfputs_r>:
 8005d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d80:	4606      	mov	r6, r0
 8005d82:	460f      	mov	r7, r1
 8005d84:	4614      	mov	r4, r2
 8005d86:	18d5      	adds	r5, r2, r3
 8005d88:	42ac      	cmp	r4, r5
 8005d8a:	d101      	bne.n	8005d90 <__sfputs_r+0x12>
 8005d8c:	2000      	movs	r0, #0
 8005d8e:	e007      	b.n	8005da0 <__sfputs_r+0x22>
 8005d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d94:	463a      	mov	r2, r7
 8005d96:	4630      	mov	r0, r6
 8005d98:	f7ff ffda 	bl	8005d50 <__sfputc_r>
 8005d9c:	1c43      	adds	r3, r0, #1
 8005d9e:	d1f3      	bne.n	8005d88 <__sfputs_r+0xa>
 8005da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005da4 <_vfiprintf_r>:
 8005da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da8:	460d      	mov	r5, r1
 8005daa:	b09d      	sub	sp, #116	; 0x74
 8005dac:	4614      	mov	r4, r2
 8005dae:	4698      	mov	r8, r3
 8005db0:	4606      	mov	r6, r0
 8005db2:	b118      	cbz	r0, 8005dbc <_vfiprintf_r+0x18>
 8005db4:	6983      	ldr	r3, [r0, #24]
 8005db6:	b90b      	cbnz	r3, 8005dbc <_vfiprintf_r+0x18>
 8005db8:	f000 fb14 	bl	80063e4 <__sinit>
 8005dbc:	4b89      	ldr	r3, [pc, #548]	; (8005fe4 <_vfiprintf_r+0x240>)
 8005dbe:	429d      	cmp	r5, r3
 8005dc0:	d11b      	bne.n	8005dfa <_vfiprintf_r+0x56>
 8005dc2:	6875      	ldr	r5, [r6, #4]
 8005dc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005dc6:	07d9      	lsls	r1, r3, #31
 8005dc8:	d405      	bmi.n	8005dd6 <_vfiprintf_r+0x32>
 8005dca:	89ab      	ldrh	r3, [r5, #12]
 8005dcc:	059a      	lsls	r2, r3, #22
 8005dce:	d402      	bmi.n	8005dd6 <_vfiprintf_r+0x32>
 8005dd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005dd2:	f000 fba5 	bl	8006520 <__retarget_lock_acquire_recursive>
 8005dd6:	89ab      	ldrh	r3, [r5, #12]
 8005dd8:	071b      	lsls	r3, r3, #28
 8005dda:	d501      	bpl.n	8005de0 <_vfiprintf_r+0x3c>
 8005ddc:	692b      	ldr	r3, [r5, #16]
 8005dde:	b9eb      	cbnz	r3, 8005e1c <_vfiprintf_r+0x78>
 8005de0:	4629      	mov	r1, r5
 8005de2:	4630      	mov	r0, r6
 8005de4:	f000 f96e 	bl	80060c4 <__swsetup_r>
 8005de8:	b1c0      	cbz	r0, 8005e1c <_vfiprintf_r+0x78>
 8005dea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005dec:	07dc      	lsls	r4, r3, #31
 8005dee:	d50e      	bpl.n	8005e0e <_vfiprintf_r+0x6a>
 8005df0:	f04f 30ff 	mov.w	r0, #4294967295
 8005df4:	b01d      	add	sp, #116	; 0x74
 8005df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dfa:	4b7b      	ldr	r3, [pc, #492]	; (8005fe8 <_vfiprintf_r+0x244>)
 8005dfc:	429d      	cmp	r5, r3
 8005dfe:	d101      	bne.n	8005e04 <_vfiprintf_r+0x60>
 8005e00:	68b5      	ldr	r5, [r6, #8]
 8005e02:	e7df      	b.n	8005dc4 <_vfiprintf_r+0x20>
 8005e04:	4b79      	ldr	r3, [pc, #484]	; (8005fec <_vfiprintf_r+0x248>)
 8005e06:	429d      	cmp	r5, r3
 8005e08:	bf08      	it	eq
 8005e0a:	68f5      	ldreq	r5, [r6, #12]
 8005e0c:	e7da      	b.n	8005dc4 <_vfiprintf_r+0x20>
 8005e0e:	89ab      	ldrh	r3, [r5, #12]
 8005e10:	0598      	lsls	r0, r3, #22
 8005e12:	d4ed      	bmi.n	8005df0 <_vfiprintf_r+0x4c>
 8005e14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e16:	f000 fb84 	bl	8006522 <__retarget_lock_release_recursive>
 8005e1a:	e7e9      	b.n	8005df0 <_vfiprintf_r+0x4c>
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e20:	2320      	movs	r3, #32
 8005e22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e26:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e2a:	2330      	movs	r3, #48	; 0x30
 8005e2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005ff0 <_vfiprintf_r+0x24c>
 8005e30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e34:	f04f 0901 	mov.w	r9, #1
 8005e38:	4623      	mov	r3, r4
 8005e3a:	469a      	mov	sl, r3
 8005e3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e40:	b10a      	cbz	r2, 8005e46 <_vfiprintf_r+0xa2>
 8005e42:	2a25      	cmp	r2, #37	; 0x25
 8005e44:	d1f9      	bne.n	8005e3a <_vfiprintf_r+0x96>
 8005e46:	ebba 0b04 	subs.w	fp, sl, r4
 8005e4a:	d00b      	beq.n	8005e64 <_vfiprintf_r+0xc0>
 8005e4c:	465b      	mov	r3, fp
 8005e4e:	4622      	mov	r2, r4
 8005e50:	4629      	mov	r1, r5
 8005e52:	4630      	mov	r0, r6
 8005e54:	f7ff ff93 	bl	8005d7e <__sfputs_r>
 8005e58:	3001      	adds	r0, #1
 8005e5a:	f000 80aa 	beq.w	8005fb2 <_vfiprintf_r+0x20e>
 8005e5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e60:	445a      	add	r2, fp
 8005e62:	9209      	str	r2, [sp, #36]	; 0x24
 8005e64:	f89a 3000 	ldrb.w	r3, [sl]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f000 80a2 	beq.w	8005fb2 <_vfiprintf_r+0x20e>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	f04f 32ff 	mov.w	r2, #4294967295
 8005e74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e78:	f10a 0a01 	add.w	sl, sl, #1
 8005e7c:	9304      	str	r3, [sp, #16]
 8005e7e:	9307      	str	r3, [sp, #28]
 8005e80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e84:	931a      	str	r3, [sp, #104]	; 0x68
 8005e86:	4654      	mov	r4, sl
 8005e88:	2205      	movs	r2, #5
 8005e8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e8e:	4858      	ldr	r0, [pc, #352]	; (8005ff0 <_vfiprintf_r+0x24c>)
 8005e90:	f7fa f9a6 	bl	80001e0 <memchr>
 8005e94:	9a04      	ldr	r2, [sp, #16]
 8005e96:	b9d8      	cbnz	r0, 8005ed0 <_vfiprintf_r+0x12c>
 8005e98:	06d1      	lsls	r1, r2, #27
 8005e9a:	bf44      	itt	mi
 8005e9c:	2320      	movmi	r3, #32
 8005e9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ea2:	0713      	lsls	r3, r2, #28
 8005ea4:	bf44      	itt	mi
 8005ea6:	232b      	movmi	r3, #43	; 0x2b
 8005ea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005eac:	f89a 3000 	ldrb.w	r3, [sl]
 8005eb0:	2b2a      	cmp	r3, #42	; 0x2a
 8005eb2:	d015      	beq.n	8005ee0 <_vfiprintf_r+0x13c>
 8005eb4:	9a07      	ldr	r2, [sp, #28]
 8005eb6:	4654      	mov	r4, sl
 8005eb8:	2000      	movs	r0, #0
 8005eba:	f04f 0c0a 	mov.w	ip, #10
 8005ebe:	4621      	mov	r1, r4
 8005ec0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ec4:	3b30      	subs	r3, #48	; 0x30
 8005ec6:	2b09      	cmp	r3, #9
 8005ec8:	d94e      	bls.n	8005f68 <_vfiprintf_r+0x1c4>
 8005eca:	b1b0      	cbz	r0, 8005efa <_vfiprintf_r+0x156>
 8005ecc:	9207      	str	r2, [sp, #28]
 8005ece:	e014      	b.n	8005efa <_vfiprintf_r+0x156>
 8005ed0:	eba0 0308 	sub.w	r3, r0, r8
 8005ed4:	fa09 f303 	lsl.w	r3, r9, r3
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	9304      	str	r3, [sp, #16]
 8005edc:	46a2      	mov	sl, r4
 8005ede:	e7d2      	b.n	8005e86 <_vfiprintf_r+0xe2>
 8005ee0:	9b03      	ldr	r3, [sp, #12]
 8005ee2:	1d19      	adds	r1, r3, #4
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	9103      	str	r1, [sp, #12]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	bfbb      	ittet	lt
 8005eec:	425b      	neglt	r3, r3
 8005eee:	f042 0202 	orrlt.w	r2, r2, #2
 8005ef2:	9307      	strge	r3, [sp, #28]
 8005ef4:	9307      	strlt	r3, [sp, #28]
 8005ef6:	bfb8      	it	lt
 8005ef8:	9204      	strlt	r2, [sp, #16]
 8005efa:	7823      	ldrb	r3, [r4, #0]
 8005efc:	2b2e      	cmp	r3, #46	; 0x2e
 8005efe:	d10c      	bne.n	8005f1a <_vfiprintf_r+0x176>
 8005f00:	7863      	ldrb	r3, [r4, #1]
 8005f02:	2b2a      	cmp	r3, #42	; 0x2a
 8005f04:	d135      	bne.n	8005f72 <_vfiprintf_r+0x1ce>
 8005f06:	9b03      	ldr	r3, [sp, #12]
 8005f08:	1d1a      	adds	r2, r3, #4
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	9203      	str	r2, [sp, #12]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	bfb8      	it	lt
 8005f12:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f16:	3402      	adds	r4, #2
 8005f18:	9305      	str	r3, [sp, #20]
 8005f1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006000 <_vfiprintf_r+0x25c>
 8005f1e:	7821      	ldrb	r1, [r4, #0]
 8005f20:	2203      	movs	r2, #3
 8005f22:	4650      	mov	r0, sl
 8005f24:	f7fa f95c 	bl	80001e0 <memchr>
 8005f28:	b140      	cbz	r0, 8005f3c <_vfiprintf_r+0x198>
 8005f2a:	2340      	movs	r3, #64	; 0x40
 8005f2c:	eba0 000a 	sub.w	r0, r0, sl
 8005f30:	fa03 f000 	lsl.w	r0, r3, r0
 8005f34:	9b04      	ldr	r3, [sp, #16]
 8005f36:	4303      	orrs	r3, r0
 8005f38:	3401      	adds	r4, #1
 8005f3a:	9304      	str	r3, [sp, #16]
 8005f3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f40:	482c      	ldr	r0, [pc, #176]	; (8005ff4 <_vfiprintf_r+0x250>)
 8005f42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f46:	2206      	movs	r2, #6
 8005f48:	f7fa f94a 	bl	80001e0 <memchr>
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	d03f      	beq.n	8005fd0 <_vfiprintf_r+0x22c>
 8005f50:	4b29      	ldr	r3, [pc, #164]	; (8005ff8 <_vfiprintf_r+0x254>)
 8005f52:	bb1b      	cbnz	r3, 8005f9c <_vfiprintf_r+0x1f8>
 8005f54:	9b03      	ldr	r3, [sp, #12]
 8005f56:	3307      	adds	r3, #7
 8005f58:	f023 0307 	bic.w	r3, r3, #7
 8005f5c:	3308      	adds	r3, #8
 8005f5e:	9303      	str	r3, [sp, #12]
 8005f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f62:	443b      	add	r3, r7
 8005f64:	9309      	str	r3, [sp, #36]	; 0x24
 8005f66:	e767      	b.n	8005e38 <_vfiprintf_r+0x94>
 8005f68:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f6c:	460c      	mov	r4, r1
 8005f6e:	2001      	movs	r0, #1
 8005f70:	e7a5      	b.n	8005ebe <_vfiprintf_r+0x11a>
 8005f72:	2300      	movs	r3, #0
 8005f74:	3401      	adds	r4, #1
 8005f76:	9305      	str	r3, [sp, #20]
 8005f78:	4619      	mov	r1, r3
 8005f7a:	f04f 0c0a 	mov.w	ip, #10
 8005f7e:	4620      	mov	r0, r4
 8005f80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f84:	3a30      	subs	r2, #48	; 0x30
 8005f86:	2a09      	cmp	r2, #9
 8005f88:	d903      	bls.n	8005f92 <_vfiprintf_r+0x1ee>
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d0c5      	beq.n	8005f1a <_vfiprintf_r+0x176>
 8005f8e:	9105      	str	r1, [sp, #20]
 8005f90:	e7c3      	b.n	8005f1a <_vfiprintf_r+0x176>
 8005f92:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f96:	4604      	mov	r4, r0
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e7f0      	b.n	8005f7e <_vfiprintf_r+0x1da>
 8005f9c:	ab03      	add	r3, sp, #12
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	462a      	mov	r2, r5
 8005fa2:	4b16      	ldr	r3, [pc, #88]	; (8005ffc <_vfiprintf_r+0x258>)
 8005fa4:	a904      	add	r1, sp, #16
 8005fa6:	4630      	mov	r0, r6
 8005fa8:	f7fd ffe0 	bl	8003f6c <_printf_float>
 8005fac:	4607      	mov	r7, r0
 8005fae:	1c78      	adds	r0, r7, #1
 8005fb0:	d1d6      	bne.n	8005f60 <_vfiprintf_r+0x1bc>
 8005fb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005fb4:	07d9      	lsls	r1, r3, #31
 8005fb6:	d405      	bmi.n	8005fc4 <_vfiprintf_r+0x220>
 8005fb8:	89ab      	ldrh	r3, [r5, #12]
 8005fba:	059a      	lsls	r2, r3, #22
 8005fbc:	d402      	bmi.n	8005fc4 <_vfiprintf_r+0x220>
 8005fbe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005fc0:	f000 faaf 	bl	8006522 <__retarget_lock_release_recursive>
 8005fc4:	89ab      	ldrh	r3, [r5, #12]
 8005fc6:	065b      	lsls	r3, r3, #25
 8005fc8:	f53f af12 	bmi.w	8005df0 <_vfiprintf_r+0x4c>
 8005fcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fce:	e711      	b.n	8005df4 <_vfiprintf_r+0x50>
 8005fd0:	ab03      	add	r3, sp, #12
 8005fd2:	9300      	str	r3, [sp, #0]
 8005fd4:	462a      	mov	r2, r5
 8005fd6:	4b09      	ldr	r3, [pc, #36]	; (8005ffc <_vfiprintf_r+0x258>)
 8005fd8:	a904      	add	r1, sp, #16
 8005fda:	4630      	mov	r0, r6
 8005fdc:	f7fe fa6a 	bl	80044b4 <_printf_i>
 8005fe0:	e7e4      	b.n	8005fac <_vfiprintf_r+0x208>
 8005fe2:	bf00      	nop
 8005fe4:	08006bc4 	.word	0x08006bc4
 8005fe8:	08006be4 	.word	0x08006be4
 8005fec:	08006ba4 	.word	0x08006ba4
 8005ff0:	08006a92 	.word	0x08006a92
 8005ff4:	08006a9c 	.word	0x08006a9c
 8005ff8:	08003f6d 	.word	0x08003f6d
 8005ffc:	08005d7f 	.word	0x08005d7f
 8006000:	08006a98 	.word	0x08006a98

08006004 <__swbuf_r>:
 8006004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006006:	460e      	mov	r6, r1
 8006008:	4614      	mov	r4, r2
 800600a:	4605      	mov	r5, r0
 800600c:	b118      	cbz	r0, 8006016 <__swbuf_r+0x12>
 800600e:	6983      	ldr	r3, [r0, #24]
 8006010:	b90b      	cbnz	r3, 8006016 <__swbuf_r+0x12>
 8006012:	f000 f9e7 	bl	80063e4 <__sinit>
 8006016:	4b21      	ldr	r3, [pc, #132]	; (800609c <__swbuf_r+0x98>)
 8006018:	429c      	cmp	r4, r3
 800601a:	d12b      	bne.n	8006074 <__swbuf_r+0x70>
 800601c:	686c      	ldr	r4, [r5, #4]
 800601e:	69a3      	ldr	r3, [r4, #24]
 8006020:	60a3      	str	r3, [r4, #8]
 8006022:	89a3      	ldrh	r3, [r4, #12]
 8006024:	071a      	lsls	r2, r3, #28
 8006026:	d52f      	bpl.n	8006088 <__swbuf_r+0x84>
 8006028:	6923      	ldr	r3, [r4, #16]
 800602a:	b36b      	cbz	r3, 8006088 <__swbuf_r+0x84>
 800602c:	6923      	ldr	r3, [r4, #16]
 800602e:	6820      	ldr	r0, [r4, #0]
 8006030:	1ac0      	subs	r0, r0, r3
 8006032:	6963      	ldr	r3, [r4, #20]
 8006034:	b2f6      	uxtb	r6, r6
 8006036:	4283      	cmp	r3, r0
 8006038:	4637      	mov	r7, r6
 800603a:	dc04      	bgt.n	8006046 <__swbuf_r+0x42>
 800603c:	4621      	mov	r1, r4
 800603e:	4628      	mov	r0, r5
 8006040:	f000 f93c 	bl	80062bc <_fflush_r>
 8006044:	bb30      	cbnz	r0, 8006094 <__swbuf_r+0x90>
 8006046:	68a3      	ldr	r3, [r4, #8]
 8006048:	3b01      	subs	r3, #1
 800604a:	60a3      	str	r3, [r4, #8]
 800604c:	6823      	ldr	r3, [r4, #0]
 800604e:	1c5a      	adds	r2, r3, #1
 8006050:	6022      	str	r2, [r4, #0]
 8006052:	701e      	strb	r6, [r3, #0]
 8006054:	6963      	ldr	r3, [r4, #20]
 8006056:	3001      	adds	r0, #1
 8006058:	4283      	cmp	r3, r0
 800605a:	d004      	beq.n	8006066 <__swbuf_r+0x62>
 800605c:	89a3      	ldrh	r3, [r4, #12]
 800605e:	07db      	lsls	r3, r3, #31
 8006060:	d506      	bpl.n	8006070 <__swbuf_r+0x6c>
 8006062:	2e0a      	cmp	r6, #10
 8006064:	d104      	bne.n	8006070 <__swbuf_r+0x6c>
 8006066:	4621      	mov	r1, r4
 8006068:	4628      	mov	r0, r5
 800606a:	f000 f927 	bl	80062bc <_fflush_r>
 800606e:	b988      	cbnz	r0, 8006094 <__swbuf_r+0x90>
 8006070:	4638      	mov	r0, r7
 8006072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006074:	4b0a      	ldr	r3, [pc, #40]	; (80060a0 <__swbuf_r+0x9c>)
 8006076:	429c      	cmp	r4, r3
 8006078:	d101      	bne.n	800607e <__swbuf_r+0x7a>
 800607a:	68ac      	ldr	r4, [r5, #8]
 800607c:	e7cf      	b.n	800601e <__swbuf_r+0x1a>
 800607e:	4b09      	ldr	r3, [pc, #36]	; (80060a4 <__swbuf_r+0xa0>)
 8006080:	429c      	cmp	r4, r3
 8006082:	bf08      	it	eq
 8006084:	68ec      	ldreq	r4, [r5, #12]
 8006086:	e7ca      	b.n	800601e <__swbuf_r+0x1a>
 8006088:	4621      	mov	r1, r4
 800608a:	4628      	mov	r0, r5
 800608c:	f000 f81a 	bl	80060c4 <__swsetup_r>
 8006090:	2800      	cmp	r0, #0
 8006092:	d0cb      	beq.n	800602c <__swbuf_r+0x28>
 8006094:	f04f 37ff 	mov.w	r7, #4294967295
 8006098:	e7ea      	b.n	8006070 <__swbuf_r+0x6c>
 800609a:	bf00      	nop
 800609c:	08006bc4 	.word	0x08006bc4
 80060a0:	08006be4 	.word	0x08006be4
 80060a4:	08006ba4 	.word	0x08006ba4

080060a8 <__ascii_wctomb>:
 80060a8:	b149      	cbz	r1, 80060be <__ascii_wctomb+0x16>
 80060aa:	2aff      	cmp	r2, #255	; 0xff
 80060ac:	bf85      	ittet	hi
 80060ae:	238a      	movhi	r3, #138	; 0x8a
 80060b0:	6003      	strhi	r3, [r0, #0]
 80060b2:	700a      	strbls	r2, [r1, #0]
 80060b4:	f04f 30ff 	movhi.w	r0, #4294967295
 80060b8:	bf98      	it	ls
 80060ba:	2001      	movls	r0, #1
 80060bc:	4770      	bx	lr
 80060be:	4608      	mov	r0, r1
 80060c0:	4770      	bx	lr
	...

080060c4 <__swsetup_r>:
 80060c4:	4b32      	ldr	r3, [pc, #200]	; (8006190 <__swsetup_r+0xcc>)
 80060c6:	b570      	push	{r4, r5, r6, lr}
 80060c8:	681d      	ldr	r5, [r3, #0]
 80060ca:	4606      	mov	r6, r0
 80060cc:	460c      	mov	r4, r1
 80060ce:	b125      	cbz	r5, 80060da <__swsetup_r+0x16>
 80060d0:	69ab      	ldr	r3, [r5, #24]
 80060d2:	b913      	cbnz	r3, 80060da <__swsetup_r+0x16>
 80060d4:	4628      	mov	r0, r5
 80060d6:	f000 f985 	bl	80063e4 <__sinit>
 80060da:	4b2e      	ldr	r3, [pc, #184]	; (8006194 <__swsetup_r+0xd0>)
 80060dc:	429c      	cmp	r4, r3
 80060de:	d10f      	bne.n	8006100 <__swsetup_r+0x3c>
 80060e0:	686c      	ldr	r4, [r5, #4]
 80060e2:	89a3      	ldrh	r3, [r4, #12]
 80060e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060e8:	0719      	lsls	r1, r3, #28
 80060ea:	d42c      	bmi.n	8006146 <__swsetup_r+0x82>
 80060ec:	06dd      	lsls	r5, r3, #27
 80060ee:	d411      	bmi.n	8006114 <__swsetup_r+0x50>
 80060f0:	2309      	movs	r3, #9
 80060f2:	6033      	str	r3, [r6, #0]
 80060f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80060f8:	81a3      	strh	r3, [r4, #12]
 80060fa:	f04f 30ff 	mov.w	r0, #4294967295
 80060fe:	e03e      	b.n	800617e <__swsetup_r+0xba>
 8006100:	4b25      	ldr	r3, [pc, #148]	; (8006198 <__swsetup_r+0xd4>)
 8006102:	429c      	cmp	r4, r3
 8006104:	d101      	bne.n	800610a <__swsetup_r+0x46>
 8006106:	68ac      	ldr	r4, [r5, #8]
 8006108:	e7eb      	b.n	80060e2 <__swsetup_r+0x1e>
 800610a:	4b24      	ldr	r3, [pc, #144]	; (800619c <__swsetup_r+0xd8>)
 800610c:	429c      	cmp	r4, r3
 800610e:	bf08      	it	eq
 8006110:	68ec      	ldreq	r4, [r5, #12]
 8006112:	e7e6      	b.n	80060e2 <__swsetup_r+0x1e>
 8006114:	0758      	lsls	r0, r3, #29
 8006116:	d512      	bpl.n	800613e <__swsetup_r+0x7a>
 8006118:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800611a:	b141      	cbz	r1, 800612e <__swsetup_r+0x6a>
 800611c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006120:	4299      	cmp	r1, r3
 8006122:	d002      	beq.n	800612a <__swsetup_r+0x66>
 8006124:	4630      	mov	r0, r6
 8006126:	f7ff fd0b 	bl	8005b40 <_free_r>
 800612a:	2300      	movs	r3, #0
 800612c:	6363      	str	r3, [r4, #52]	; 0x34
 800612e:	89a3      	ldrh	r3, [r4, #12]
 8006130:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006134:	81a3      	strh	r3, [r4, #12]
 8006136:	2300      	movs	r3, #0
 8006138:	6063      	str	r3, [r4, #4]
 800613a:	6923      	ldr	r3, [r4, #16]
 800613c:	6023      	str	r3, [r4, #0]
 800613e:	89a3      	ldrh	r3, [r4, #12]
 8006140:	f043 0308 	orr.w	r3, r3, #8
 8006144:	81a3      	strh	r3, [r4, #12]
 8006146:	6923      	ldr	r3, [r4, #16]
 8006148:	b94b      	cbnz	r3, 800615e <__swsetup_r+0x9a>
 800614a:	89a3      	ldrh	r3, [r4, #12]
 800614c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006154:	d003      	beq.n	800615e <__swsetup_r+0x9a>
 8006156:	4621      	mov	r1, r4
 8006158:	4630      	mov	r0, r6
 800615a:	f000 fa07 	bl	800656c <__smakebuf_r>
 800615e:	89a0      	ldrh	r0, [r4, #12]
 8006160:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006164:	f010 0301 	ands.w	r3, r0, #1
 8006168:	d00a      	beq.n	8006180 <__swsetup_r+0xbc>
 800616a:	2300      	movs	r3, #0
 800616c:	60a3      	str	r3, [r4, #8]
 800616e:	6963      	ldr	r3, [r4, #20]
 8006170:	425b      	negs	r3, r3
 8006172:	61a3      	str	r3, [r4, #24]
 8006174:	6923      	ldr	r3, [r4, #16]
 8006176:	b943      	cbnz	r3, 800618a <__swsetup_r+0xc6>
 8006178:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800617c:	d1ba      	bne.n	80060f4 <__swsetup_r+0x30>
 800617e:	bd70      	pop	{r4, r5, r6, pc}
 8006180:	0781      	lsls	r1, r0, #30
 8006182:	bf58      	it	pl
 8006184:	6963      	ldrpl	r3, [r4, #20]
 8006186:	60a3      	str	r3, [r4, #8]
 8006188:	e7f4      	b.n	8006174 <__swsetup_r+0xb0>
 800618a:	2000      	movs	r0, #0
 800618c:	e7f7      	b.n	800617e <__swsetup_r+0xba>
 800618e:	bf00      	nop
 8006190:	2000000c 	.word	0x2000000c
 8006194:	08006bc4 	.word	0x08006bc4
 8006198:	08006be4 	.word	0x08006be4
 800619c:	08006ba4 	.word	0x08006ba4

080061a0 <abort>:
 80061a0:	b508      	push	{r3, lr}
 80061a2:	2006      	movs	r0, #6
 80061a4:	f000 fa4a 	bl	800663c <raise>
 80061a8:	2001      	movs	r0, #1
 80061aa:	f7fa ff4b 	bl	8001044 <_exit>
	...

080061b0 <__sflush_r>:
 80061b0:	898a      	ldrh	r2, [r1, #12]
 80061b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061b6:	4605      	mov	r5, r0
 80061b8:	0710      	lsls	r0, r2, #28
 80061ba:	460c      	mov	r4, r1
 80061bc:	d458      	bmi.n	8006270 <__sflush_r+0xc0>
 80061be:	684b      	ldr	r3, [r1, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	dc05      	bgt.n	80061d0 <__sflush_r+0x20>
 80061c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	dc02      	bgt.n	80061d0 <__sflush_r+0x20>
 80061ca:	2000      	movs	r0, #0
 80061cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061d2:	2e00      	cmp	r6, #0
 80061d4:	d0f9      	beq.n	80061ca <__sflush_r+0x1a>
 80061d6:	2300      	movs	r3, #0
 80061d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80061dc:	682f      	ldr	r7, [r5, #0]
 80061de:	602b      	str	r3, [r5, #0]
 80061e0:	d032      	beq.n	8006248 <__sflush_r+0x98>
 80061e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80061e4:	89a3      	ldrh	r3, [r4, #12]
 80061e6:	075a      	lsls	r2, r3, #29
 80061e8:	d505      	bpl.n	80061f6 <__sflush_r+0x46>
 80061ea:	6863      	ldr	r3, [r4, #4]
 80061ec:	1ac0      	subs	r0, r0, r3
 80061ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80061f0:	b10b      	cbz	r3, 80061f6 <__sflush_r+0x46>
 80061f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80061f4:	1ac0      	subs	r0, r0, r3
 80061f6:	2300      	movs	r3, #0
 80061f8:	4602      	mov	r2, r0
 80061fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061fc:	6a21      	ldr	r1, [r4, #32]
 80061fe:	4628      	mov	r0, r5
 8006200:	47b0      	blx	r6
 8006202:	1c43      	adds	r3, r0, #1
 8006204:	89a3      	ldrh	r3, [r4, #12]
 8006206:	d106      	bne.n	8006216 <__sflush_r+0x66>
 8006208:	6829      	ldr	r1, [r5, #0]
 800620a:	291d      	cmp	r1, #29
 800620c:	d82c      	bhi.n	8006268 <__sflush_r+0xb8>
 800620e:	4a2a      	ldr	r2, [pc, #168]	; (80062b8 <__sflush_r+0x108>)
 8006210:	40ca      	lsrs	r2, r1
 8006212:	07d6      	lsls	r6, r2, #31
 8006214:	d528      	bpl.n	8006268 <__sflush_r+0xb8>
 8006216:	2200      	movs	r2, #0
 8006218:	6062      	str	r2, [r4, #4]
 800621a:	04d9      	lsls	r1, r3, #19
 800621c:	6922      	ldr	r2, [r4, #16]
 800621e:	6022      	str	r2, [r4, #0]
 8006220:	d504      	bpl.n	800622c <__sflush_r+0x7c>
 8006222:	1c42      	adds	r2, r0, #1
 8006224:	d101      	bne.n	800622a <__sflush_r+0x7a>
 8006226:	682b      	ldr	r3, [r5, #0]
 8006228:	b903      	cbnz	r3, 800622c <__sflush_r+0x7c>
 800622a:	6560      	str	r0, [r4, #84]	; 0x54
 800622c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800622e:	602f      	str	r7, [r5, #0]
 8006230:	2900      	cmp	r1, #0
 8006232:	d0ca      	beq.n	80061ca <__sflush_r+0x1a>
 8006234:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006238:	4299      	cmp	r1, r3
 800623a:	d002      	beq.n	8006242 <__sflush_r+0x92>
 800623c:	4628      	mov	r0, r5
 800623e:	f7ff fc7f 	bl	8005b40 <_free_r>
 8006242:	2000      	movs	r0, #0
 8006244:	6360      	str	r0, [r4, #52]	; 0x34
 8006246:	e7c1      	b.n	80061cc <__sflush_r+0x1c>
 8006248:	6a21      	ldr	r1, [r4, #32]
 800624a:	2301      	movs	r3, #1
 800624c:	4628      	mov	r0, r5
 800624e:	47b0      	blx	r6
 8006250:	1c41      	adds	r1, r0, #1
 8006252:	d1c7      	bne.n	80061e4 <__sflush_r+0x34>
 8006254:	682b      	ldr	r3, [r5, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d0c4      	beq.n	80061e4 <__sflush_r+0x34>
 800625a:	2b1d      	cmp	r3, #29
 800625c:	d001      	beq.n	8006262 <__sflush_r+0xb2>
 800625e:	2b16      	cmp	r3, #22
 8006260:	d101      	bne.n	8006266 <__sflush_r+0xb6>
 8006262:	602f      	str	r7, [r5, #0]
 8006264:	e7b1      	b.n	80061ca <__sflush_r+0x1a>
 8006266:	89a3      	ldrh	r3, [r4, #12]
 8006268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800626c:	81a3      	strh	r3, [r4, #12]
 800626e:	e7ad      	b.n	80061cc <__sflush_r+0x1c>
 8006270:	690f      	ldr	r7, [r1, #16]
 8006272:	2f00      	cmp	r7, #0
 8006274:	d0a9      	beq.n	80061ca <__sflush_r+0x1a>
 8006276:	0793      	lsls	r3, r2, #30
 8006278:	680e      	ldr	r6, [r1, #0]
 800627a:	bf08      	it	eq
 800627c:	694b      	ldreq	r3, [r1, #20]
 800627e:	600f      	str	r7, [r1, #0]
 8006280:	bf18      	it	ne
 8006282:	2300      	movne	r3, #0
 8006284:	eba6 0807 	sub.w	r8, r6, r7
 8006288:	608b      	str	r3, [r1, #8]
 800628a:	f1b8 0f00 	cmp.w	r8, #0
 800628e:	dd9c      	ble.n	80061ca <__sflush_r+0x1a>
 8006290:	6a21      	ldr	r1, [r4, #32]
 8006292:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006294:	4643      	mov	r3, r8
 8006296:	463a      	mov	r2, r7
 8006298:	4628      	mov	r0, r5
 800629a:	47b0      	blx	r6
 800629c:	2800      	cmp	r0, #0
 800629e:	dc06      	bgt.n	80062ae <__sflush_r+0xfe>
 80062a0:	89a3      	ldrh	r3, [r4, #12]
 80062a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062a6:	81a3      	strh	r3, [r4, #12]
 80062a8:	f04f 30ff 	mov.w	r0, #4294967295
 80062ac:	e78e      	b.n	80061cc <__sflush_r+0x1c>
 80062ae:	4407      	add	r7, r0
 80062b0:	eba8 0800 	sub.w	r8, r8, r0
 80062b4:	e7e9      	b.n	800628a <__sflush_r+0xda>
 80062b6:	bf00      	nop
 80062b8:	20400001 	.word	0x20400001

080062bc <_fflush_r>:
 80062bc:	b538      	push	{r3, r4, r5, lr}
 80062be:	690b      	ldr	r3, [r1, #16]
 80062c0:	4605      	mov	r5, r0
 80062c2:	460c      	mov	r4, r1
 80062c4:	b913      	cbnz	r3, 80062cc <_fflush_r+0x10>
 80062c6:	2500      	movs	r5, #0
 80062c8:	4628      	mov	r0, r5
 80062ca:	bd38      	pop	{r3, r4, r5, pc}
 80062cc:	b118      	cbz	r0, 80062d6 <_fflush_r+0x1a>
 80062ce:	6983      	ldr	r3, [r0, #24]
 80062d0:	b90b      	cbnz	r3, 80062d6 <_fflush_r+0x1a>
 80062d2:	f000 f887 	bl	80063e4 <__sinit>
 80062d6:	4b14      	ldr	r3, [pc, #80]	; (8006328 <_fflush_r+0x6c>)
 80062d8:	429c      	cmp	r4, r3
 80062da:	d11b      	bne.n	8006314 <_fflush_r+0x58>
 80062dc:	686c      	ldr	r4, [r5, #4]
 80062de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d0ef      	beq.n	80062c6 <_fflush_r+0xa>
 80062e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80062e8:	07d0      	lsls	r0, r2, #31
 80062ea:	d404      	bmi.n	80062f6 <_fflush_r+0x3a>
 80062ec:	0599      	lsls	r1, r3, #22
 80062ee:	d402      	bmi.n	80062f6 <_fflush_r+0x3a>
 80062f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062f2:	f000 f915 	bl	8006520 <__retarget_lock_acquire_recursive>
 80062f6:	4628      	mov	r0, r5
 80062f8:	4621      	mov	r1, r4
 80062fa:	f7ff ff59 	bl	80061b0 <__sflush_r>
 80062fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006300:	07da      	lsls	r2, r3, #31
 8006302:	4605      	mov	r5, r0
 8006304:	d4e0      	bmi.n	80062c8 <_fflush_r+0xc>
 8006306:	89a3      	ldrh	r3, [r4, #12]
 8006308:	059b      	lsls	r3, r3, #22
 800630a:	d4dd      	bmi.n	80062c8 <_fflush_r+0xc>
 800630c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800630e:	f000 f908 	bl	8006522 <__retarget_lock_release_recursive>
 8006312:	e7d9      	b.n	80062c8 <_fflush_r+0xc>
 8006314:	4b05      	ldr	r3, [pc, #20]	; (800632c <_fflush_r+0x70>)
 8006316:	429c      	cmp	r4, r3
 8006318:	d101      	bne.n	800631e <_fflush_r+0x62>
 800631a:	68ac      	ldr	r4, [r5, #8]
 800631c:	e7df      	b.n	80062de <_fflush_r+0x22>
 800631e:	4b04      	ldr	r3, [pc, #16]	; (8006330 <_fflush_r+0x74>)
 8006320:	429c      	cmp	r4, r3
 8006322:	bf08      	it	eq
 8006324:	68ec      	ldreq	r4, [r5, #12]
 8006326:	e7da      	b.n	80062de <_fflush_r+0x22>
 8006328:	08006bc4 	.word	0x08006bc4
 800632c:	08006be4 	.word	0x08006be4
 8006330:	08006ba4 	.word	0x08006ba4

08006334 <std>:
 8006334:	2300      	movs	r3, #0
 8006336:	b510      	push	{r4, lr}
 8006338:	4604      	mov	r4, r0
 800633a:	e9c0 3300 	strd	r3, r3, [r0]
 800633e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006342:	6083      	str	r3, [r0, #8]
 8006344:	8181      	strh	r1, [r0, #12]
 8006346:	6643      	str	r3, [r0, #100]	; 0x64
 8006348:	81c2      	strh	r2, [r0, #14]
 800634a:	6183      	str	r3, [r0, #24]
 800634c:	4619      	mov	r1, r3
 800634e:	2208      	movs	r2, #8
 8006350:	305c      	adds	r0, #92	; 0x5c
 8006352:	f7fd fd63 	bl	8003e1c <memset>
 8006356:	4b05      	ldr	r3, [pc, #20]	; (800636c <std+0x38>)
 8006358:	6263      	str	r3, [r4, #36]	; 0x24
 800635a:	4b05      	ldr	r3, [pc, #20]	; (8006370 <std+0x3c>)
 800635c:	62a3      	str	r3, [r4, #40]	; 0x28
 800635e:	4b05      	ldr	r3, [pc, #20]	; (8006374 <std+0x40>)
 8006360:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006362:	4b05      	ldr	r3, [pc, #20]	; (8006378 <std+0x44>)
 8006364:	6224      	str	r4, [r4, #32]
 8006366:	6323      	str	r3, [r4, #48]	; 0x30
 8006368:	bd10      	pop	{r4, pc}
 800636a:	bf00      	nop
 800636c:	08006675 	.word	0x08006675
 8006370:	08006697 	.word	0x08006697
 8006374:	080066cf 	.word	0x080066cf
 8006378:	080066f3 	.word	0x080066f3

0800637c <_cleanup_r>:
 800637c:	4901      	ldr	r1, [pc, #4]	; (8006384 <_cleanup_r+0x8>)
 800637e:	f000 b8af 	b.w	80064e0 <_fwalk_reent>
 8006382:	bf00      	nop
 8006384:	080062bd 	.word	0x080062bd

08006388 <__sfmoreglue>:
 8006388:	b570      	push	{r4, r5, r6, lr}
 800638a:	1e4a      	subs	r2, r1, #1
 800638c:	2568      	movs	r5, #104	; 0x68
 800638e:	4355      	muls	r5, r2
 8006390:	460e      	mov	r6, r1
 8006392:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006396:	f7ff fc23 	bl	8005be0 <_malloc_r>
 800639a:	4604      	mov	r4, r0
 800639c:	b140      	cbz	r0, 80063b0 <__sfmoreglue+0x28>
 800639e:	2100      	movs	r1, #0
 80063a0:	e9c0 1600 	strd	r1, r6, [r0]
 80063a4:	300c      	adds	r0, #12
 80063a6:	60a0      	str	r0, [r4, #8]
 80063a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80063ac:	f7fd fd36 	bl	8003e1c <memset>
 80063b0:	4620      	mov	r0, r4
 80063b2:	bd70      	pop	{r4, r5, r6, pc}

080063b4 <__sfp_lock_acquire>:
 80063b4:	4801      	ldr	r0, [pc, #4]	; (80063bc <__sfp_lock_acquire+0x8>)
 80063b6:	f000 b8b3 	b.w	8006520 <__retarget_lock_acquire_recursive>
 80063ba:	bf00      	nop
 80063bc:	20000330 	.word	0x20000330

080063c0 <__sfp_lock_release>:
 80063c0:	4801      	ldr	r0, [pc, #4]	; (80063c8 <__sfp_lock_release+0x8>)
 80063c2:	f000 b8ae 	b.w	8006522 <__retarget_lock_release_recursive>
 80063c6:	bf00      	nop
 80063c8:	20000330 	.word	0x20000330

080063cc <__sinit_lock_acquire>:
 80063cc:	4801      	ldr	r0, [pc, #4]	; (80063d4 <__sinit_lock_acquire+0x8>)
 80063ce:	f000 b8a7 	b.w	8006520 <__retarget_lock_acquire_recursive>
 80063d2:	bf00      	nop
 80063d4:	2000032b 	.word	0x2000032b

080063d8 <__sinit_lock_release>:
 80063d8:	4801      	ldr	r0, [pc, #4]	; (80063e0 <__sinit_lock_release+0x8>)
 80063da:	f000 b8a2 	b.w	8006522 <__retarget_lock_release_recursive>
 80063de:	bf00      	nop
 80063e0:	2000032b 	.word	0x2000032b

080063e4 <__sinit>:
 80063e4:	b510      	push	{r4, lr}
 80063e6:	4604      	mov	r4, r0
 80063e8:	f7ff fff0 	bl	80063cc <__sinit_lock_acquire>
 80063ec:	69a3      	ldr	r3, [r4, #24]
 80063ee:	b11b      	cbz	r3, 80063f8 <__sinit+0x14>
 80063f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063f4:	f7ff bff0 	b.w	80063d8 <__sinit_lock_release>
 80063f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80063fc:	6523      	str	r3, [r4, #80]	; 0x50
 80063fe:	4b13      	ldr	r3, [pc, #76]	; (800644c <__sinit+0x68>)
 8006400:	4a13      	ldr	r2, [pc, #76]	; (8006450 <__sinit+0x6c>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	62a2      	str	r2, [r4, #40]	; 0x28
 8006406:	42a3      	cmp	r3, r4
 8006408:	bf04      	itt	eq
 800640a:	2301      	moveq	r3, #1
 800640c:	61a3      	streq	r3, [r4, #24]
 800640e:	4620      	mov	r0, r4
 8006410:	f000 f820 	bl	8006454 <__sfp>
 8006414:	6060      	str	r0, [r4, #4]
 8006416:	4620      	mov	r0, r4
 8006418:	f000 f81c 	bl	8006454 <__sfp>
 800641c:	60a0      	str	r0, [r4, #8]
 800641e:	4620      	mov	r0, r4
 8006420:	f000 f818 	bl	8006454 <__sfp>
 8006424:	2200      	movs	r2, #0
 8006426:	60e0      	str	r0, [r4, #12]
 8006428:	2104      	movs	r1, #4
 800642a:	6860      	ldr	r0, [r4, #4]
 800642c:	f7ff ff82 	bl	8006334 <std>
 8006430:	68a0      	ldr	r0, [r4, #8]
 8006432:	2201      	movs	r2, #1
 8006434:	2109      	movs	r1, #9
 8006436:	f7ff ff7d 	bl	8006334 <std>
 800643a:	68e0      	ldr	r0, [r4, #12]
 800643c:	2202      	movs	r2, #2
 800643e:	2112      	movs	r1, #18
 8006440:	f7ff ff78 	bl	8006334 <std>
 8006444:	2301      	movs	r3, #1
 8006446:	61a3      	str	r3, [r4, #24]
 8006448:	e7d2      	b.n	80063f0 <__sinit+0xc>
 800644a:	bf00      	nop
 800644c:	08006820 	.word	0x08006820
 8006450:	0800637d 	.word	0x0800637d

08006454 <__sfp>:
 8006454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006456:	4607      	mov	r7, r0
 8006458:	f7ff ffac 	bl	80063b4 <__sfp_lock_acquire>
 800645c:	4b1e      	ldr	r3, [pc, #120]	; (80064d8 <__sfp+0x84>)
 800645e:	681e      	ldr	r6, [r3, #0]
 8006460:	69b3      	ldr	r3, [r6, #24]
 8006462:	b913      	cbnz	r3, 800646a <__sfp+0x16>
 8006464:	4630      	mov	r0, r6
 8006466:	f7ff ffbd 	bl	80063e4 <__sinit>
 800646a:	3648      	adds	r6, #72	; 0x48
 800646c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006470:	3b01      	subs	r3, #1
 8006472:	d503      	bpl.n	800647c <__sfp+0x28>
 8006474:	6833      	ldr	r3, [r6, #0]
 8006476:	b30b      	cbz	r3, 80064bc <__sfp+0x68>
 8006478:	6836      	ldr	r6, [r6, #0]
 800647a:	e7f7      	b.n	800646c <__sfp+0x18>
 800647c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006480:	b9d5      	cbnz	r5, 80064b8 <__sfp+0x64>
 8006482:	4b16      	ldr	r3, [pc, #88]	; (80064dc <__sfp+0x88>)
 8006484:	60e3      	str	r3, [r4, #12]
 8006486:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800648a:	6665      	str	r5, [r4, #100]	; 0x64
 800648c:	f000 f847 	bl	800651e <__retarget_lock_init_recursive>
 8006490:	f7ff ff96 	bl	80063c0 <__sfp_lock_release>
 8006494:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006498:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800649c:	6025      	str	r5, [r4, #0]
 800649e:	61a5      	str	r5, [r4, #24]
 80064a0:	2208      	movs	r2, #8
 80064a2:	4629      	mov	r1, r5
 80064a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80064a8:	f7fd fcb8 	bl	8003e1c <memset>
 80064ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80064b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80064b4:	4620      	mov	r0, r4
 80064b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064b8:	3468      	adds	r4, #104	; 0x68
 80064ba:	e7d9      	b.n	8006470 <__sfp+0x1c>
 80064bc:	2104      	movs	r1, #4
 80064be:	4638      	mov	r0, r7
 80064c0:	f7ff ff62 	bl	8006388 <__sfmoreglue>
 80064c4:	4604      	mov	r4, r0
 80064c6:	6030      	str	r0, [r6, #0]
 80064c8:	2800      	cmp	r0, #0
 80064ca:	d1d5      	bne.n	8006478 <__sfp+0x24>
 80064cc:	f7ff ff78 	bl	80063c0 <__sfp_lock_release>
 80064d0:	230c      	movs	r3, #12
 80064d2:	603b      	str	r3, [r7, #0]
 80064d4:	e7ee      	b.n	80064b4 <__sfp+0x60>
 80064d6:	bf00      	nop
 80064d8:	08006820 	.word	0x08006820
 80064dc:	ffff0001 	.word	0xffff0001

080064e0 <_fwalk_reent>:
 80064e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064e4:	4606      	mov	r6, r0
 80064e6:	4688      	mov	r8, r1
 80064e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80064ec:	2700      	movs	r7, #0
 80064ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80064f2:	f1b9 0901 	subs.w	r9, r9, #1
 80064f6:	d505      	bpl.n	8006504 <_fwalk_reent+0x24>
 80064f8:	6824      	ldr	r4, [r4, #0]
 80064fa:	2c00      	cmp	r4, #0
 80064fc:	d1f7      	bne.n	80064ee <_fwalk_reent+0xe>
 80064fe:	4638      	mov	r0, r7
 8006500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006504:	89ab      	ldrh	r3, [r5, #12]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d907      	bls.n	800651a <_fwalk_reent+0x3a>
 800650a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800650e:	3301      	adds	r3, #1
 8006510:	d003      	beq.n	800651a <_fwalk_reent+0x3a>
 8006512:	4629      	mov	r1, r5
 8006514:	4630      	mov	r0, r6
 8006516:	47c0      	blx	r8
 8006518:	4307      	orrs	r7, r0
 800651a:	3568      	adds	r5, #104	; 0x68
 800651c:	e7e9      	b.n	80064f2 <_fwalk_reent+0x12>

0800651e <__retarget_lock_init_recursive>:
 800651e:	4770      	bx	lr

08006520 <__retarget_lock_acquire_recursive>:
 8006520:	4770      	bx	lr

08006522 <__retarget_lock_release_recursive>:
 8006522:	4770      	bx	lr

08006524 <__swhatbuf_r>:
 8006524:	b570      	push	{r4, r5, r6, lr}
 8006526:	460e      	mov	r6, r1
 8006528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800652c:	2900      	cmp	r1, #0
 800652e:	b096      	sub	sp, #88	; 0x58
 8006530:	4614      	mov	r4, r2
 8006532:	461d      	mov	r5, r3
 8006534:	da07      	bge.n	8006546 <__swhatbuf_r+0x22>
 8006536:	2300      	movs	r3, #0
 8006538:	602b      	str	r3, [r5, #0]
 800653a:	89b3      	ldrh	r3, [r6, #12]
 800653c:	061a      	lsls	r2, r3, #24
 800653e:	d410      	bmi.n	8006562 <__swhatbuf_r+0x3e>
 8006540:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006544:	e00e      	b.n	8006564 <__swhatbuf_r+0x40>
 8006546:	466a      	mov	r2, sp
 8006548:	f000 f8fa 	bl	8006740 <_fstat_r>
 800654c:	2800      	cmp	r0, #0
 800654e:	dbf2      	blt.n	8006536 <__swhatbuf_r+0x12>
 8006550:	9a01      	ldr	r2, [sp, #4]
 8006552:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006556:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800655a:	425a      	negs	r2, r3
 800655c:	415a      	adcs	r2, r3
 800655e:	602a      	str	r2, [r5, #0]
 8006560:	e7ee      	b.n	8006540 <__swhatbuf_r+0x1c>
 8006562:	2340      	movs	r3, #64	; 0x40
 8006564:	2000      	movs	r0, #0
 8006566:	6023      	str	r3, [r4, #0]
 8006568:	b016      	add	sp, #88	; 0x58
 800656a:	bd70      	pop	{r4, r5, r6, pc}

0800656c <__smakebuf_r>:
 800656c:	898b      	ldrh	r3, [r1, #12]
 800656e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006570:	079d      	lsls	r5, r3, #30
 8006572:	4606      	mov	r6, r0
 8006574:	460c      	mov	r4, r1
 8006576:	d507      	bpl.n	8006588 <__smakebuf_r+0x1c>
 8006578:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800657c:	6023      	str	r3, [r4, #0]
 800657e:	6123      	str	r3, [r4, #16]
 8006580:	2301      	movs	r3, #1
 8006582:	6163      	str	r3, [r4, #20]
 8006584:	b002      	add	sp, #8
 8006586:	bd70      	pop	{r4, r5, r6, pc}
 8006588:	ab01      	add	r3, sp, #4
 800658a:	466a      	mov	r2, sp
 800658c:	f7ff ffca 	bl	8006524 <__swhatbuf_r>
 8006590:	9900      	ldr	r1, [sp, #0]
 8006592:	4605      	mov	r5, r0
 8006594:	4630      	mov	r0, r6
 8006596:	f7ff fb23 	bl	8005be0 <_malloc_r>
 800659a:	b948      	cbnz	r0, 80065b0 <__smakebuf_r+0x44>
 800659c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065a0:	059a      	lsls	r2, r3, #22
 80065a2:	d4ef      	bmi.n	8006584 <__smakebuf_r+0x18>
 80065a4:	f023 0303 	bic.w	r3, r3, #3
 80065a8:	f043 0302 	orr.w	r3, r3, #2
 80065ac:	81a3      	strh	r3, [r4, #12]
 80065ae:	e7e3      	b.n	8006578 <__smakebuf_r+0xc>
 80065b0:	4b0d      	ldr	r3, [pc, #52]	; (80065e8 <__smakebuf_r+0x7c>)
 80065b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80065b4:	89a3      	ldrh	r3, [r4, #12]
 80065b6:	6020      	str	r0, [r4, #0]
 80065b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065bc:	81a3      	strh	r3, [r4, #12]
 80065be:	9b00      	ldr	r3, [sp, #0]
 80065c0:	6163      	str	r3, [r4, #20]
 80065c2:	9b01      	ldr	r3, [sp, #4]
 80065c4:	6120      	str	r0, [r4, #16]
 80065c6:	b15b      	cbz	r3, 80065e0 <__smakebuf_r+0x74>
 80065c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065cc:	4630      	mov	r0, r6
 80065ce:	f000 f8c9 	bl	8006764 <_isatty_r>
 80065d2:	b128      	cbz	r0, 80065e0 <__smakebuf_r+0x74>
 80065d4:	89a3      	ldrh	r3, [r4, #12]
 80065d6:	f023 0303 	bic.w	r3, r3, #3
 80065da:	f043 0301 	orr.w	r3, r3, #1
 80065de:	81a3      	strh	r3, [r4, #12]
 80065e0:	89a0      	ldrh	r0, [r4, #12]
 80065e2:	4305      	orrs	r5, r0
 80065e4:	81a5      	strh	r5, [r4, #12]
 80065e6:	e7cd      	b.n	8006584 <__smakebuf_r+0x18>
 80065e8:	0800637d 	.word	0x0800637d

080065ec <_raise_r>:
 80065ec:	291f      	cmp	r1, #31
 80065ee:	b538      	push	{r3, r4, r5, lr}
 80065f0:	4604      	mov	r4, r0
 80065f2:	460d      	mov	r5, r1
 80065f4:	d904      	bls.n	8006600 <_raise_r+0x14>
 80065f6:	2316      	movs	r3, #22
 80065f8:	6003      	str	r3, [r0, #0]
 80065fa:	f04f 30ff 	mov.w	r0, #4294967295
 80065fe:	bd38      	pop	{r3, r4, r5, pc}
 8006600:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006602:	b112      	cbz	r2, 800660a <_raise_r+0x1e>
 8006604:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006608:	b94b      	cbnz	r3, 800661e <_raise_r+0x32>
 800660a:	4620      	mov	r0, r4
 800660c:	f000 f830 	bl	8006670 <_getpid_r>
 8006610:	462a      	mov	r2, r5
 8006612:	4601      	mov	r1, r0
 8006614:	4620      	mov	r0, r4
 8006616:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800661a:	f000 b817 	b.w	800664c <_kill_r>
 800661e:	2b01      	cmp	r3, #1
 8006620:	d00a      	beq.n	8006638 <_raise_r+0x4c>
 8006622:	1c59      	adds	r1, r3, #1
 8006624:	d103      	bne.n	800662e <_raise_r+0x42>
 8006626:	2316      	movs	r3, #22
 8006628:	6003      	str	r3, [r0, #0]
 800662a:	2001      	movs	r0, #1
 800662c:	e7e7      	b.n	80065fe <_raise_r+0x12>
 800662e:	2400      	movs	r4, #0
 8006630:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006634:	4628      	mov	r0, r5
 8006636:	4798      	blx	r3
 8006638:	2000      	movs	r0, #0
 800663a:	e7e0      	b.n	80065fe <_raise_r+0x12>

0800663c <raise>:
 800663c:	4b02      	ldr	r3, [pc, #8]	; (8006648 <raise+0xc>)
 800663e:	4601      	mov	r1, r0
 8006640:	6818      	ldr	r0, [r3, #0]
 8006642:	f7ff bfd3 	b.w	80065ec <_raise_r>
 8006646:	bf00      	nop
 8006648:	2000000c 	.word	0x2000000c

0800664c <_kill_r>:
 800664c:	b538      	push	{r3, r4, r5, lr}
 800664e:	4d07      	ldr	r5, [pc, #28]	; (800666c <_kill_r+0x20>)
 8006650:	2300      	movs	r3, #0
 8006652:	4604      	mov	r4, r0
 8006654:	4608      	mov	r0, r1
 8006656:	4611      	mov	r1, r2
 8006658:	602b      	str	r3, [r5, #0]
 800665a:	f7fa fce3 	bl	8001024 <_kill>
 800665e:	1c43      	adds	r3, r0, #1
 8006660:	d102      	bne.n	8006668 <_kill_r+0x1c>
 8006662:	682b      	ldr	r3, [r5, #0]
 8006664:	b103      	cbz	r3, 8006668 <_kill_r+0x1c>
 8006666:	6023      	str	r3, [r4, #0]
 8006668:	bd38      	pop	{r3, r4, r5, pc}
 800666a:	bf00      	nop
 800666c:	20000324 	.word	0x20000324

08006670 <_getpid_r>:
 8006670:	f7fa bcd0 	b.w	8001014 <_getpid>

08006674 <__sread>:
 8006674:	b510      	push	{r4, lr}
 8006676:	460c      	mov	r4, r1
 8006678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800667c:	f000 f894 	bl	80067a8 <_read_r>
 8006680:	2800      	cmp	r0, #0
 8006682:	bfab      	itete	ge
 8006684:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006686:	89a3      	ldrhlt	r3, [r4, #12]
 8006688:	181b      	addge	r3, r3, r0
 800668a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800668e:	bfac      	ite	ge
 8006690:	6563      	strge	r3, [r4, #84]	; 0x54
 8006692:	81a3      	strhlt	r3, [r4, #12]
 8006694:	bd10      	pop	{r4, pc}

08006696 <__swrite>:
 8006696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800669a:	461f      	mov	r7, r3
 800669c:	898b      	ldrh	r3, [r1, #12]
 800669e:	05db      	lsls	r3, r3, #23
 80066a0:	4605      	mov	r5, r0
 80066a2:	460c      	mov	r4, r1
 80066a4:	4616      	mov	r6, r2
 80066a6:	d505      	bpl.n	80066b4 <__swrite+0x1e>
 80066a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ac:	2302      	movs	r3, #2
 80066ae:	2200      	movs	r2, #0
 80066b0:	f000 f868 	bl	8006784 <_lseek_r>
 80066b4:	89a3      	ldrh	r3, [r4, #12]
 80066b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066be:	81a3      	strh	r3, [r4, #12]
 80066c0:	4632      	mov	r2, r6
 80066c2:	463b      	mov	r3, r7
 80066c4:	4628      	mov	r0, r5
 80066c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066ca:	f000 b817 	b.w	80066fc <_write_r>

080066ce <__sseek>:
 80066ce:	b510      	push	{r4, lr}
 80066d0:	460c      	mov	r4, r1
 80066d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066d6:	f000 f855 	bl	8006784 <_lseek_r>
 80066da:	1c43      	adds	r3, r0, #1
 80066dc:	89a3      	ldrh	r3, [r4, #12]
 80066de:	bf15      	itete	ne
 80066e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80066e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80066e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80066ea:	81a3      	strheq	r3, [r4, #12]
 80066ec:	bf18      	it	ne
 80066ee:	81a3      	strhne	r3, [r4, #12]
 80066f0:	bd10      	pop	{r4, pc}

080066f2 <__sclose>:
 80066f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066f6:	f000 b813 	b.w	8006720 <_close_r>
	...

080066fc <_write_r>:
 80066fc:	b538      	push	{r3, r4, r5, lr}
 80066fe:	4d07      	ldr	r5, [pc, #28]	; (800671c <_write_r+0x20>)
 8006700:	4604      	mov	r4, r0
 8006702:	4608      	mov	r0, r1
 8006704:	4611      	mov	r1, r2
 8006706:	2200      	movs	r2, #0
 8006708:	602a      	str	r2, [r5, #0]
 800670a:	461a      	mov	r2, r3
 800670c:	f7fa fcc1 	bl	8001092 <_write>
 8006710:	1c43      	adds	r3, r0, #1
 8006712:	d102      	bne.n	800671a <_write_r+0x1e>
 8006714:	682b      	ldr	r3, [r5, #0]
 8006716:	b103      	cbz	r3, 800671a <_write_r+0x1e>
 8006718:	6023      	str	r3, [r4, #0]
 800671a:	bd38      	pop	{r3, r4, r5, pc}
 800671c:	20000324 	.word	0x20000324

08006720 <_close_r>:
 8006720:	b538      	push	{r3, r4, r5, lr}
 8006722:	4d06      	ldr	r5, [pc, #24]	; (800673c <_close_r+0x1c>)
 8006724:	2300      	movs	r3, #0
 8006726:	4604      	mov	r4, r0
 8006728:	4608      	mov	r0, r1
 800672a:	602b      	str	r3, [r5, #0]
 800672c:	f7fa fccd 	bl	80010ca <_close>
 8006730:	1c43      	adds	r3, r0, #1
 8006732:	d102      	bne.n	800673a <_close_r+0x1a>
 8006734:	682b      	ldr	r3, [r5, #0]
 8006736:	b103      	cbz	r3, 800673a <_close_r+0x1a>
 8006738:	6023      	str	r3, [r4, #0]
 800673a:	bd38      	pop	{r3, r4, r5, pc}
 800673c:	20000324 	.word	0x20000324

08006740 <_fstat_r>:
 8006740:	b538      	push	{r3, r4, r5, lr}
 8006742:	4d07      	ldr	r5, [pc, #28]	; (8006760 <_fstat_r+0x20>)
 8006744:	2300      	movs	r3, #0
 8006746:	4604      	mov	r4, r0
 8006748:	4608      	mov	r0, r1
 800674a:	4611      	mov	r1, r2
 800674c:	602b      	str	r3, [r5, #0]
 800674e:	f7fa fcc8 	bl	80010e2 <_fstat>
 8006752:	1c43      	adds	r3, r0, #1
 8006754:	d102      	bne.n	800675c <_fstat_r+0x1c>
 8006756:	682b      	ldr	r3, [r5, #0]
 8006758:	b103      	cbz	r3, 800675c <_fstat_r+0x1c>
 800675a:	6023      	str	r3, [r4, #0]
 800675c:	bd38      	pop	{r3, r4, r5, pc}
 800675e:	bf00      	nop
 8006760:	20000324 	.word	0x20000324

08006764 <_isatty_r>:
 8006764:	b538      	push	{r3, r4, r5, lr}
 8006766:	4d06      	ldr	r5, [pc, #24]	; (8006780 <_isatty_r+0x1c>)
 8006768:	2300      	movs	r3, #0
 800676a:	4604      	mov	r4, r0
 800676c:	4608      	mov	r0, r1
 800676e:	602b      	str	r3, [r5, #0]
 8006770:	f7fa fcc7 	bl	8001102 <_isatty>
 8006774:	1c43      	adds	r3, r0, #1
 8006776:	d102      	bne.n	800677e <_isatty_r+0x1a>
 8006778:	682b      	ldr	r3, [r5, #0]
 800677a:	b103      	cbz	r3, 800677e <_isatty_r+0x1a>
 800677c:	6023      	str	r3, [r4, #0]
 800677e:	bd38      	pop	{r3, r4, r5, pc}
 8006780:	20000324 	.word	0x20000324

08006784 <_lseek_r>:
 8006784:	b538      	push	{r3, r4, r5, lr}
 8006786:	4d07      	ldr	r5, [pc, #28]	; (80067a4 <_lseek_r+0x20>)
 8006788:	4604      	mov	r4, r0
 800678a:	4608      	mov	r0, r1
 800678c:	4611      	mov	r1, r2
 800678e:	2200      	movs	r2, #0
 8006790:	602a      	str	r2, [r5, #0]
 8006792:	461a      	mov	r2, r3
 8006794:	f7fa fcc0 	bl	8001118 <_lseek>
 8006798:	1c43      	adds	r3, r0, #1
 800679a:	d102      	bne.n	80067a2 <_lseek_r+0x1e>
 800679c:	682b      	ldr	r3, [r5, #0]
 800679e:	b103      	cbz	r3, 80067a2 <_lseek_r+0x1e>
 80067a0:	6023      	str	r3, [r4, #0]
 80067a2:	bd38      	pop	{r3, r4, r5, pc}
 80067a4:	20000324 	.word	0x20000324

080067a8 <_read_r>:
 80067a8:	b538      	push	{r3, r4, r5, lr}
 80067aa:	4d07      	ldr	r5, [pc, #28]	; (80067c8 <_read_r+0x20>)
 80067ac:	4604      	mov	r4, r0
 80067ae:	4608      	mov	r0, r1
 80067b0:	4611      	mov	r1, r2
 80067b2:	2200      	movs	r2, #0
 80067b4:	602a      	str	r2, [r5, #0]
 80067b6:	461a      	mov	r2, r3
 80067b8:	f7fa fc4e 	bl	8001058 <_read>
 80067bc:	1c43      	adds	r3, r0, #1
 80067be:	d102      	bne.n	80067c6 <_read_r+0x1e>
 80067c0:	682b      	ldr	r3, [r5, #0]
 80067c2:	b103      	cbz	r3, 80067c6 <_read_r+0x1e>
 80067c4:	6023      	str	r3, [r4, #0]
 80067c6:	bd38      	pop	{r3, r4, r5, pc}
 80067c8:	20000324 	.word	0x20000324

080067cc <_init>:
 80067cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ce:	bf00      	nop
 80067d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067d2:	bc08      	pop	{r3}
 80067d4:	469e      	mov	lr, r3
 80067d6:	4770      	bx	lr

080067d8 <_fini>:
 80067d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067da:	bf00      	nop
 80067dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067de:	bc08      	pop	{r3}
 80067e0:	469e      	mov	lr, r3
 80067e2:	4770      	bx	lr
